<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Acer_Hexo_Test</title>
    <url>/2024/01/28/Acer-Hexo-Test/</url>
    <content><![CDATA[<p>Hexo博客迁移测试</p>
]]></content>
  </entry>
  <entry>
    <title>Alist+RaiDrivce</title>
    <url>/2022/11/12/Alist-RaiDrivce/</url>
    <content><![CDATA[<h1 id="Alist-RaiDrive-云盘本地挂载"><a href="#Alist-RaiDrive-云盘本地挂载" class="headerlink" title="Alist + RaiDrive 云盘本地挂载"></a>Alist + RaiDrive 云盘本地挂载</h1><ul>
<li>以阿里云盘为例</li>
</ul>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li><p><a href="https://github.com/alist-org/alist/releases">Alist</a></p>
</li>
<li><p><a href="https://www.raidrive.com/download">RaiDrive</a></p>
</li>
<li><p>可能无法下载<span id="more"></span></p>
</li>
</ul>
<h2 id="配置-Alist"><a href="#配置-Alist" class="headerlink" title="配置 Alist"></a>配置 Alist</h2><ul>
<li><p><a href="https://alist.nn.ci/zh/guide/install/manual.html">手动安装 | AList文档</a></p>
</li>
<li><p>手动解压 <code>Win+R</code> <code>cmd</code>运行<code>.\alist.exe server</code> 记住密码(不用记也行)</p>
</li>
<li><p>浏览器打开 <code>127.0.0.1:5244</code></p>
</li>
<li><p>点击下方管理-&gt;存储-&gt;添加-&gt;选择-&gt;阿里云盘</p>
</li>
<li><p>重要的是填写挂载路径 以及 刷新令牌 可以到Alist<a href="https://alist.nn.ci/zh/guide/drivers/aliyundrive.html">阿里云盘 | AList文档</a>看具体操作方法</p>
</li>
</ul>
<h2 id="配置RaiDrive"><a href="#配置RaiDrive" class="headerlink" title="配置RaiDrive"></a>配置RaiDrive</h2><ul>
<li><p>双击安装 允许网络和驱动安装</p>
</li>
<li><p>安装完成后 右上方添加-&gt;NAS-&gt;WebDAV </p>
</li>
<li><p>选择盘符 -&gt;名称-&gt;地址 127.0.0.1:5244 -&gt;取消勾选地址-&gt; 账户密码-&gt;连接</p>
<p><img src="/2022/11/12/Alist-RaiDrivce/2022-11-11-22-43-43-image.png"></p>
</li>
</ul>
<h2 id="开启自启动脚本"><a href="#开启自启动脚本" class="headerlink" title="开启自启动脚本"></a>开启自启动脚本</h2><ul>
<li><p>网上都是 vbs 脚本 由于vbs太老了在我电脑上运行老报错也不想搞环境 用bat折腾了一下</p>
</li>
<li><p>三个都放在alist.exe目录下</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">if &quot;%1&quot;==&quot;h&quot; goto begin</span><br><span class="line">start mshta vbscript:createobject(&quot;wscript.shell&quot;).run(&quot;&quot;&quot;%~nx0&quot;&quot; h&quot;,0)(window.close)&amp;&amp;exit</span><br><span class="line">:begin</span><br><span class="line">:: 启动 任务</span><br><span class="line">start /min cmd /c alist.bat</span><br><span class="line">start /min cmd /c Raidriver.bat</span><br><span class="line">::pause</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">if &quot;%1&quot;==&quot;h&quot; goto begin</span><br><span class="line">start mshta vbscript:createobject(&quot;wscript.shell&quot;).run(&quot;&quot;&quot;%~nx0&quot;&quot; h&quot;,0)(window.close)&amp;&amp;exit</span><br><span class="line">:begin</span><br><span class="line">:: 启动 alist</span><br><span class="line">.\alist.exe server</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">if &quot;%1&quot;==&quot;h&quot; goto begin</span><br><span class="line">start mshta vbscript:createobject(&quot;wscript.shell&quot;).run(&quot;&quot;&quot;%~nx0&quot;&quot; h&quot;,0)(window.close)&amp;&amp;exit</span><br><span class="line">:begin</span><br><span class="line">:: 延时 1000ms</span><br><span class="line">set /a delay=1000</span><br><span class="line">set TotalTime=0</span><br><span class="line">set NowTime=%time%</span><br><span class="line">::读取起始时间，时间格式为：13:01:05.95</span><br><span class="line">:delay_continue</span><br><span class="line">set /a minute1=1%NowTime:~3,2%-100</span><br><span class="line">::读取起始时间的分钟数</span><br><span class="line">set /a second1=1%NowTime:~-5,2%%NowTime:~-2%0-100000</span><br><span class="line">::将起始时间的秒数转为毫秒</span><br><span class="line">set NowTime=%time%</span><br><span class="line">set /a minute2=1%NowTime:~3,2%-100</span><br><span class="line">:: 读取现在时间的分钟数</span><br><span class="line">set /a second2=1%NowTime:~-5,2%%NowTime:~-2%0-100000</span><br><span class="line">::将现在时间的秒数转为毫秒</span><br><span class="line">set /a TotalTime+=(%minute2%-%minute1%+60)%%60*60000+%second2%-%second1%</span><br><span class="line">if %TotalTime% lss %delay% goto delay_continue</span><br><span class="line">:: echo %TotalTime%ms</span><br><span class="line">:: 启动 RaiDrive  换成你的安装路径</span><br><span class="line">cd /d D:\Program Files\OpenBoxLab\RaiDrive</span><br><span class="line">.\RaiDrive.exe</span><br><span class="line">::pause</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>

<ul>
<li>将第一个脚本 创建快捷方式放到<code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</code></li>
</ul>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Cyusb3014开发笔记</title>
    <url>/2022/11/14/Cyusb3014%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="Cyusb3014开发笔记"><a href="#Cyusb3014开发笔记" class="headerlink" title="Cyusb3014开发笔记"></a>Cyusb3014开发笔记</h2><p>[TOC]</p>
<h3 id="SDK安装"><a href="#SDK安装" class="headerlink" title="SDK安装"></a>SDK安装</h3><ul>
<li><p>FX3SDKSetup_1.3.4.exe   </p>
<p>SDK中包含Cyusb3014开发过程中使用到的各种 固件源码  API 工具 工具源码 文档等等说明</p>
</li>
<li><p>安装时 一路next就行 除了安装路径外并没有需要注意的</p>
</li>
</ul>
<span id="more"></span>

<h3 id="EZ-USB-Suite-使用"><a href="#EZ-USB-Suite-使用" class="headerlink" title="EZ USB Suite 使用"></a>EZ USB Suite 使用</h3><ul>
<li>固件编程</li>
</ul>
<h3 id="GPIF-II-使用"><a href="#GPIF-II-使用" class="headerlink" title="GPIF II 使用"></a>GPIF II 使用</h3><h3 id="CyAPI-使用"><a href="#CyAPI-使用" class="headerlink" title="CyAPI 使用"></a>CyAPI 使用</h3><ul>
<li>编程</li>
</ul>
<h3 id="USB枚举信息修改"><a href="#USB枚举信息修改" class="headerlink" title="USB枚举信息修改"></a>USB枚举信息修改</h3><ul>
<li><p>一般FX3固件的设备描述信息都存储在<code>XXXdscr.c</code>文件数组中</p>
</li>
<li><p>打开一个FX3的内部回环的例子<code>USBBulkLoopAutoEnum</code>修改VID、PID 需要注意的是这里的VID、PID都对应驱动中的枚举 如果修改为自定义的 Cypress 的驱动是没办法枚举出来的</p>
</li>
</ul>
<img title src="/2022/11/14/Cyusb3014%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/2022-10-28-09-19-34-image.png" alt width="332" data-align="center">

<ul>
<li><p>修改制造商 产品信息 序列号 数组第一个字节为字符串大小 第二个为描述类型</p>
<img title src="/2022/11/14/Cyusb3014%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/2022-10-28-09-34-02-image.png" alt width="405" data-align="center">
</li>
<li><p>修改序列号固件里面很多例子都没有使用序列号 这里需要单独说明下 </p>
<p><img src="/2022/11/14/Cyusb3014%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/2022-10-28-09-45-30-image.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Standard serialnumber string descriptor */</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint8_t</span> CyFxUSBSerialNumberDscr[] __attribute__ ((aligned (<span class="number">32</span>))) =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0x16</span>,                           <span class="comment">/* Descriptor size */</span></span><br><span class="line">    CY_U3P_USB_STRING_DESCR,        <span class="comment">/* Device descriptor type */</span></span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="string">&#x27;8&#x27;</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="string">&#x27;9&#x27;</span>,<span class="number">0x00</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>将以上信息分别位于 <code>XXXdscr.c</code> <code>XXX.h</code>中 同时需要在<code>XXX.c</code>文件中修改 有的例子中对描述符的使用方式不同但配置都大同小异</p>
<img title src="/2022/11/14/Cyusb3014%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/2022-10-28-09-53-22-image.png" alt width="357" data-align="center">

<p>修改完成后编译 下载可以看到重新枚举的信息</p>
<img title src="/2022/11/14/Cyusb3014%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/2022-10-28-09-57-44-image.png" alt width="413" data-align="center"></li>
</ul>
<h3 id="引导程序的生成"><a href="#引导程序的生成" class="headerlink" title="引导程序的生成"></a>引导程序的生成</h3><ul>
<li>不同的引导程序需要 对<code>EZ USB Suite</code> 中项目进行配置</li>
<li><a href="https://www.infineon.com/dgdl/Infineon-AN76405_EZ-USB_FX3_Boot_Options-ApplicationNotes-v12_00-CN.pdf?fileId=8ac78c8c7cdc391c017d07398d995e1b">参考</a></li>
</ul>
<h4 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h4><ul>
<li><p>右键项目-&gt;Properties(最后一项)-&gt;C&#x2F;C++ Build-&gt;Settings-&gt;Build Steps-&gt;Post-build steps Command:</p>
<img title src="/2022/11/14/Cyusb3014%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/2022-10-28-10-21-46-image.png" alt data-align="center" width="579">

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">elf2img.exe -i &lt;elf filename&gt; -o &lt;image filename&gt; [-i2cconf &lt;eeprom control&gt;][-vectorload &lt;vecload&gt;] [-imgtype &lt;image type&gt;] [-v] [-h]</span><br><span class="line">&lt;elf filename&gt;: 输入带路径的 ELF 文件名</span><br><span class="line">&lt;image filename&gt;: 输出带路径的文件名</span><br><span class="line">&lt;eeprom control&gt;: I2C/SPI EEPROM 控制字以十六进制形式</span><br><span class="line">&lt;image type&gt;: 十六进制形式的镜像类型字节 固件应用程序的&lt;image type&gt;为 <span class="number">0xB0</span></span><br><span class="line">-v: 在转换过程中启用详细日志 </span><br><span class="line">-h: 打印帮助信息</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="USB-启动"><a href="#USB-启动" class="headerlink" title="USB 启动"></a>USB 启动</h4><ul>
<li><p>PMODE ： Z11</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">elf2img.exe -i $&#123;ProjName&#125;.elf -o $&#123;ProjName&#125;.img -v</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="I2C-gt-USB"><a href="#I2C-gt-USB" class="headerlink" title="I2C-&gt;USB"></a>I2C-&gt;USB</h4><ul>
<li><p>PMODE ：  Z1Z</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">it <span class="number">0</span> 必须为零</span><br><span class="line">Bits <span class="number">3</span> - <span class="number">1</span> EEPROM 大小[ <span class="number">7</span> = <span class="number">128</span> KB, <span class="number">6</span> = <span class="number">64</span> KB, <span class="number">5</span> = <span class="number">32</span> KB, <span class="number">4</span> = <span class="number">16</span> KB, <span class="number">3</span> = <span class="number">8</span> KB, <span class="number">2</span> = <span class="number">4</span> KB]  <span class="number">6</span> = <span class="number">256</span>k(ST)</span><br><span class="line">Bits <span class="number">5</span> - <span class="number">4</span> EEPROM 速度[ <span class="number">0</span> = <span class="number">100</span> KHz, <span class="number">1</span> = <span class="number">400</span> KHz, <span class="number">2</span> = <span class="number">1</span> MHz]</span><br><span class="line">Bits <span class="number">7</span> - <span class="number">6</span> 必须为零</span><br><span class="line">例如，值 <span class="number">0x1C</span> 对应于在 <span class="number">400</span>kHz 频率下使用 <span class="number">64</span>KB EEPROM。</span><br><span class="line"></span><br><span class="line">elf2img.exe -i $&#123;ProjName&#125;.elf -o $&#123;ProjName&#125;_i2c.img -i2cconf <span class="number">0x2A</span> -v</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="SPI-gt-USB"><a href="#SPI-gt-USB" class="headerlink" title="SPI-&gt;USB"></a>SPI-&gt;USB</h4><ul>
<li><p>PMODE： 0Z1</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Bit <span class="number">0</span> 必须为零</span><br><span class="line">Bits <span class="number">3</span> - <span class="number">1</span> 可忽略</span><br><span class="line">Bits <span class="number">5</span> - <span class="number">4</span> SPI 工作频率 [<span class="number">0</span> = <span class="number">10</span> MHz, <span class="number">1</span> = <span class="number">20</span> MHz, <span class="number">2</span> = <span class="number">30</span> MHz]</span><br><span class="line">Bits <span class="number">7</span> - <span class="number">6</span> 必须为零</span><br><span class="line">例如，值为 <span class="number">0x1C</span> 将为 SPI 工作频率 <span class="number">20</span> MHz 生成.img。</span><br><span class="line"></span><br><span class="line">elf2img.exe -i $&#123;ProjName&#125;.elf -o $&#123;ProjName&#125;_spi.img -i2cconf <span class="number">0x2C</span> -v </span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="FX3-固件下载"><a href="#FX3-固件下载" class="headerlink" title="FX3 固件下载"></a>FX3 固件下载</h3><ul>
<li><p>RAM </p>
<ul>
<li>Boot loader 模式下下载  掉电丢失</li>
</ul>
</li>
<li><p>I2C&#x2F;SPI</p>
<ul>
<li><p>Boot loader 模式下下载Boot Programmer(cyfxflashprog)</p>
</li>
<li><p>Boot Programmer 下 下载固件到 I2C&#x2F;SPI</p>
</li>
<li><p>如果需要重新下载且在 I2C&#x2F;SPI的引导模式下需要切换到USB引导执行以上步骤</p>
</li>
</ul>
</li>
</ul>
<p>说明：官方工具 USB Control Center 会检测 Boot Programmer ：<code>ProductID=0x4720 </code>但<code>CyAPI.h</code>不会</p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul>
<li><p>将 <code>cyfxflashprog </code>对I2C&#x2F;SPI 读写的程序嵌入到实际应用的程序中  </p>
<p>单独写一个下载固件的程序 就能在实际程序的基础上固化程序 而不需要其他额外的下载和进入Boot Loader</p>
</li>
<li><p>GPIF 32位宽 SPI不可用</p>
</li>
</ul>
<blockquote>
<p> The I2C interface is always available. If the GPIF data bus is configured as 32-bit wide, only the UART and I2S interfaces are available (SPI is not available). In this case, the configuration chosen should be CY_U3P_IO_MATRIX_LPP_DEFAULT.</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">io_cfg.lppMode   = CY_U3P_IO_MATRIX_LPP_DEFAULT;</span><br></pre></td></tr></table></figure>

<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><h4 id="AN65974-编译"><a href="#AN65974-编译" class="headerlink" title="AN65974 编译"></a>AN65974 编译</h4><ul>
<li><p>在编译<code>AN65974</code>遇到问题 无法 Clean和 Build</p>
<ul>
<li>SDK中的例子都能编译成功  <code>AN65974</code>中的就是不行</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">cs-make clean </span><br><span class="line">cs-rm -rf  SlaveFifoSync.siz  ./cyfx_gcc_startup.o ./cyfxslfifosync.o ./cyfxslfifousbdscr.o ./cyfxtx.o  ./cyfxslfifosync.d ./cyfxslfifousbdscr.d ./cyfxtx.d  SlaveFifoSync.lst  ./cyfx_gcc_startup.d  SlaveFifoSync.elf</span><br><span class="line">process_begin: CreateProcess(<span class="literal">NULL</span>, echo <span class="string">&quot; &quot;</span>, ...) failed.</span><br><span class="line">make (e=<span class="number">2</span>): 系统找不到指定的文件。</span><br><span class="line">cs-make: [clean] Error <span class="number">2</span> (ignored)</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">cs-make all </span><br><span class="line">process_begin: CreateProcess(<span class="literal">NULL</span>, echo <span class="string">&quot;Invoking: ARM Sourcery Windows GNU Print Size&quot;</span>, ...) failed.</span><br><span class="line">make (e=<span class="number">2</span>): 系统找不到指定的文件。</span><br><span class="line">cs-make: *** [SlaveFifoSync.siz] Error <span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>因为<code>AN65974</code>中的代码都比较老没有<code>makefile.init</code> 添加一个文件内容如下</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">SHELL=C:\Windows\system32\cmd.exe</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>DMCA功能纪要</title>
    <url>/2022/11/12/DMCA%E5%8A%9F%E8%83%BD%E7%BA%AA%E8%A6%81/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="随便输入个密码就想骗我？" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="30920fa04043b6eb813cef3752191aa7e0bae14f7b7913a8f0d45faad8fbbf2d"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">就不给你看，除非你有密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>DMCA</tag>
      </tags>
  </entry>
  <entry>
    <title>Git详细用法</title>
    <url>/2024/03/17/Git%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Git详细用法"><a href="#Git详细用法" class="headerlink" title="Git详细用法"></a>Git详细用法</h1><p>[TOC]</p>
<ul>
<li>Git版本： git version 2.42.0.windows.2</li>
<li>有的主分支名是 master、有的是main</li>
</ul>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li>官网：<a href="https://git-scm.com/">https://git-scm.com/</a></li>
<li>下载：<a href="https://git-scm.com/downloads">Git - Downloads</a> （根据自己的需求下载）</li>
<li><a href="https://so.csdn.net/so/search?q=%E4%B8%AD%E6%96%87%E7%89%88&spm=1001.2101.3001.7020">中文版</a>使用手册：<a href="https://git-scm.com/book/zh/v2">Git - Book</a></li>
<li>安装时没有什么需要特别注意的地方一路next就行</li>
</ul>
<h2 id="连接远程仓库"><a href="#连接远程仓库" class="headerlink" title="连接远程仓库"></a>连接远程仓库</h2><h3 id="配置用户名及邮箱"><a href="#配置用户名及邮箱" class="headerlink" title="配置用户名及邮箱"></a>配置用户名及邮箱</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置全局用户名</span></span><br><span class="line">git config --global user.name &quot;your name&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置全局邮箱</span></span><br><span class="line">git config --global user.email &quot;your_email@youremail.com&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看用户名</span></span><br><span class="line">git config user.name</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看邮箱</span></span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure>

<h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成密钥 中有三次等待输入，可直接回车</span></span><br><span class="line">ssh-keygen -t -rsa -C &quot;your_email@youremail.com&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制 C:\Users\用户\.ssh\id_rsa.pub 中的内容粘贴到远程仓库 SSH公钥中</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将公钥复制到剪切板 （clip Windows命令将输出重定向剪切板）</span></span><br><span class="line">clip &lt; ~/.ssh/id_rsa.pub</span><br><span class="line"><span class="meta">#</span><span class="bash"> 远程仓库中添加 SSH公钥 不同的远程仓库操作方式可能略有不同</span></span><br></pre></td></tr></table></figure>

<h3 id="仓库关联"><a href="#仓库关联" class="headerlink" title="仓库关联"></a>仓库关联</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关联远程仓库  origin 远程仓库别名 可以自行设置 （关联时本地仓库需要先存在，不存在先git init）</span></span><br><span class="line">git remote add origin git@gitee.com:xxxx/xxx.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 取消关联远程仓库</span></span><br><span class="line">git remote rm orign</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看远程仓库信息</span></span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 当前仓库状态</span></span><br><span class="line">git status</span><br><span class="line"><span class="meta">#</span><span class="bash"> 当前仓库分支状态（后面跟分支名，可创建分支）</span></span><br><span class="line">git branch</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看提交日志</span></span><br><span class="line">git log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看提交日志（显示单行日志）</span></span><br><span class="line">git log --oneline</span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示单行日志流程图</span></span><br><span class="line">git log --oneline --graph</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看单行提交日志</span></span><br><span class="line">git log --pretty=oneline</span><br></pre></td></tr></table></figure>

<h3 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 初始化本地仓库</span></span><br><span class="line">git init</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加文件到暂存区(<span class="string">&quot;add . &quot;</span> 所有文件)</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交记录</span></span><br><span class="line">git commit -am&quot;提交记录&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 推送到远程仓库 （origin远程仓库别名）</span></span><br><span class="line">git push origin master</span><br><span class="line"><span class="meta">#</span><span class="bash"> 拉取远程仓库到本地</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>

<h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建分支</span></span><br><span class="line">git branch develop</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换分支</span></span><br><span class="line">git switch</span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并分支 本地 (将develop合并到当前分支)</span></span><br><span class="line">git merge develop</span><br><span class="line"><span class="meta">#</span><span class="bash"> 退回修改</span></span><br><span class="line">git restroe</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取当前所有分支的list</span></span><br><span class="line">git branch</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看每个分支最后提交</span></span><br><span class="line">git branch -v</span><br><span class="line"><span class="meta">#</span><span class="bash"> 已经合并到的当前分支 <span class="comment">#此时可以删除 已合并分支 git branch -d 分支名</span></span></span><br><span class="line">git branch --merged  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 未合并到当前分支 <span class="comment">#使用 git branch -d 删除未合并分支会失败  可以使用 git branch -D 强制删除</span></span></span><br><span class="line">git branch --no-merged </span><br><span class="line"><span class="meta">#</span><span class="bash"> 可在当前分支查看 其它分支点合并状态</span></span><br><span class="line">git branch --no-merged master</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到Master 分支</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="meta">#</span><span class="bash"> 对develop 分支进行合并  --no-ff非快进式合并  会在master生成新节点</span></span><br><span class="line">git merge --no-ff develop</span><br></pre></td></tr></table></figure>

<h3 id="远程仓库交互"><a href="#远程仓库交互" class="headerlink" title="远程仓库交互"></a>远程仓库交互</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看远程仓库信息</span></span><br><span class="line">git remote -v</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取远程引用的完整列表</span></span><br><span class="line">git ls-remote &lt;remote&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取远程分支的信息</span></span><br><span class="line">git remote show &lt;remote&gt;</span><br></pre></td></tr></table></figure>

<h2 id="进阶用法"><a href="#进阶用法" class="headerlink" title="进阶用法"></a>进阶用法</h2><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出标签</span></span><br><span class="line">git tag</span><br><span class="line">git tag -l</span><br><span class="line">git tag --list</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可用通配符匹配显示结果 (使用通配符时 -l/--list 必须有)</span></span><br><span class="line">git tag -l &quot;v1.0.0*&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建附注标签 -m指定mssage，若没有指定信息会启动编辑器输入信息</span></span><br><span class="line">git tag -a v1.3 -m &quot;version 1.3&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示附注标签详细信息</span></span><br><span class="line">git show v1.3</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建轻量标签 无附加信息（不需要使用 -a/-s/-m）</span></span><br><span class="line">git tag v1.3</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 给指定提交(commit-id)打标签</span></span><br><span class="line">git tag -a v1.2 commit-id</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将指定标签传送到远程仓库</span></span><br><span class="line">git push origin v1.3</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将传送所有不在远程的标签</span></span><br><span class="line">git push origin --tags</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除本地标签</span></span><br><span class="line">git tag -d v1.3</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程标签 (将冒号前面的空值推送到远程标签名，从而高效地删除它)</span></span><br><span class="line">git push origin :refs/tags/v1.3</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程标签</span></span><br><span class="line">git push orgin --delete v1.3</span><br></pre></td></tr></table></figure>

<h3 id="压缩提交记录"><a href="#压缩提交记录" class="headerlink" title="压缩提交记录"></a>压缩提交记录</h3><ul>
<li>amend命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 若与上次提交有变化，先git add</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta">#</span><span class="bash"> 压缩提交记录，执行后弹出修改commit，修改好后wq</span></span><br><span class="line">git commit -amend</span><br></pre></td></tr></table></figure>

<h3 id="代码合并"><a href="#代码合并" class="headerlink" title="代码合并"></a>代码合并</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将dev合并到当前分支</span></span><br><span class="line">git merge dev</span><br></pre></td></tr></table></figure>

<h3 id="创建快照"><a href="#创建快照" class="headerlink" title="创建快照"></a>创建快照</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打包 master</span></span><br><span class="line">git archive -o xxx.zip master</span><br><span class="line"><span class="meta">#</span><span class="bash"> 打包 指定提交(commit_id)</span></span><br><span class="line">git archive -o xxx.zip commit_id</span><br><span class="line"><span class="meta">#</span><span class="bash"> 打包指定提交(commit_id)下指定文件夹（dir）</span></span><br><span class="line">git archive -o xxx.zip commit_id dir</span><br><span class="line"><span class="meta">#</span><span class="bash"> 打包支持的格式 tar、tgz、tar.gz、zip 可使用以下命令查看</span></span><br><span class="line">git archive -l</span><br><span class="line">git archive --list</span><br></pre></td></tr></table></figure>

<h3 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 克隆仓库</span></span><br><span class="line">git clone https://github.com/xxx/xxx.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 克隆 wiki 在仓库链接后缀修改为 .wiki.git</span></span><br><span class="line">git clone https://github.com/xxx/xxx.wiki.git</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + git 安装使用</title>
    <url>/2021/10/31/Hexo+git%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Hexo-git-安装使用"><a href="#Hexo-git-安装使用" class="headerlink" title="Hexo + git 安装使用"></a>Hexo + git 安装使用</h2><ul>
<li>环境： win10   </li>
<li>2021.10.31</li>
</ul>
<h4 id="Hexo-是什么"><a href="#Hexo-是什么" class="headerlink" title="Hexo 是什么"></a>Hexo 是什么</h4><p>这里引用官方的一句话说明</p>
<p><em>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</em></p>
<span id="more"></span>

<h4 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h4><ul>
<li><a href="https://hexo.bootcss.com/">https://hexo.bootcss.com/</a></li>
<li><a href="https://hexo.bootcss.com/docs/">https://hexo.bootcss.com/docs/</a></li>
</ul>
<p>官方文档介绍得相当详细了 强烈建议按照官方文档来 至于为啥还好写这篇文章是留给自己看的</p>
<h4 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h4><ul>
<li><p>需要先安装  <a href="https://git-scm.com/">Git</a>    <a href="http://nodejs.org/">Node.js</a> (10.13以上)</p>
</li>
<li><p>到各自官网下载安装就行  Node.js 最好选长期支持版(LTS) 有就不用了</p>
</li>
</ul>
<h4 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<ul>
<li><p>用Git 手动安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone http://github.com/hexojs/hexo.git</span><br><span class="line">cd hexo</span><br><span class="line">npm install -g</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装完成后可以使用  以下命令查看版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>
</li>
<li><p>以下是我的版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Hasee&gt;hexo -V</span><br><span class="line">hexo-cli: 4.3.0</span><br><span class="line">os: win32 10.0.19043</span><br><span class="line">node: 12.6.0</span><br><span class="line">v8: 7.5.288.22-node.14</span><br><span class="line">uv: 1.30.1</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.7</span><br><span class="line">ares: 1.15.0</span><br><span class="line">modules: 72</span><br><span class="line">nghttp2: 1.38.0</span><br><span class="line">napi: 4</span><br><span class="line">llhttp: 1.1.4</span><br><span class="line">http_parser: 2.8.0</span><br><span class="line">openssl: 1.1.1c</span><br><span class="line">cldr: 35.1</span><br><span class="line">icu: 64.2</span><br><span class="line">tz: 2019a</span><br><span class="line">unicode: 12.1</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo-cli: 4.3.1</span><br><span class="line">os: win32 10.0.22621</span><br><span class="line">node: 20.11.0</span><br><span class="line">acorn: 8.11.2</span><br><span class="line">ada: 2.7.4</span><br><span class="line">ares: 1.20.1</span><br><span class="line">base64: 0.5.1</span><br><span class="line">brotli: 1.0.9</span><br><span class="line">cjs_module_lexer: 1.2.2</span><br><span class="line">cldr: 43.1</span><br><span class="line">icu: 73.2</span><br><span class="line">llhttp: 8.1.1</span><br><span class="line">modules: 115</span><br><span class="line">napi: 9</span><br><span class="line">nghttp2: 1.58.0</span><br><span class="line">nghttp3: 0.7.0</span><br><span class="line">ngtcp2: 0.8.1</span><br><span class="line">openssl: 3.0.12+quic</span><br><span class="line">simdutf: 4.0.4</span><br><span class="line">tz: 2023c</span><br><span class="line">undici: 5.27.2</span><br><span class="line">unicode: 15.0</span><br><span class="line">uv: 1.46.0</span><br><span class="line">uvwasi: 0.0.19</span><br><span class="line">v8: 11.3.244.8-node.17</span><br><span class="line">zlib: 1.2.13.1-motley-5daffc7</span><br></pre></td></tr></table></figure>



<h4 id="Hexo-卸载"><a href="#Hexo-卸载" class="headerlink" title="Hexo 卸载"></a>Hexo 卸载</h4><ul>
<li><p>因为在很早之前 安装过hexo 但是版本已经太老 现在需要卸载了重新安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo 以前版本</span><br><span class="line">hexo-cli：2.0.0  </span><br><span class="line">这个没有卸载成功</span><br><span class="line">npm uninstall hexo-cli -g</span><br><span class="line">这个成功</span><br><span class="line">npm uninstall hexo -g   </span><br></pre></td></tr></table></figure>
</li>
<li><p>然后按照上面方法重新安装</p>
</li>
</ul>
<h4 id="Hexo-新建博客"><a href="#Hexo-新建博客" class="headerlink" title="Hexo 新建博客"></a>Hexo 新建博客</h4><ul>
<li><p>选一个文件夹  用 git bush  或者 按住Shift 右键打开命令行  输入以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line">cd blog </span><br><span class="line">npm install </span><br><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo server -p 80  #http://localhost:80</span><br></pre></td></tr></table></figure>
</li>
<li><p>完成后浏览器打开 <a href="http://localhost/">http://localhost:80</a></p>
</li>
</ul>
<h4 id="安装主题-Next"><a href="#安装主题-Next" class="headerlink" title="安装主题 Next"></a>安装主题 Next</h4><ul>
<li><p>也可以安装其它的主题   到<a href="https://hexo.io/themes/index.html">官方主题站</a>  进去后选择主题  点击进入后找到github入口跳转 查看安装方法比如<a href>Next的安装方法</a></p>
</li>
<li><p>Next 安装方法  在之前的 blog 文件夹下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
</li>
<li><p>&#96;&#96;_config.yml&#96;  文件中写修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后用浏览器查看 进入默认浏览器  <a href="http://localhost:4000/">http://localhost:4000</a> 查看效果  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s </span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Hexo上传-部署"><a href="#Hexo上传-部署" class="headerlink" title="Hexo上传  部署"></a>Hexo上传  部署</h4><ul>
<li><p>先在远程仓库 github&#x2F;gitee 新建一个与用户名相同的 仓库</p>
</li>
<li><p>如果不会 Git 操作可以自行百度一番 </p>
</li>
<li><p>部署需要安装插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后在  <code>_config.yml</code>  修改 <code>deploy</code>  <code>url</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git   </span><br><span class="line">  repo: git@gitee.com:yourname/yourname.git   #你的仓库名</span><br><span class="line">  branch: main  #仓库分支 有些是master</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url: https://yourname.gitee.io/   # github/gitee </span><br></pre></td></tr></table></figure>
</li>
<li><p>保存后使用命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d -g  #生成部署</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后开启 Pagess服务  我使用的是Gitee  这个服务需要实名   </p>
</li>
<li><p>gitee 建立仓库时最好 仓库名和路径名都设置 为用户名 git pages 部署的时候就是是 用户名.gitee.io</p>
</li>
</ul>
<h3 id="Hexo-加载图片"><a href="#Hexo-加载图片" class="headerlink" title="Hexo 加载图片"></a>Hexo 加载图片</h3><ul>
<li>如果导入图片路径中有空格 使用<code>%20</code>代替 是空格的ASCII<code>0x20</code></li>
</ul>
<h3 id="Hexo-常用指令"><a href="#Hexo-常用指令" class="headerlink" title="Hexo 常用指令"></a>Hexo 常用指令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 新建博客</span></span><br><span class="line">hexo new &quot;newBlog&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="meta">#</span><span class="bash"> 本地服务器</span></span><br><span class="line">hexo s</span><br><span class="line"><span class="meta">#</span><span class="bash"> 部署</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>



<h3 id="Hexo-基本操作"><a href="#Hexo-基本操作" class="headerlink" title="Hexo 基本操作"></a>Hexo 基本操作</h3><ul>
<li><p>在文章中引用自己的文章</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% post_link 文章文件名（不要后缀） 文章标题（可选） %&#125;</span><br><span class="line">&#123;% post_link HexoTest HexoTest %&#125;</span><br></pre></td></tr></table></figure>

<a href="/2019/04/10/HexoTest/" title="HexoTest">HexoTest</a>
</li>
<li><p>文章显示摘要并隐藏主体</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 我是摘要</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"># 我是主体</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加标签、多标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo + git 安装使用</span><br><span class="line">date: 2021-10-31 10:52:12</span><br><span class="line">tags: [Hexo,Git]</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
</li>
<li><p>给文章加密</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo + git 安装使用</span><br><span class="line">date: 2021-10-31 10:52:12</span><br><span class="line">tags: [Hexo,Git]</span><br><span class="line">password: 123456</span><br><span class="line">abstract: 有东西被加密了想看吗</span><br><span class="line">message: 就不给你看，除非你有密码</span><br><span class="line">wrong_pass_message: 随便输入个密码就想骗我？</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="git-生成公钥"><a href="#git-生成公钥" class="headerlink" title="git 生成公钥"></a>git 生成公钥</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 生成公钥</span><br><span class="line">ssh-keygen -t rsa -C &quot;he.email@qq.com&quot;</span><br><span class="line">// 复制公钥到剪切板</span><br><span class="line">clip &lt; ~/.ssh/id_rsa.pub</span><br><span class="line">// 远程仓库中添加SSH公钥</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>Hexok迁移</p>
<ul>
<li>安装 node.js</li>
<li>2、安装Hexo</li>
<li>3、安装git<ul>
<li>生成SSH密钥</li>
</ul>
</li>
<li>4、复制以前的博客到指定文件夹</li>
<li>5、hexo g</li>
<li>6、hexo d</li>
</ul>
<p>playwright 自动化脚本配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx playwright install</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx playwright codegen --save-storage=auth.json https://gitee.com/lemon_fungus/lemon_fungus/pages</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>HexoTest</title>
    <url>/2019/04/10/HexoTest/</url>
    <content><![CDATA[<h1 id="Hello-Hexo"><a href="#Hello-Hexo" class="headerlink" title="Hello Hexo"></a>Hello Hexo</h1><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<h3 id="Hexo-加载图片"><a href="#Hexo-加载图片" class="headerlink" title="Hexo 加载图片"></a>Hexo 加载图片</h3><ul>
<li>如果导入图片路径中有空格 使用<code>%20</code>代替 是空格的ASCII<code>0x20</code></li>
</ul>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Matlab 用法</title>
    <url>/2022/11/12/Matlab%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h2 id="Matlab-用法"><a href="#Matlab-用法" class="headerlink" title="Matlab 用法"></a>Matlab 用法</h2><p>[TOC]</p>
<ul>
<li>未整理</li>
</ul>
<h4 id="MatLab-函数查看源码的方式"><a href="#MatLab-函数查看源码的方式" class="headerlink" title="MatLab 函数查看源码的方式"></a>MatLab 函数查看源码的方式</h4><ul>
<li>type findpeaks.m </li>
<li>open findpeaks.m</li>
<li>edit findpeaks.m</li>
<li>故意填错参数在 错误信息中打开.m 文件</li>
</ul>
<span id="more"></span>

<h4 id="MatLab-将-m程序生成为-C-x2F-C"><a href="#MatLab-将-m程序生成为-C-x2F-C" class="headerlink" title="MatLab 将.m程序生成为 C&#x2F;C++"></a>MatLab 将.m程序生成为 C&#x2F;C++</h4><h3 id="MatLab-Mex-编译环境配置"><a href="#MatLab-Mex-编译环境配置" class="headerlink" title="MatLab  Mex 编译环境配置"></a>MatLab  Mex 编译环境配置</h3><p>参考：<a href="https://blog.csdn.net/sinat_29575501/article/details/8108238">https://blog.csdn.net/sinat_29575501/article/details/8108238</a></p>
<p>​    :star:  <a href="https://blog.csdn.net/qq_39715000/article/details/110454224">https://blog.csdn.net/qq_39715000/article/details/110454224</a></p>
<p>​    TDM64-gcc4.9.2下载 ：<a href="https://sourceforge.net/projects/tdm-gcc/files/TDM-GCC%20Installer/Previous/1.1309.0/">https://sourceforge.net/projects/tdm-gcc/files/TDM-GCC%20Installer/Previous/1.1309.0/</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt; mex -setup</span><br><span class="line">MEX configured to use &#x27;MinGW64 Compiler (C)&#x27; for C language compilation.</span><br><span class="line">Warning: The MATLAB C and Fortran API has changed to support MATLAB</span><br><span class="line">	 variables with more than 2^32-1 elements. In the near future</span><br><span class="line">	 you will be required to update your code to utilize the</span><br><span class="line">	 new API. You can find more information about this at:</span><br><span class="line">	 http://www.mathworks.com/help/matlab/matlab_external/upgrading-mex-files-to-use-64-bit-api.html.</span><br><span class="line"></span><br><span class="line">To choose a different language, select one from the following:</span><br><span class="line"> mex -setup C++ </span><br><span class="line"> mex -setup FORTRAN</span><br></pre></td></tr></table></figure>



<h3 id="Matlab-Coder-转换C语言出现错误"><a href="#Matlab-Coder-转换C语言出现错误" class="headerlink" title="Matlab Coder  转换C语言出现错误"></a>Matlab Coder  转换C语言出现错误</h3><p><img src="/2022/11/12/Matlab%E7%94%A8%E6%B3%95/1624003881249.png" alt="1624003881249"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Index variable k is used outside its corresponding FOR loop. The run-time behavior will differ from MATLAB if the loop is not executed.</span><br><span class="line">Index variable k is used outside its corresponding FOR loop. The run-time behavior will differ from MATLAB if the loop is not executed.</span><br></pre></td></tr></table></figure>

<h5 id="输出到Excel-xlswrite"><a href="#输出到Excel-xlswrite" class="headerlink" title="输出到Excel  xlswrite"></a>输出到Excel  xlswrite</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">M=[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>;<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>;<span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">xlswrite(<span class="string">&#x27;M.xls&#x27;</span>,M)</span><br></pre></td></tr></table></figure>

<h5 id="输出到TXT-fopen-load"><a href="#输出到TXT-fopen-load" class="headerlink" title="输出到TXT   fopen  load"></a>输出到TXT   fopen  load</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear;clc;</span><br><span class="line">V=<span class="number">120</span>;</span><br><span class="line">I=<span class="number">2.2</span>;</span><br><span class="line">fo=fopen(<span class="string">&#x27;output.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>); <span class="comment">%w 可写</span></span><br><span class="line">fprintf(fo,<span class="string">&#x27;V=%4i volt,I=%5.2f amp \n&#x27;</span>,V,I);</span><br><span class="line">fclose(fo);</span><br><span class="line"></span><br><span class="line">A=<span class="built_in">zeros</span>(<span class="number">4</span>,<span class="number">3</span>);</span><br><span class="line">fi=fopen(<span class="string">&#x27;input.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">[A] =fscanf(fi,<span class="string">&#x27;%f&#x27;</span>,[<span class="number">4</span>,<span class="number">3</span>])  <span class="comment">%得到的数据是个转置</span></span><br><span class="line">A&#x27;</span><br><span class="line">load input.txt   <span class="comment">%直接加载文本</span></span><br><span class="line">x = input(:,<span class="number">1</span>)</span><br><span class="line">y = input(:,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h5 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%单位矩阵I</span></span><br><span class="line">I=<span class="built_in">eye</span>(n)</span><br><span class="line"><span class="comment">%A的转置</span></span><br><span class="line">A&#x27;   </span><br><span class="line"><span class="comment">%A的逆矩阵</span></span><br><span class="line">inv(A)</span><br><span class="line"><span class="comment">%求矩阵逆矩阵</span></span><br><span class="line">det(A)</span><br><span class="line"><span class="comment">%获取矩阵维数</span></span><br><span class="line"><span class="built_in">size</span>(A)</span><br><span class="line"><span class="comment">%点积可以表示为对应元素乘积之和</span></span><br><span class="line">A=[a1 a2 a3] B=[b1 b2 b3]</span><br><span class="line">A·B =sum(A.*B)=sum([a1b1 a2b2 a3b3])=a1b1+a2b2+a3b3</span><br></pre></td></tr></table></figure>

<h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">未定义与 &#x27;matlab.graphics.primitive.Line&#x27; 类型的输入参数相对应的函数&#x27;plotpkmarkers&#x27;。</span><br><span class="line">which -all plotpamarkers</span><br><span class="line">复制  plotpamarkers.m 到当前目录</span><br></pre></td></tr></table></figure>

<h5 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">+	加；正号</span><br><span class="line">-	减；负号</span><br><span class="line">*	矩阵乘</span><br><span class="line">.*	数组乘</span><br><span class="line">\	矩阵左除</span><br><span class="line">/	矩阵右除</span><br><span class="line">.\	数组除</span><br><span class="line">./	数组除</span><br><span class="line">^	矩阵乘方</span><br><span class="line">.^	数组乘方</span><br><span class="line">’	共轭转置</span><br><span class="line">.’非共轭转置</span><br></pre></td></tr></table></figure>

<h3 id="matlab常用函数说明"><a href="#matlab常用函数说明" class="headerlink" title="matlab常用函数说明"></a>matlab常用函数说明</h3><ul>
<li>varargin</li>
</ul>
<blockquote>
<p><code>varargin</code> 是函数定义语句中的一个输入变量，允许函数接受任意数量的输入参数。使用小写字符指定 <code>varargin</code>，将其作为最后一个输入参数附加在任何显式声明的输入项后。</p>
<p>在执行函数时，<code>varargin</code> 是一个 1×N 元胞数组，其中 N 是函数在显式声明的输入后收到的输入项数。但是，如果该函数在显式声明的输入后未收到任何输入，则 <code>varargin</code> 是空元胞数组。</p>
</blockquote>
<ul>
<li>find</li>
</ul>
<blockquote>
<p><code>k = find(X,n)</code> 返回与 <code>X</code> 中的非零元素对应的前 <code>n</code> 个索引。</p>
</blockquote>
<ul>
<li>isnan</li>
</ul>
<blockquote>
<p><code>TF = isnan(A)</code> 返回一个逻辑数组，其中的 <code>1</code> (<code>true</code>) 对应 <code>A</code> 中的 <code>NaN</code> 元素，<code>0</code> (<code>false</code>) 对应其他元素。如果 <code>A</code> 包含复数，则 <code>isnan(A)</code> 中的 <code>1</code> 对应实部或虚部为 <code>NaN</code> 值的元素，<code>0</code> 对应实部和虚部均非 <code>NaN</code> 值的元素。</p>
</blockquote>
<blockquote>
<p><code>TF = isinf(A)</code> 返回一个逻辑数组，其中的 <code>1</code> (<code>true</code>) 对应数组 <code>A</code> 中的 <code>Inf</code> 或 <code>-Inf</code> 元素，<code>0</code> (<code>false</code>) 对应其他元素。如果 <code>A</code> 包含复数，则 <code>isinf(A)</code> 中的 <code>1</code> 对应实部或虚部为无限值的元素，<code>0</code> 对应实部和虚部均为有限值或 <code>NaN</code> 值的元素。</p>
</blockquote>
<blockquote>
<p><code>n = numel(A)</code> 返回数组 <code>A</code> 中的元素数目 <code>n</code> 等同于 <code>prod(size(A))</code>。</p>
</blockquote>
<blockquote>
<p><code>Y = diff(X)</code> 计算沿大小不等于 1 的第一个数组维度的 <code>X</code> 相邻元素之间的差分：</p>
<ul>
<li><p>如果 <code>X</code> 是长度为 <code>m</code> 的向量，则 <code>Y = diff(X)</code> 返回长度为 <code>m-1</code> 的向量。<code>Y</code> 的元素是 <code>X</code> 相邻元素之间的差分。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">Y = [X(<span class="number">2</span>)-X(<span class="number">1</span>) X(<span class="number">3</span>)-X(<span class="number">2</span>) ... X(m)-X(m<span class="number">-1</span>)]</span><br></pre></td></tr></table></figure></li>
</ul>
</blockquote>
<blockquote>
<p>Y &#x3D; <code>sign(x)</code> 返回与 <code>x</code> 大小相同的数组 <code>Y</code>，其中 <code>Y</code> 的每个元素是：</p>
<ul>
<li><code>1</code>，前提是 <code>x</code> 的对应元素大于 <code>0</code>。</li>
<li><code>0</code>，前提是 <code>x</code> 的对应元素等于 <code>0</code>。</li>
<li><code>-1</code>，前提是 <code>x</code> 的对应元素小于 <code>0</code>。</li>
<li><code>x./abs(x)</code>，前提是 <code>x</code> 为复数。</li>
</ul>
</blockquote>
<blockquote>
<p><code>validateattributes(A,classes,attributes)</code> 验证数组 <code>A</code> 是否属于至少一个指定的类（或其子类）并具有所有指定的属性。如果 <code>A</code> 不符合条件，MATLAB® 将引发错误，并显示一条格式化的错误消息。否则，<code>validateattributes</code> 将完成并且不显示任何输出。</p>
</blockquote>
<blockquote>
<p>如果 <code>size</code>(<code>V</code>) 返回具有非负整数值 <code>n</code> 的 <code>[1 n]</code>，则 <code>isrow(V)</code> 返回逻辑值 1 (<code>true</code>)，否则返回逻辑值 0 (<code>false</code>)。</p>
</blockquote>
<blockquote>
<p>如果 <code>A</code> 为空，<code>TF = isempty(A)</code> 返回逻辑值 <code>1</code> (<code>true</code>)，否则返回逻辑值 <code>0</code> (<code>false</code>)。空数组、表或时间表有至少一个长度为 0 的维度，如 0×0 或 0×5。</p>
</blockquote>
<blockquote>
<p>如果 <code>A</code> 是数值数据类型的数组，则 <code>TF = isnumeric(A)</code> 返回逻辑值 <code>1</code> (<code>true</code>)。否则，将返回逻辑值 <code>0</code> (<code>false</code>)。</p>
<p>MATLAB® 中的数值类型包括：<code>int8</code>、<code>int16</code>、<code>int32</code>、<code>int64</code>、<code>uint8</code>、<code>uint16</code>、<code>uint32</code>、<code>uint64</code>、<code>single</code> 和 <code>double</code>。有关详细信息，请参阅<a href="https://ww2.mathworks.cn/help/matlab/matlab_prog/integers.html#btbt9yx">整数类</a>和<a href="https://ww2.mathworks.cn/help/matlab/matlab_prog/floating-point-numbers.html">浮点数</a>。</p>
</blockquote>
<blockquote>
<p>如果 <code>t</code> 是日期时间数组，<code>tf = isdatetime(t)</code> 将返回逻辑值 <code>1</code> (<code>true</code>)。否则，将返回逻辑值 <code>0</code> (<code>false</code>)。</p>
</blockquote>
<blockquote>
<p>如果 <code>A</code> 是标量，<code>TF = isscalar(A)</code> 将返回逻辑值 <code>1</code> (<code>true</code>)。否则，将返回逻辑值 <code>0</code> (<code>false</code>)。标量是大小为 1×1 的二维数组。</p>
</blockquote>
<blockquote>
<p>如果代码生成目标是 <code>target</code>，则 <code>tf = coder.target(target)</code> 返回 true (1)。否则，它返回 false (0)。</p>
<p>如果为 MATLAB® 类生成代码，则 MATLAB 会在代码生成之前加载类时计算类的初始值。如果您在 MATLAB 类属性初始化中使用 <code>coder.target</code>，<code>coder.target(&#39;MATLAB&#39;)</code> 将返回 true。</p>
</blockquote>
<blockquote>
<p><code>ME = MException(errID,msgtext)</code> 捕获有关特定错误的信息，并将信息存储在 <code>MException</code> 对象 <code>ME</code> 中。<code>MException</code> 对象是使用错误标识符 <code>errID</code> 和错误消息 <code>msgtext</code> 构造的。</p>
</blockquote>
<blockquote>
<p><code>throwAsCaller(exception)</code> 引发异常，如同发生在调用函数内。异常会终止当前正在运行的函数并将控制权交回给键盘或所在的 <code>catch</code> 块。从 <code>try/catch</code> 语句外部引发异常时，MATLAB® 将错误消息显示在命令行窗口中。</p>
<p>可以通过 <code>try/catch</code> 语句或 <code>MException.last</code> 函数访问 <code>MException</code> 对象。</p>
<p>有时，较之指向实际引发异常的函数，指向导致异常的调用函数中的位置可提供更多有关错误的信息。可以使用 <code>throwAsCaller</code> 简化错误显示。</p>
</blockquote>
<blockquote>
<p>使用 <code>inputParser</code> 对象，用户可以通过创建输入解析器模式来管理函数的输入。要检查输入项，您可以为所需参数、可选参数和名称-值对组参数定义验证函数。还可以通过设置属性来调整解析行为，例如如何处理大小写、结构体数组输入以及不在输入解析器模式中的输入。</p>
<p>定义输入解析器模式后，调用 <code>parse</code> 函数。有关输入的信息存储在 <code>inputParser</code> 中。</p>
</blockquote>
<blockquote>
<p><code>addParameter(p,paramName,defaultVal)</code> 将一个可选的名称-值对组参数的参数名称添加到输入解析器模式中。如果函数的输入参数不包含这个可选的名称-值对组，输入解析器会为 <code>paramName</code> 赋予值 <code>defaultVal</code>。</p>
<p>与使用 <code>addRequired</code> 和 <code>addOptional</code> 函数添加的位置输入参数不同，使用 <code>addParameter</code> 添加的每个参数都对应两个输入参数：一个对应名称，一个对应值。</p>
</blockquote>
<blockquote>
<p><code>varargin</code> 是函数定义语句中的一个输入变量，允许函数接受任意数量的输入参数。使用小写字符指定 <code>varargin</code>，将其作为最后一个输入参数附加在任何显式声明的输入项后。</p>
<p>在执行函数时，<code>varargin</code> 是一个 1×N 元胞数组，其中 N 是函数在显式声明的输入后收到的输入项数。但是，如果该函数在显式声明的输入后未收到任何输入，则 <code>varargin</code> 是空元胞数组。</p>
</blockquote>
<blockquote>
<p><code>parse(p,argList)</code> 解析并验证 <code>arglist</code> 中的输入。</p>
</blockquote>
<blockquote>
<p><code>tf = strcmp(s1,s2)</code> 比较 <code>s1</code> 和 <code>s2</code>，如果二者相同，则返回 <code>1</code> (<code>true</code>)，否则返回 <code>0</code> (<code>false</code>)。如果文本的大小和内容相同，则它们将视为相等。返回结果 <code>tf</code> 的数据类型为 <code>logical</code>。</p>
<p>输入参数可以是字符串数组、字符向量和字符向量元胞数组的任何组合。</p>
</blockquote>
<blockquote>
<p>如果 <code>t</code> 是 <code>duration</code> 数组，<code>tf = isduration(t)</code> 将返回逻辑值 <code>1</code> (<code>true</code>)。否则，将返回逻辑值 <code>0</code> (<code>false</code>)。</p>
</blockquote>
<blockquote>
<p><code>S = seconds(X)</code> 返回等同于 <code>X</code> 中的值的秒数组。</p>
<ul>
<li>如果 <code>X</code> 是数值数组，则 <code>S</code> 是以秒为单位的 <code>duration</code> 数组。</li>
<li>如果 <code>X</code> 为 <code>duration</code> 数组，则 <code>S</code> 为 <code>double</code> 数组，其中每个元素与 <code>X</code> 的对应元素中的秒数相等。</li>
</ul>
<p><code>seconds</code> 函数在 <code>duration</code> 和 <code>double</code> 值之间转换。要显示以秒为单位的持续时间，请将其 <code>Format</code> 属性设置为 <code>&#39;s&#39;</code>。</p>
</blockquote>
<blockquote>
<p>.’  非共轭转置  ‘ 共轭转置</p>
</blockquote>
<blockquote>
<p><code>s = struct(field1,value1,...,fieldN,valueN)</code> 创建一个包含多个字段的结构体数组。</p>
<ul>
<li><p>如果 <code>value</code> 的所有输入都不是元胞数组，或者 <code>value</code> 中作为元胞数组的所有输入都是标量，则 <code>s</code> 是标量结构体。</p>
</li>
<li><p>如果任一 <code>value</code> 输入是非标量元胞数组，则 <code>s</code> 具有与该元胞数组相同的维度。此外，如果两个或多个 <code>value</code> 输入是非标量元胞数组，则它们必须都具有相同的维度。</p>
<p>对于类型为标量元胞数组或任何其他数据类型的数组的任何 <code>value</code>，<code>struct</code> 将 <code>value</code> 的内容插入 <code>s</code> 的所有元素的相关字段中。例如，<code>s = struct(&#39;x&#39;,&#123;&#39;a&#39;,&#39;b&#39;&#125;,&#39;y&#39;,&#39;c&#39;)</code> 返回 <code>s(1).x = &#39;a&#39;</code>、<code>s(2).x = &#39;b&#39;</code>、<code>s(1).y = &#39;c&#39;</code> 和 <code>s(2).y = &#39;c&#39;</code>。</p>
</li>
<li><p>如果任何 <code>value</code> 输入是空元胞数组 <code>&#123;&#125;</code>，则输出 <code>s</code> 是空 (0×0) 结构体。要指定一个空字段并保留其他字段的值，请改用 <code>[]</code> 作为 <code>value</code> 输入。</p>
</li>
</ul>
</blockquote>
<blockquote>
<p><code>nargout</code> 针对当前正在执行的函数，返回该函数调用中指定的函数输出参数的数目。该语法仅可在函数体内使用。</p>
</blockquote>
<blockquote>
<p><code>B = flipud(A)</code> 返回 <code>A</code>，围绕水平轴按上下方向翻转其各行。</p>
<p>如果 <code>A</code> 是一个列向量，则 <code>flipud(A)</code> 返回一个相同长度的向量，其元素的顺序颠倒。如果 <code>A</code> 是一个行向量，则 <code>flipud(A)</code> 只返回 <code>A</code>。对于多维数组，<code>flipud</code> 作用于由第一个和第二个维度构成的平面。</p>
</blockquote>
<blockquote>
<p> randi 均匀分布的伪随机整数<br> <code>X = randi(imax)</code> 返回一个介于 <code>1</code> 和 <code>imax</code> 之间的伪随机整数标量。</p>
</blockquote>
<blockquote>
<h1 id="comm-PhaseFrequencyOffset"><a href="#comm-PhaseFrequencyOffset" class="headerlink" title="comm.PhaseFrequencyOffset"></a>comm.PhaseFrequencyOffset</h1><p>Apply phase and frequency offsets to input signal 对输入信号应用相位和频率偏移</p>
</blockquote>
<blockquote>
<h1 id="qammod"><a href="#qammod" class="headerlink" title="qammod"></a>qammod</h1><p>Quadrature amplitude modulation (QAM) 正交幅度调制</p>
<p><code>y = qammod(x,M)</code> modulates input signal <code>x</code> by using QAM with the specified modulation order <code>M</code>. Output <code>y</code> is the modulated signal.</p>
</blockquote>
<blockquote>
<h1 id="comm-RaisedCosineTransmitFilter"><a href="#comm-RaisedCosineTransmitFilter" class="headerlink" title="comm.RaisedCosineTransmitFilter"></a>comm.RaisedCosineTransmitFilter</h1><p>Apply pulse shaping by interpolating signal using raised-cosine FIR filter</p>
</blockquote>
<blockquote>
<h1 id="comm-PhaseNoise"><a href="#comm-PhaseNoise" class="headerlink" title="comm.PhaseNoise"></a>comm.PhaseNoise</h1><p>Apply phase noise to baseband signal</p>
</blockquote>
<blockquote>
<h1 id="comm-RayleighChannel"><a href="#comm-RayleighChannel" class="headerlink" title="comm.RayleighChannel"></a>comm.RayleighChannel</h1><p>Filter input signal through multipath Rayleigh fading channel</p>
</blockquote>
<blockquote>
<h1 id="awgn"><a href="#awgn" class="headerlink" title="awgn"></a>awgn</h1><p>Add white Gaussian noise to signal 在信道中加入高斯白噪声</p>
</blockquote>
<blockquote>
<h1 id="dsp-SpectrumAnalyzer"><a href="#dsp-SpectrumAnalyzer" class="headerlink" title="dsp.SpectrumAnalyzer"></a>dsp.SpectrumAnalyzer</h1><p>Display frequency spectrum of time-domain signals</p>
</blockquote>
<blockquote>
<h1 id="comm-CarrierSynchronizer"><a href="#comm-CarrierSynchronizer" class="headerlink" title="comm.CarrierSynchronizer"></a>comm.CarrierSynchronizer</h1><p>Compensate for carrier frequency offset  补偿载波和频率偏移</p>
</blockquote>
<blockquote>
<h1 id="cast"><a href="#cast" class="headerlink" title="cast"></a>cast</h1><p>将变量转换为不同的数据类型</p>
<p><code>B = cast(A,newclass)</code> 将 <code>A</code> 转换为数据类型（类）<code>newclass</code>，其中 <code>newclass</code> 是与 <code>A</code> 兼容的内置数据类型的名称。<code>cast</code> 函数将 <code>A</code> 中 <code>newclass</code> 范围以外的所有值截断到最近的端点。</p>
<p>将浮点数转换为整数时，<code>cast</code> 函数会将该数舍入为最接近的整数。如果浮点数的小数部分恰好为 0.5，则它朝偏离零的方向舍入到模更大的整数。</p>
</blockquote>
<blockquote>
<h1 id="atan2"><a href="#atan2" class="headerlink" title="atan2"></a>atan2</h1><p>四象限反正切</p>
</blockquote>
<blockquote>
<h1 id="persistent"><a href="#persistent" class="headerlink" title="persistent"></a>persistent</h1><p>定义持久变量</p>
</blockquote>
<blockquote>
<h1 id="coder-extrinsic"><a href="#coder-extrinsic" class="headerlink" title="coder.extrinsic"></a>coder.extrinsic</h1><p>声明外部函数</p>
</blockquote>
<blockquote>
<h1 id="iqimbal"><a href="#iqimbal" class="headerlink" title="iqimbal"></a>iqimbal</h1><p>Apply I&#x2F;Q imbalance to input signal</p>
</blockquote>
<blockquote>
<h1 id="comm-EVM"><a href="#comm-EVM" class="headerlink" title="comm.EVM"></a>comm.EVM</h1><p>Measure error vector magnitude</p>
</blockquote>
<blockquote>
<h1 id="Test-and-Measurement"><a href="#Test-and-Measurement" class="headerlink" title="Test and Measurement"></a>Test and Measurement</h1><p>Waveform generation, visualization, and performance analysis</p>
</blockquote>
<blockquote>
<h1 id="comm-ConstellationDiagram"><a href="#comm-ConstellationDiagram" class="headerlink" title="comm.ConstellationDiagram"></a>comm.ConstellationDiagram</h1><p>Display constellation diagram for input signals</p>
</blockquote>
<blockquote>
<h1 id="comm-SymbolSynchronizer"><a href="#comm-SymbolSynchronizer" class="headerlink" title="comm.SymbolSynchronizer"></a>comm.SymbolSynchronizer</h1><p>Correct symbol timing clock skew  校正符号定时时钟偏移</p>
</blockquote>
]]></content>
      <tags>
        <tag>Note</tag>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Gitee Pages 自动更新部署</title>
    <url>/2021/10/31/Hexo-Gitee-Pages-%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="Hexo-Gitee-Pages-自动更新部署"><a href="#Hexo-Gitee-Pages-自动更新部署" class="headerlink" title="Hexo Gitee Pages 自动更新部署"></a>Hexo Gitee Pages 自动更新部署</h2><ul>
<li>Gitee pages 服务 每次 hexo d 后都需要手动更新Page服务才能在网页上看到效果</li>
<li>网上有一些借助Github 更新的方法操作起来太麻烦了</li>
<li>这里推荐使用 微软自动化测试工具 <a href="https://playwright.dev/">Playwright</a> </li>
<li>主要是看来了<a href="https://xfdj.github.io/2021/07/12/%E4%BC%98%E5%8C%96%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%E5%8D%81%EF%BC%89%EF%BC%9A%E5%AE%9E%E7%8E%B0Gitee-Pages%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/">这篇博客</a>  因本人不是搞前端的 也不会 js 其中的js代码 也是copy的 非常感谢 ”兴趣使然“这位博主</li>
</ul>
<span id="more"></span>

<h3 id="PlayWright"><a href="#PlayWright" class="headerlink" title="PlayWright"></a>PlayWright</h3><ul>
<li><p>项目地址：<a href="https://github.com/microsoft/playwright">https://github.com/microsoft/playwright</a></p>
</li>
<li><p>了解到这个工具之后发现它确实强大</p>
<ul>
<li>使用简单</li>
<li>支持录制功能 录制的时候会自动打开网页 获取登录后的 Cookies 和其它登录信息</li>
</ul>
</li>
</ul>
<h3 id="PlayWright-安装使用"><a href="#PlayWright-安装使用" class="headerlink" title="PlayWright 安装使用"></a>PlayWright 安装使用</h3><ul>
<li><p>在blog目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i playwright</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装完成后 使用命令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npx playwright codegen --save-storage=auth.json https:<span class="comment">//gitee.com/lemon_fungus/lemon_fungus/pages</span></span><br></pre></td></tr></table></figure>

<p><code>https://gitee.com/lemon_fungus/lemon_fungus/pages </code> 换成自己的 网址</p>
<p>使用命令后会单独打开一个网页 登录之后按照更新Pages的步骤操作一遍等待更新完成后关掉网页会在当前目录下生成以 <code>auth.json</code> 文件</p>
</li>
<li><p>在<code>\themes\next\scripts</code>目录下建一个<code>refresh.js</code>文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入Playwright包</span></span><br><span class="line"><span class="keyword">const</span> &#123; chromium &#125; = <span class="built_in">require</span>(<span class="string">&#x27;playwright&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自己实现的等待功能</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wait</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> resolve(), ms));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hexo 3</span></span><br><span class="line">hexo.on(<span class="string">&#x27;deployAfter&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> browser = <span class="keyword">await</span> chromium.launch(&#123;</span><br><span class="line">      <span class="attr">headless</span>: <span class="literal">true</span>  <span class="comment">//true：不弹出浏览器窗口  调试的时候可以用false</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> context = <span class="keyword">await</span> browser.newContext(&#123;</span><br><span class="line">      <span class="attr">storageState</span>: <span class="string">&#x27;auth.json&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Open new page</span></span><br><span class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> context.newPage();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Go to https://gitee.com/xfdj_dragon/xfdj_dragon/pages</span></span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;https://gitee.com/xfdj_dragon/xfdj_dragon/pages&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Click text=更新</span></span><br><span class="line">    <span class="keyword">await</span> page.waitForSelector(<span class="string">&#x27;#pages-branch &gt; div.button.orange.redeploy-button.ui.update_deploy&#x27;</span>);</span><br><span class="line">    page.once(<span class="string">&#x27;dialog&#x27;</span>, <span class="function"><span class="params">dialog</span> =&gt;</span> dialog.accept());  <span class="comment">//模拟点击更新按钮之后弹出的确认窗口,自动点击确定。</span></span><br><span class="line">    <span class="keyword">await</span> page.click(<span class="string">&#x27;text=更新&#x27;</span>);</span><br><span class="line">    <span class="keyword">await</span> page.waitForSelector(<span class="string">&#x27;#pages_deploying&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Gitee Pages服务正在部署...&#x27;</span>);</span><br><span class="line">    <span class="keyword">await</span> wait(<span class="number">2000</span>);</span><br><span class="line">    <span class="keyword">await</span> page.waitForSelector(<span class="string">&#x27;body &gt; div.site-content &gt; div.ui.container &gt; div &gt; div.pages_message.d-flex-center &gt; div.pages-form-body.padding-0 &gt; p &gt; span&#x27;</span>, &#123;<span class="attr">timeout</span>: <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;已开启 Gitee Pages 服务，网站地址： https://xfdj_dragon.gitee.io&#x27;</span>);</span><br><span class="line">    <span class="comment">// ---------------------</span></span><br><span class="line">    <span class="keyword">await</span> context.close();</span><br><span class="line">    <span class="keyword">await</span> browser.close();</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>后面只需要执行 <code>hexo d</code> 就会自动调用脚本 自动更新了</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Matlab调用库</title>
    <url>/2023/01/13/Matlab%E8%B0%83%E7%94%A8%E5%BA%93/</url>
    <content><![CDATA[<h1 id="Matlab调用动态库"><a href="#Matlab调用动态库" class="headerlink" title="Matlab调用动态库"></a>Matlab调用动态库</h1><p>[TOC]</p>
<h2 id="Matlab调用-C-库"><a href="#Matlab调用-C-库" class="headerlink" title="Matlab调用 C 库"></a>Matlab调用 C 库</h2><ul>
<li>C类型的动态库调用</li>
</ul>
<span id="more"></span>

<h3 id="基本函数"><a href="#基本函数" class="headerlink" title="基本函数"></a>基本函数</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 加载动态库 </span></span><br><span class="line">loadlibrary(libname,hfile)</span><br><span class="line"><span class="comment">% 卸载库 加载好的库不能再次加载 可以先卸载后加载(不然会出错)</span></span><br><span class="line">unloadlibrary libname</span><br><span class="line"><span class="comment">% 调用函数</span></span><br><span class="line">[x1,...,xN] = calllib(libname,funcname,arg1,...,argN)</span><br><span class="line"><span class="comment">% 参数指针</span></span><br><span class="line">p = libpointer(DataType,Value)</span><br><span class="line"><span class="comment">% 查询库是否加载</span></span><br><span class="line">tf = libisloaded(libname)</span><br><span class="line"><span class="comment">% 显示所有函数名</span></span><br><span class="line">m = libfunctions(libname)</span><br><span class="line"><span class="comment">% 显示库的函数信息  可以非常方便的看出Matlab与C类型对应关系 尤其是使用参数指针时</span></span><br><span class="line">libfunctionsview libname</span><br></pre></td></tr></table></figure>

<ul>
<li>Matlab指针类型与C指针类型对应关系看<a href="https://ww2.mathworks.cn/help/matlab/matlab_external/passing-arguments-to-shared-library-functions.html">这里</a></li>
<li><a href="https://ww2.mathworks.cn/help/matlab/call-c-library-functions.html?s_tid=CRUX_lftnav">官方例子参考</a></li>
</ul>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc; clear; close all;</span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">% 以下只是C API库的调用方法  下面是官方的说法</span></span><br><span class="line"><span class="comment">% loadlibrary 函数仅支持可从 C 语言环境中调用的调用函数，以及可由 C 编译器解析的头文件。</span></span><br><span class="line"><span class="comment">% 采用 C++ 语言编写的函数必须声明为 extern &quot;C&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 判断库是否已加载</span></span><br><span class="line"><span class="keyword">if</span> libisloaded(<span class="string">&#x27;shrlibsample&#x27;</span>)</span><br><span class="line">    unloadlibrary(<span class="string">&#x27;shrlibsample&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment">% 设置库路径 【如果dll在.m文件路径下可不用设置路径】</span></span><br><span class="line">    addpath(fullfile(matlabroot,<span class="string">&#x27;extern&#x27;</span>,<span class="string">&#x27;examples&#x27;</span>,<span class="string">&#x27;shrlib&#x27;</span>))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 加载库 </span></span><br><span class="line"><span class="comment">% 单个头文件且与库名相同</span></span><br><span class="line">loadlibrary(<span class="string">&#x27;shrlibsample&#x27;</span>);</span><br><span class="line"><span class="comment">% 具有多个头文件 【使用参数 addheader】</span></span><br><span class="line"><span class="comment">%loadlibrary(&#x27;mylib&#x27;,&#x27;mylib.h&#x27;,&#x27;addheader&#x27;,&#x27;header2&#x27;);</span></span><br><span class="line"><span class="comment">% 为库创建个别名 【使用参数 alias 卸载时使用别名 这里是lib】</span></span><br><span class="line"><span class="comment">%loadlibrary(&#x27;shrlibsample&#x27;,&#x27;shrlibsample.h&#x27;,&#x27;alias&#x27;,&#x27;lib&#x27;);</span></span><br><span class="line"><span class="comment">% 加载库时如果头文件中包含了其它头文件且不在库目录下 【可通过 includepath 参数设置】</span></span><br><span class="line"><span class="comment">% loadlibrary(&#x27;shrlibsample&#x27;,&#x27;shrlibsample.h&#x27;,&#x27;includepath&#x27;,&#x27;D:\work&#x27;)</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">% 查看所有函数名</span></span><br><span class="line">libfunctions shrlibsample;</span><br><span class="line"><span class="comment">% 查看函数参数</span></span><br><span class="line"><span class="comment">% libfunctionsview shrlibsample;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 普通函数调用</span></span><br><span class="line">str = <span class="string">&#x27;This was a Mixed Case string&#x27;</span>;</span><br><span class="line">calllib(<span class="string">&#x27;shrlibsample&#x27;</span>,<span class="string">&#x27;stringToUpper&#x27;</span>,str)</span><br><span class="line"></span><br><span class="line"><span class="comment">% 结构体参数调用 【如果是自定义结构体 需要使用matlab的类定义结构体】</span></span><br><span class="line">struct.p1 = <span class="number">4</span>; struct.p2 = <span class="number">7.3</span>; struct.p3 = <span class="number">-290</span>; </span><br><span class="line">[res,st] = calllib(<span class="string">&#x27;shrlibsample&#x27;</span>,<span class="string">&#x27;addStructByRef&#x27;</span>,struct)</span><br><span class="line"></span><br><span class="line"><span class="comment">% 函数别名 需用到原型文件 mfilename 具体操作方法看官方说明 这里不细说</span></span><br><span class="line"><span class="comment">% 在对 loadlibrary 函数解释时有说明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 卸载库</span></span><br><span class="line">unloadlibrary shrlibsample;</span><br></pre></td></tr></table></figure>



<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h3><blockquote>
<p>检查对函数 ‘log10’ 的调用中是否存在不正确的参数数据类型或缺少参数。</p>
</blockquote>
<ul>
<li>log10的参数不能为负数</li>
</ul>
<h3 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h3><blockquote>
<p>错误使用  .* 不支持复整数算术运算。、<br>iqarray &#x3D; complex(iqarray(1,:),iqarray(2,:));</p>
</blockquote>
<ul>
<li><code>int16</code>类型不能与<code>double</code>类型直接做<code>.* </code>需要使用<code>double()</code> &#x2F;<code>int16()</code>函数转换一下</li>
<li>复数构造也可以考虑<code>complex()</code></li>
</ul>
]]></content>
      <tags>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Pakchoi-1&#39;s first blog 一些个人说明</title>
    <url>/2019/04/10/Pakchoi-1&#39;s%20first%20blog/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="随便输入个密码就想骗我？" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="aa437bbf1cc9a03540ea9265d1a137f8e1736acf0e6df58d25059cb20f984c94">b9375481f1d1062e2ade6f541e30aa31b9ca9a090854c10b85952854357d80fb56ffb43b783382a0241879c7c120043248c5c802c7dd55894562b4c35f7e6f63d45faa3fcc01852a4e0275807ada6dcd3944f2128146d748dad13d690e56bb1578470b617e466fe48c37bbb7bce95cfe72abe85bfcf783f9545bb7487956f51aacaac78ad8604bc6ca396158fe1ee8f239da3175574489926be3aead41fa4973df2405c353035486916bcf5c50fbb33c9614cca14fefde4e95a11e2b4c01daab5076f9ff518044767814fed789d4fe6cd7d7138ca102805984299a0329e329944b27c9d8c4592621a6dc2b896d4ed5e65609d7b361b4a928fd1d1e95a4ec0e622c4c6342a3b142914a051cce2d158a4b9dbfe20bc8ca22b6416d37d905871e5be07262e3b6ec7f50fcdd488a016dece95058e218872709a838ecf412cd66663c750e9ae32c52db1f49ffc5afd1051499c78c23059ca784f3efa51b73d100306d1cda11914b1165f98ee8ae2a818e7ab66ed18408c1efa75d6e784cdd73afe608e12138ab0984ff8323db5a2fc61b7104c5e7c94684a96625e8a76465185ada8e87d34b5c060f9a013af7b04f20c913d1154cbedfb2d45fffab1abf9bfb53a74dcfcbfffc64093521a1e3fe9fbfa2481d4ce05551e3d7499c7ee3290d7a18a14ea68024ed326fc5fbd337a276478c8b66276f06a3e9bc59756768827a6607a73fa34e3068c9bffba63b6ca19cdc0ae555648c0ba2a5f07f28561bbfae3000128a7ece66c97e1dbb1ffeaed17e33bcf54ad140b64698252061128feb247000616c6c81821b640ea2d28bf18f68965424e07421c300bad6eef6513fdc2bf3a1e7260e47ecd9232e39974aea9af39836055e605ba6b06d12a4f35d88e15d203491efea7a4d019b5a265c35c8d8d83d17699e20be2c544654160741da262084821edf06a65b1aa0bbb3debc72ef692dcc92ee1be306de171cc550e545fcd34db5a088ab4f12582c288cf529b89e07739544249e0ea8a9e99550fc78f9fd3bed8be63920ff8fbffe8667f78d331d4f10ad212a1ed8b796f95a3ddcceb0db335fe187bca91745c016f178ae4495d0eea6b5ddb8f866f7642289bb5413c52dcf879820d0844d869cc30ccfd495a342cef94d6d3bba84219249729a3f39db3545b3edf3164bb2ea3d25764fabf4a0718c5374547651997ce9b89c7561ae2c29bf917eac4edbdb51a5701aa81a9acefb40d67756fd66231bf2df8782ef8d54be23f94495a78e3ce159cd55970fc1c8d7dc320f2fc1d894f8278bdfd2e450cd91cebd37b39d8ecfbc72a50225d7b01a5dde1c9654a08e23c714ab8b6cc56118c7646ea7116eae7e4b93b0f624cb3cb3a4e28494872ce41dee4e81589dbb9b8375b4e510509de5542061830c59a296f640ee944edadaca429b3e9c659cfe4a49a0912909d7ea573194fa20561c1f95547e59d3925ece752d2090674f671d176046f82f578709e38e95ad348188447e14ba8a69de3a123b21381493065fe7b071693c67d1c6aef257e221d8a25bbace21b9534819acc8729c8e594bc5dad4956187a744e8348d80e9b028136e222aedd0beb650d4ad05c10d03f70b9059b865a3ea8538e7b52c7958cbfac0689b688b3b28d76682e1c22a243263c1ba0da4d6bcc3e38e7c19ae5e64db6435cd7dc27d9247162348bb35371c933db479a2bfebd7f931d6a908233e5c7b4d85a0d71a4272c84aad4d79339e6302af1b698653ca6408ea2cd9a3d6ff0a14df1aa935b114a10e5f9f7f51e6271476d70422f69e1087addc0af3de43680ef26d21a5b3cefdc6ae07abc00fa039f45ebbc77385162c0c0adae6dd473c7ba12b89516d3e48fdf491b4d2450b0b88bf1b8241a2c2c643cdc0180af39b6fc9c0ba9780de005600660a530a4aba8eb39e76e8c82b02d8f1313fa906402646aa97ba59520268bb7afc7661e9e1e2e0c31fa8242745797ec5f72a4bfdb99519ce84ca7ec99c6dd04374d5ab8873fb1626f3cdadfd90f18ea4c0e318e6e52699f8423dea12988698183e585468a45509613a2376a76ade62298d167be487a0f9f248b5dc2a4797560418853340b8e39fb8a10fee9c97219d9d1bbd493bd44adc1df5370f0ff1bd1f99cb8866756c3fe4500c91eb6b0c0575ff1e07344b5de664141167224c3aa8261004c7ef0ea83dbc4d8ba63f5fa4a2a2613388d997ee6bf15b9253728c9bc5c95e8ee2ccc1c7c55d4ed7d1706afddd1ea591a293d0316b4ac5482231631eb35699104eca3269ce0949c3d739ab0a3a39847296da7cc653f75ff7c9eeb57c3b5deefb014a45fcf4a34c304fe2a89a466bbf00cc484595107c9798e998191fd8237b0bcc719a6dcc6c3dee5246e91095c3e71ed3134887fe1f525777e360680b455ed876937098553fc27b2f39543cb613d52e388431eec262558d5f2c2ea90c405077ba8df3fe09565fa2549b11a8334b0e01ac2fe6627a003f7d5c2fb181ee757e1c6772f7486af8a9d1b78ef7c448121909e33e0b862b835d794101d0c2abd35cfe7b41a05012063a06da0555d381b8d11bb188c6d1899245757561d399a62c89c3dcbc82348099858eb9565452a673ff52f0443d3753ef</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">就不给你看，除非你有密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>Next 主题美化</title>
    <url>/2021/10/31/Next-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<h2 id="Next-主题美化"><a href="#Next-主题美化" class="headerlink" title="Next 主题美化"></a>Next 主题美化</h2><ul>
<li>Next 官方文档<ul>
<li><a href="http://theme-next.iissnan.com/">http://theme-next.iissnan.com/</a></li>
<li><a href="http://theme-next.iissnan.com/getting-started.html">http://theme-next.iissnan.com/getting-started.html</a></li>
<li>官方文档更具说服力所以放前面 很多功能官方有提供说明不需要到处百度 做法还不一样</li>
</ul>
</li>
<li>自修改之前最好 将<code>_config.yml</code> 文件备份 一下免得被玩</li>
<li>后面主要记录一些网上收到的美化的各个功能</li>
</ul>
<span id="more"></span>

<h3 id="Next其它功能美化"><a href="#Next其它功能美化" class="headerlink" title="Next其它功能美化"></a>Next其它功能美化</h3><ul>
<li><p>因为不是做前端的 很多方法都是看别人的代码  但我个人的想法有没有单独的一个文件夹或者文件来加载这些东西 如果需要跟换主题 能够快速的将这些功能迁移过去</p>
</li>
<li><p>我发现页面背景很多动画都是js文件 同时 又都是在 <code>\themes\next\layout\layout.njk</code> Next的大体路径没错就是文件名后缀可能不一样有的可能是<code>layout.swig</code>  可能是版本的原因</p>
</li>
<li><p>下面是一些动画功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&#123;% <span class="keyword">if</span> theme.constom.click_show_love %&#125;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;/js/custom_js/click_show_love.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!--单击显示文字--&gt;</span><br><span class="line">&#123;% <span class="keyword">if</span> theme.constom.click_show_text %&#125;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;http://libs.baidu.com/jquery/1.8.3/jquery.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://libs.baidu.com/jquery/1.8.3/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/custom_js/click_show_text.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!--点击爆炸效果  --&gt;</span><br><span class="line">&#123;% <span class="keyword">if</span> theme.constom.click_fireworks %&#125;</span><br><span class="line">&lt;canvas <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;click_fireworks&quot;</span> style=<span class="string">&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot;</span> &gt;&lt;/canvas&gt; </span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span> </span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/custom_js/click_fireworks.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!--显示恶搞标题--&gt;</span><br><span class="line">&#123;% <span class="keyword">if</span> theme.constom.funny_title %&#125;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;/js/custom_js/funny_title.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!--显示雪花效果--&gt;</span><br><span class="line">&#123;% <span class="keyword">if</span> theme.constom.show_snow_styleone %&#125;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;http://libs.baidu.com/jquery/1.8.3/jquery.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://libs.baidu.com/jquery/1.8.3/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/custom_js/show_snow1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">if</span> theme.constom.show_snow_styletwo %&#125;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;http://libs.baidu.com/jquery/1.8.3/jquery.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://libs.baidu.com/jquery/1.8.3/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/custom_js/show_snow2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 数字雨 --&gt;</span><br><span class="line">&#123;% <span class="keyword">if</span> theme.constom.show_code_rain %&#125;</span><br><span class="line">&lt;canvas id=<span class="string">&quot;canvas&quot;</span> width=<span class="string">&quot;1440&quot;</span> height=<span class="string">&quot;900&quot;</span> &gt;&lt;/canvas&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/custom_js/show_code_rain.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>使用的话需要在 <code>\themes\next\_config.yml</code> 后面加上这几句话以便于控制功能</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义功能</span></span><br><span class="line"><span class="attr">constom:</span></span><br><span class="line">  <span class="comment">#click_fireworks  # 鼠标点击效果 themes/你选择的主题/layout/_layout.njk</span></span><br><span class="line">  <span class="attr">click_fireworks:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">click_show_love:</span> <span class="literal">true</span>   </span><br><span class="line">  <span class="attr">click_show_text:</span> <span class="literal">true</span>    <span class="comment">#没有实现效果</span></span><br><span class="line">  <span class="comment"># 显示运行时间</span></span><br><span class="line">  <span class="attr">show_run_time:</span> <span class="literal">true</span>   <span class="comment">#单独放置js文件实现不了效果 themes/你选择的主题/layout/_partial/footer.njk</span></span><br><span class="line">  <span class="comment"># 恶搞标题</span></span><br><span class="line">  <span class="attr">funny_title:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 显示雪花效果</span></span><br><span class="line">  <span class="attr">show_snow_styleone:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">show_snow_styletwo:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">show_code_rain:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后在<code>\themes\next\source\js</code> 目录下新了一个 <code>custom_js</code> 文件夹放自己添加的动画功能</p>
<h4 id="下面是各个js文件中的代码"><a href="#下面是各个js文件中的代码" class="headerlink" title="下面是各个js文件中的代码"></a>下面是各个js文件中的代码</h4><h5 id="click-fireworks-js"><a href="#click-fireworks-js" class="headerlink" title="click_fireworks.js"></a><code>click_fireworks.js</code></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  (pointerX =</span><br><span class="line">    (e.clientX || e.touches[<span class="number">0</span>].clientX) -</span><br><span class="line">    canvasEl.getBoundingClientRect().left),</span><br><span class="line">    (pointerY =</span><br><span class="line">      e.clientY || e.touches[<span class="number">0</span>].clientY - canvasEl.getBoundingClientRect().top);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t = (anime.random(<span class="number">0</span>, <span class="number">360</span>) * <span class="built_in">Math</span>.PI) / <span class="number">180</span>,</span><br><span class="line">    a = anime.random(<span class="number">50</span>, <span class="number">180</span>),</span><br><span class="line">    n = [-<span class="number">1</span>, <span class="number">1</span>][anime.random(<span class="number">0</span>, <span class="number">1</span>)] * a;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">x</span>: e.x + n * <span class="built_in">Math</span>.cos(t), <span class="attr">y</span>: e.y + n * <span class="built_in">Math</span>.sin(t) &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e, t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    (a.x = e),</span><br><span class="line">    (a.y = t),</span><br><span class="line">    (a.color = colors[anime.random(<span class="number">0</span>, colors.length - <span class="number">1</span>)]),</span><br><span class="line">    (a.radius = anime.random(<span class="number">16</span>, <span class="number">32</span>)),</span><br><span class="line">    (a.endPos = setParticuleDirection(a)),</span><br><span class="line">    (a.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      ctx.beginPath(),</span><br><span class="line">        ctx.arc(a.x, a.y, a.radius, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI, !<span class="number">0</span>),</span><br><span class="line">        (ctx.fillStyle = a.color),</span><br><span class="line">        ctx.fill();</span><br><span class="line">    &#125;),</span><br><span class="line">    a</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e, t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    (a.x = e),</span><br><span class="line">    (a.y = t),</span><br><span class="line">    (a.color = <span class="string">&quot;#F00&quot;</span>),</span><br><span class="line">    (a.radius = <span class="number">0.1</span>),</span><br><span class="line">    (a.alpha = <span class="number">0.5</span>),</span><br><span class="line">    (a.lineWidth = <span class="number">6</span>),</span><br><span class="line">    (a.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      (ctx.globalAlpha = a.alpha),</span><br><span class="line">        ctx.beginPath(),</span><br><span class="line">        ctx.arc(a.x, a.y, a.radius, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI, !<span class="number">0</span>),</span><br><span class="line">        (ctx.lineWidth = a.lineWidth),</span><br><span class="line">        (ctx.strokeStyle = a.color),</span><br><span class="line">        ctx.stroke(),</span><br><span class="line">        (ctx.globalAlpha = <span class="number">1</span>);</span><br><span class="line">    &#125;),</span><br><span class="line">    a</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="number">0</span>; t &lt; e.animatables.length; t++) &#123;</span><br><span class="line">    e.animatables[t].target.draw();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e, t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> a = createCircle(e, t), n = [], i = <span class="number">0</span>; i &lt; numberOfParticules; i++) &#123;</span><br><span class="line">    n.push(createParticule(e, t));</span><br><span class="line">  &#125;</span><br><span class="line">  anime</span><br><span class="line">    .timeline()</span><br><span class="line">    .add(&#123;</span><br><span class="line">      <span class="attr">targets</span>: n,</span><br><span class="line">      <span class="attr">x</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e.endPos.x;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">y</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e.endPos.y;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">radius</span>: <span class="number">0.1</span>,</span><br><span class="line">      <span class="attr">duration</span>: anime.random(<span class="number">1200</span>, <span class="number">1800</span>),</span><br><span class="line">      <span class="attr">easing</span>: <span class="string">&quot;easeOutExpo&quot;</span>,</span><br><span class="line">      <span class="attr">update</span>: renderParticule,</span><br><span class="line">    &#125;)</span><br><span class="line">    .add(&#123;</span><br><span class="line">      <span class="attr">targets</span>: a,</span><br><span class="line">      <span class="attr">radius</span>: anime.random(<span class="number">80</span>, <span class="number">160</span>),</span><br><span class="line">      <span class="attr">lineWidth</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">alpha</span>: &#123; <span class="attr">value</span>: <span class="number">0</span>, <span class="attr">easing</span>: <span class="string">&quot;linear&quot;</span>, <span class="attr">duration</span>: anime.random(<span class="number">600</span>, <span class="number">800</span>) &#125;,</span><br><span class="line">      <span class="attr">duration</span>: anime.random(<span class="number">1200</span>, <span class="number">1800</span>),</span><br><span class="line">      <span class="attr">easing</span>: <span class="string">&quot;easeOutExpo&quot;</span>,</span><br><span class="line">      <span class="attr">update</span>: renderParticule,</span><br><span class="line">      <span class="attr">offset</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e, t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="built_in">this</span>,</span><br><span class="line">      i = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(a),</span><br><span class="line">      (a = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        e.apply(n, i);</span><br><span class="line">      &#125;, t));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> canvasEl = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.fireworks&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (canvasEl) &#123;</span><br><span class="line">  <span class="keyword">var</span> ctx = canvasEl.getContext(<span class="string">&quot;2d&quot;</span>),</span><br><span class="line">    numberOfParticules = <span class="number">30</span>,</span><br><span class="line">    pointerX = <span class="number">0</span>,</span><br><span class="line">    pointerY = <span class="number">0</span>,</span><br><span class="line">    tap = <span class="string">&quot;mousedown&quot;</span>,</span><br><span class="line">    colors = [<span class="string">&quot;#FF1461&quot;</span>, <span class="string">&quot;#18FF92&quot;</span>, <span class="string">&quot;#5A87FF&quot;</span>, <span class="string">&quot;#FBF38C&quot;</span>],</span><br><span class="line">    setCanvasSize = debounce(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      (canvasEl.width = <span class="number">2</span> * <span class="built_in">window</span>.innerWidth),</span><br><span class="line">        (canvasEl.height = <span class="number">2</span> * <span class="built_in">window</span>.innerHeight),</span><br><span class="line">        (canvasEl.style.width = <span class="built_in">window</span>.innerWidth + <span class="string">&quot;px&quot;</span>),</span><br><span class="line">        (canvasEl.style.height = <span class="built_in">window</span>.innerHeight + <span class="string">&quot;px&quot;</span>),</span><br><span class="line">        canvasEl.getContext(<span class="string">&quot;2d&quot;</span>).scale(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;, <span class="number">500</span>),</span><br><span class="line">    render = anime(&#123;</span><br><span class="line">      <span class="attr">duration</span>: <span class="number">1</span> / <span class="number">0</span>,</span><br><span class="line">      <span class="attr">update</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvasEl.width, canvasEl.height);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(</span><br><span class="line">    tap,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="string">&quot;sidebar&quot;</span> !== e.target.id &amp;&amp;</span><br><span class="line">        <span class="string">&quot;toggle-sidebar&quot;</span> !== e.target.id &amp;&amp;</span><br><span class="line">        <span class="string">&quot;A&quot;</span> !== e.target.nodeName &amp;&amp;</span><br><span class="line">        <span class="string">&quot;IMG&quot;</span> !== e.target.nodeName &amp;&amp;</span><br><span class="line">        (render.play(), updateCoords(e), animateParticules(pointerX, pointerY));</span><br><span class="line">    &#125;,</span><br><span class="line">    !<span class="number">1</span></span><br><span class="line">  ),</span><br><span class="line">    setCanvasSize(),</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>, setCanvasSize, !<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">(<span class="string">&quot;use strict&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  (pointerX =</span><br><span class="line">    (e.clientX || e.touches[<span class="number">0</span>].clientX) -</span><br><span class="line">    canvasEl.getBoundingClientRect().left),</span><br><span class="line">    (pointerY =</span><br><span class="line">      e.clientY || e.touches[<span class="number">0</span>].clientY - canvasEl.getBoundingClientRect().top);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t = (anime.random(<span class="number">0</span>, <span class="number">360</span>) * <span class="built_in">Math</span>.PI) / <span class="number">180</span>,</span><br><span class="line">    a = anime.random(<span class="number">50</span>, <span class="number">180</span>),</span><br><span class="line">    n = [-<span class="number">1</span>, <span class="number">1</span>][anime.random(<span class="number">0</span>, <span class="number">1</span>)] * a;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">x</span>: e.x + n * <span class="built_in">Math</span>.cos(t), <span class="attr">y</span>: e.y + n * <span class="built_in">Math</span>.sin(t) &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e, t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    (a.x = e),</span><br><span class="line">    (a.y = t),</span><br><span class="line">    (a.color = colors[anime.random(<span class="number">0</span>, colors.length - <span class="number">1</span>)]),</span><br><span class="line">    (a.radius = anime.random(<span class="number">16</span>, <span class="number">32</span>)),</span><br><span class="line">    (a.endPos = setParticuleDirection(a)),</span><br><span class="line">    (a.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      ctx.beginPath(),</span><br><span class="line">        ctx.arc(a.x, a.y, a.radius, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI, !<span class="number">0</span>),</span><br><span class="line">        (ctx.fillStyle = a.color),</span><br><span class="line">        ctx.fill();</span><br><span class="line">    &#125;),</span><br><span class="line">    a</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e, t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    (a.x = e),</span><br><span class="line">    (a.y = t),</span><br><span class="line">    (a.color = <span class="string">&quot;#F00&quot;</span>),</span><br><span class="line">    (a.radius = <span class="number">0.1</span>),</span><br><span class="line">    (a.alpha = <span class="number">0.5</span>),</span><br><span class="line">    (a.lineWidth = <span class="number">6</span>),</span><br><span class="line">    (a.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      (ctx.globalAlpha = a.alpha),</span><br><span class="line">        ctx.beginPath(),</span><br><span class="line">        ctx.arc(a.x, a.y, a.radius, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI, !<span class="number">0</span>),</span><br><span class="line">        (ctx.lineWidth = a.lineWidth),</span><br><span class="line">        (ctx.strokeStyle = a.color),</span><br><span class="line">        ctx.stroke(),</span><br><span class="line">        (ctx.globalAlpha = <span class="number">1</span>);</span><br><span class="line">    &#125;),</span><br><span class="line">    a</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="number">0</span>; t &lt; e.animatables.length; t++) &#123;</span><br><span class="line">    e.animatables[t].target.draw();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e, t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> a = createCircle(e, t), n = [], i = <span class="number">0</span>; i &lt; numberOfParticules; i++) &#123;</span><br><span class="line">    n.push(createParticule(e, t));</span><br><span class="line">  &#125;</span><br><span class="line">  anime</span><br><span class="line">    .timeline()</span><br><span class="line">    .add(&#123;</span><br><span class="line">      <span class="attr">targets</span>: n,</span><br><span class="line">      <span class="attr">x</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e.endPos.x;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">y</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e.endPos.y;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">radius</span>: <span class="number">0.1</span>,</span><br><span class="line">      <span class="attr">duration</span>: anime.random(<span class="number">1200</span>, <span class="number">1800</span>),</span><br><span class="line">      <span class="attr">easing</span>: <span class="string">&quot;easeOutExpo&quot;</span>,</span><br><span class="line">      <span class="attr">update</span>: renderParticule,</span><br><span class="line">    &#125;)</span><br><span class="line">    .add(&#123;</span><br><span class="line">      <span class="attr">targets</span>: a,</span><br><span class="line">      <span class="attr">radius</span>: anime.random(<span class="number">80</span>, <span class="number">160</span>),</span><br><span class="line">      <span class="attr">lineWidth</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">alpha</span>: &#123; <span class="attr">value</span>: <span class="number">0</span>, <span class="attr">easing</span>: <span class="string">&quot;linear&quot;</span>, <span class="attr">duration</span>: anime.random(<span class="number">600</span>, <span class="number">800</span>) &#125;,</span><br><span class="line">      <span class="attr">duration</span>: anime.random(<span class="number">1200</span>, <span class="number">1800</span>),</span><br><span class="line">      <span class="attr">easing</span>: <span class="string">&quot;easeOutExpo&quot;</span>,</span><br><span class="line">      <span class="attr">update</span>: renderParticule,</span><br><span class="line">      <span class="attr">offset</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e, t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="built_in">this</span>,</span><br><span class="line">      i = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(a),</span><br><span class="line">      (a = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        e.apply(n, i);</span><br><span class="line">      &#125;, t));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> canvasEl = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.fireworks&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (canvasEl) &#123;</span><br><span class="line">  <span class="keyword">var</span> ctx = canvasEl.getContext(<span class="string">&quot;2d&quot;</span>),</span><br><span class="line">    numberOfParticules = <span class="number">30</span>,</span><br><span class="line">    pointerX = <span class="number">0</span>,</span><br><span class="line">    pointerY = <span class="number">0</span>,</span><br><span class="line">    tap = <span class="string">&quot;mousedown&quot;</span>,</span><br><span class="line">    colors = [<span class="string">&quot;#FF1461&quot;</span>, <span class="string">&quot;#18FF92&quot;</span>, <span class="string">&quot;#5A87FF&quot;</span>, <span class="string">&quot;#FBF38C&quot;</span>],</span><br><span class="line">    setCanvasSize = debounce(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      (canvasEl.width = <span class="number">2</span> * <span class="built_in">window</span>.innerWidth),</span><br><span class="line">        (canvasEl.height = <span class="number">2</span> * <span class="built_in">window</span>.innerHeight),</span><br><span class="line">        (canvasEl.style.width = <span class="built_in">window</span>.innerWidth + <span class="string">&quot;px&quot;</span>),</span><br><span class="line">        (canvasEl.style.height = <span class="built_in">window</span>.innerHeight + <span class="string">&quot;px&quot;</span>),</span><br><span class="line">        canvasEl.getContext(<span class="string">&quot;2d&quot;</span>).scale(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;, <span class="number">500</span>),</span><br><span class="line">    render = anime(&#123;</span><br><span class="line">      <span class="attr">duration</span>: <span class="number">1</span> / <span class="number">0</span>,</span><br><span class="line">      <span class="attr">update</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvasEl.width, canvasEl.height);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(</span><br><span class="line">    tap,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="string">&quot;sidebar&quot;</span> !== e.target.id &amp;&amp;</span><br><span class="line">        <span class="string">&quot;toggle-sidebar&quot;</span> !== e.target.id &amp;&amp;</span><br><span class="line">        <span class="string">&quot;A&quot;</span> !== e.target.nodeName &amp;&amp;</span><br><span class="line">        <span class="string">&quot;IMG&quot;</span> !== e.target.nodeName &amp;&amp;</span><br><span class="line">        (render.play(), updateCoords(e), animateParticules(pointerX, pointerY));</span><br><span class="line">    &#125;,</span><br><span class="line">    !<span class="number">1</span></span><br><span class="line">  ),</span><br><span class="line">    setCanvasSize(),</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>, setCanvasSize, !<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="click-show-love-js"><a href="#click-show-love-js" class="headerlink" title="click_show_love.js"></a><code>click_show_love.js</code></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!(<span class="function"><span class="keyword">function</span> (<span class="params">e, t, a</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    c(</span><br><span class="line">      <span class="string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 500%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span></span><br><span class="line">    ),</span><br><span class="line">      o(),</span><br><span class="line">      r();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; d.length; e++)</span><br><span class="line">      d[e].alpha &lt;= <span class="number">0</span></span><br><span class="line">        ? (t.body.removeChild(d[e].el), d.splice(e, <span class="number">1</span>))</span><br><span class="line">        : (d[e].y--,</span><br><span class="line">          (d[e].scale += <span class="number">0.004</span>),</span><br><span class="line">          (d[e].alpha -= <span class="number">0.013</span>),</span><br><span class="line">          (d[e].el.style.cssText =</span><br><span class="line">            <span class="string">&quot;left:&quot;</span> +</span><br><span class="line">            d[e].x +</span><br><span class="line">            <span class="string">&quot;px;top:&quot;</span> +</span><br><span class="line">            d[e].y +</span><br><span class="line">            <span class="string">&quot;px;opacity:&quot;</span> +</span><br><span class="line">            d[e].alpha +</span><br><span class="line">            <span class="string">&quot;;transform:scale(&quot;</span> +</span><br><span class="line">            d[e].scale +</span><br><span class="line">            <span class="string">&quot;,&quot;</span> +</span><br><span class="line">            d[e].scale +</span><br><span class="line">            <span class="string">&quot;) rotate(45deg);background:&quot;</span> +</span><br><span class="line">            d[e].color +</span><br><span class="line">            <span class="string">&quot;;z-index:99999&quot;</span>));</span><br><span class="line">    requestAnimationFrame(r);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="string">&quot;function&quot;</span> == <span class="keyword">typeof</span> e.onclick &amp;&amp; e.onclick;</span><br><span class="line">    e.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      t &amp;&amp; t(), i(e);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = t.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    (a.className = <span class="string">&quot;heart&quot;</span>),</span><br><span class="line">      d.push(&#123;</span><br><span class="line">        <span class="attr">el</span>: a,</span><br><span class="line">        <span class="attr">x</span>: e.clientX - <span class="number">5</span>,</span><br><span class="line">        <span class="attr">y</span>: e.clientY - <span class="number">5</span>,</span><br><span class="line">        <span class="attr">scale</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">alpha</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">color</span>: s(),</span><br><span class="line">      &#125;),</span><br><span class="line">      t.body.appendChild(a);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = t.createElement(<span class="string">&quot;style&quot;</span>);</span><br><span class="line">    a.type = <span class="string">&quot;text/css&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      a.appendChild(t.createTextNode(e));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (t) &#123;</span><br><span class="line">      a.styleSheet.cssText = e;</span><br><span class="line">    &#125;</span><br><span class="line">    t.getElementsByTagName(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].appendChild(a);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="string">&quot;rgb(&quot;</span> +</span><br><span class="line">      ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) +</span><br><span class="line">      <span class="string">&quot;,&quot;</span> +</span><br><span class="line">      ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) +</span><br><span class="line">      <span class="string">&quot;,&quot;</span> +</span><br><span class="line">      ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) +</span><br><span class="line">      <span class="string">&quot;)&quot;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> d = [];</span><br><span class="line">  (e.requestAnimationFrame = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      e.requestAnimationFrame ||</span><br><span class="line">      e.webkitRequestAnimationFrame ||</span><br><span class="line">      e.mozRequestAnimationFrame ||</span><br><span class="line">      e.oRequestAnimationFrame ||</span><br><span class="line">      e.msRequestAnimationFrame ||</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(e, <span class="number">1e3</span> / <span class="number">60</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;)()),</span><br><span class="line">    n();</span><br><span class="line">&#125;)(<span class="built_in">window</span>, <span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>

<h5 id="click-show-text-js"><a href="#click-show-text-js" class="headerlink" title="click_show_text.js"></a><code>click_show_text.js</code></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a_idx = <span class="number">0</span>;</span><br><span class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;body&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span></span><br><span class="line">        (<span class="string">&quot;富强&quot;</span>, <span class="string">&quot;民主&quot;</span>, <span class="string">&quot;文明&quot;</span>, <span class="string">&quot;和谐&quot;</span>, <span class="string">&quot;自由&quot;</span>, <span class="string">&quot;平等&quot;</span>, <span class="string">&quot;公正&quot;</span>, <span class="string">&quot;法治&quot;</span>, <span class="string">&quot;爱国&quot;</span>, <span class="string">&quot;敬业&quot;</span>, <span class="string">&quot;诚信&quot;</span>, <span class="string">&quot;友善&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> $i = $(<span class="string">&quot;&lt;span/&gt;&quot;</span>).text(a[a_idx]);</span><br><span class="line">        a_idx = (a_idx + <span class="number">1</span>) % a.length;</span><br><span class="line">        <span class="keyword">var</span> x = e.pageX,</span><br><span class="line">        y = e.pageY;</span><br><span class="line">        $i.css(&#123;</span><br><span class="line">            <span class="string">&quot;z-index&quot;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">&quot;top&quot;</span>: y - <span class="number">20</span>,</span><br><span class="line">            <span class="string">&quot;left&quot;</span>: x,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: <span class="string">&quot;absolute&quot;</span>,</span><br><span class="line">            <span class="string">&quot;font-weight&quot;</span>: <span class="string">&quot;bold&quot;</span>,</span><br><span class="line">            <span class="comment">// &quot;color&quot;: &quot;#FF0000&quot;      // 修改颜色处</span></span><br><span class="line">            <span class="string">&quot;color&quot;</span>: <span class="string">&quot;rgb(&quot;</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">&quot;,&quot;</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">&quot;,&quot;</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">&quot;)&quot;</span></span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">      </span><br><span class="line">        $(<span class="string">&quot;body&quot;</span>).append($i);</span><br><span class="line">        $i.animate(&#123;</span><br><span class="line">            <span class="string">&quot;top&quot;</span>: y - <span class="number">180</span>,</span><br><span class="line">            <span class="string">&quot;opacity&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">      <span class="number">3000</span>,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          $i.remove();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="string">&#x27;delay()&#x27;</span>, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;.buryit&quot;</span>).removeAttr(<span class="string">&quot;onclick&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="funny-title-js"><a href="#funny-title-js" class="headerlink" title="funny_title.js"></a><code>funny_title.js</code></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> OriginTitle = <span class="built_in">document</span>.title;</span><br><span class="line"><span class="keyword">var</span> titleTime;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;visibilitychange&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.hidden) &#123;</span><br><span class="line">        <span class="comment">// $(&#x27;[rel=&quot;icon&quot;]&#x27;).attr(&#x27;href&#x27;, &quot;/funny.ico&quot;);</span></span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">&#x27;╭(°A°`)╮ 页面崩溃啦 ~&#x27;</span>;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(titleTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// $(&#x27;[rel=&quot;icon&quot;]&#x27;).attr(&#x27;href&#x27;, &quot;/favicon.ico&quot;);</span></span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">&#x27;(ฅ&gt;ω&lt;*ฅ) 噫又好啦 ~&#x27;</span> + OriginTitle;</span><br><span class="line">        titleTime = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.title = OriginTitle;</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="show-code-rain-js"><a href="#show-code-rain-js" class="headerlink" title="show_code_rain.js"></a><code>show_code_rain.js</code></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//获取画布对象</span></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">    <span class="comment">//获取画布的上下文</span></span><br><span class="line">    <span class="keyword">var</span> context =canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">window</span>.screen;</span><br><span class="line">    <span class="keyword">var</span> W = canvas.width = s.width;</span><br><span class="line">    <span class="keyword">var</span> H = canvas.height;</span><br><span class="line">    <span class="comment">//获取浏览器屏幕的宽度和高度</span></span><br><span class="line">    <span class="comment">//var W = window.innerWidth;</span></span><br><span class="line">    <span class="comment">//var H = window.innerHeight;</span></span><br><span class="line">    <span class="comment">//设置canvas的宽度和高度</span></span><br><span class="line">    canvas.width = W;</span><br><span class="line">    canvas.height = H;</span><br><span class="line">    <span class="comment">//每个文字的字体大小</span></span><br><span class="line">    <span class="keyword">var</span> fontSize = <span class="number">12</span>;</span><br><span class="line">    <span class="comment">//计算列</span></span><br><span class="line">    <span class="keyword">var</span> colunms = <span class="built_in">Math</span>.floor(W /fontSize);	</span><br><span class="line">    <span class="comment">//记录每列文字的y轴坐标</span></span><br><span class="line">    <span class="keyword">var</span> drops = [];</span><br><span class="line">    <span class="comment">//给每一个文字初始化一个起始点的位置</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;colunms;i++)&#123;</span><br><span class="line">        drops.push(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//运动的文字</span></span><br><span class="line">    <span class="keyword">var</span> str =<span class="string">&quot;01 10 lemon_fungus 10 01&quot;</span>;</span><br><span class="line">    <span class="comment">//4:fillText(str,x,y);原理就是去更改y的坐标位置</span></span><br><span class="line">    <span class="comment">//绘画的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        context.fillStyle = <span class="string">&quot;rgba(238,238,238,.08)&quot;</span>;<span class="comment">//遮盖层</span></span><br><span class="line">        context.fillRect(<span class="number">0</span>,<span class="number">0</span>,W,H);</span><br><span class="line">        <span class="comment">//给字体设置样式</span></span><br><span class="line">        context.font = <span class="string">&quot;600 &quot;</span>+fontSize+<span class="string">&quot;px  Georgia&quot;</span>;</span><br><span class="line">        <span class="comment">//给字体添加颜色</span></span><br><span class="line">        context.fillStyle = [<span class="string">&quot;#33B5E5&quot;</span>, <span class="string">&quot;#0099CC&quot;</span>, <span class="string">&quot;#AA66CC&quot;</span>, <span class="string">&quot;#9933CC&quot;</span>, <span class="string">&quot;#99CC00&quot;</span>, <span class="string">&quot;#669900&quot;</span>, <span class="string">&quot;#FFBB33&quot;</span>, <span class="string">&quot;#FF8800&quot;</span>, <span class="string">&quot;#FF4444&quot;</span>, <span class="string">&quot;#CC0000&quot;</span>][<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">10</span>)];<span class="comment">//randColor();可以rgb,hsl, 标准色，十六进制颜色</span></span><br><span class="line">        <span class="comment">//写入画布中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;colunms;i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * str.length);</span><br><span class="line">            <span class="keyword">var</span> x = i*fontSize;</span><br><span class="line">            <span class="keyword">var</span> y = drops[i] *fontSize;</span><br><span class="line">            context.fillText(str[index],x,y);</span><br><span class="line">            <span class="comment">//如果要改变时间，肯定就是改变每次他的起点</span></span><br><span class="line">            <span class="keyword">if</span>(y &gt;= canvas.height &amp;&amp; <span class="built_in">Math</span>.random() &gt; <span class="number">0.99</span>)&#123;</span><br><span class="line">                drops[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            drops[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">randColor</span>(<span class="params"></span>)</span>&#123;<span class="comment">//随机颜色</span></span><br><span class="line">        <span class="keyword">var</span> r = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">        <span class="keyword">var</span> g = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">        <span class="keyword">var</span> b = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;rgb(&quot;</span>+r+<span class="string">&quot;,&quot;</span>+g+<span class="string">&quot;,&quot;</span>+b+<span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    draw();</span><br><span class="line">    <span class="built_in">setInterval</span>(draw,<span class="number">35</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="show-snow1-js"><a href="#show-snow1-js" class="headerlink" title="show_snow1.js"></a><code>show_snow1.js</code></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*样式一*/</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">	$.fn.snow = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> $flake = $(<span class="string">&#x27;&lt;div id=&quot;snowbox&quot; /&gt;&#x27;</span>).css(&#123;<span class="string">&#x27;position&#x27;</span>: <span class="string">&#x27;absolute&#x27;</span>,<span class="string">&#x27;z-index&#x27;</span>:<span class="string">&#x27;9999&#x27;</span>, <span class="string">&#x27;top&#x27;</span>: <span class="string">&#x27;-50px&#x27;</span>&#125;).html(<span class="string">&#x27;&amp;#10052;&#x27;</span>),</span><br><span class="line">	documentHeight 	= $(<span class="built_in">document</span>).height(),</span><br><span class="line">	documentWidth	= $(<span class="built_in">document</span>).width(),</span><br><span class="line">	defaults = &#123;</span><br><span class="line">		<span class="attr">minSize</span>		: <span class="number">10</span>,</span><br><span class="line">		<span class="attr">maxSize</span>		: <span class="number">20</span>,</span><br><span class="line">		<span class="attr">newOn</span>		: <span class="number">1000</span>,</span><br><span class="line">		<span class="attr">flakeColor</span>	: <span class="string">&quot;#AFDAEF&quot;</span> <span class="comment">/* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */</span></span><br><span class="line">	&#125;,</span><br><span class="line">	options	= $.extend(&#123;&#125;, defaults, options);</span><br><span class="line">	<span class="keyword">var</span> interval= <span class="built_in">setInterval</span>( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> startPositionLeft = <span class="built_in">Math</span>.random() * documentWidth - <span class="number">100</span>,</span><br><span class="line">	startOpacity = <span class="number">0.5</span> + <span class="built_in">Math</span>.random(),</span><br><span class="line">	sizeFlake = options.minSize + <span class="built_in">Math</span>.random() * options.maxSize,</span><br><span class="line">	endPositionTop = documentHeight - <span class="number">200</span>,</span><br><span class="line">	endPositionLeft = startPositionLeft - <span class="number">500</span> + <span class="built_in">Math</span>.random() * <span class="number">500</span>,</span><br><span class="line">	durationFall = documentHeight * <span class="number">10</span> + <span class="built_in">Math</span>.random() * <span class="number">5000</span>;</span><br><span class="line">	$flake.clone().appendTo(<span class="string">&#x27;body&#x27;</span>).css(&#123;</span><br><span class="line">		<span class="attr">left</span>: startPositionLeft,</span><br><span class="line">		<span class="attr">opacity</span>: startOpacity,</span><br><span class="line">		<span class="string">&#x27;font-size&#x27;</span>: sizeFlake,</span><br><span class="line">		<span class="attr">color</span>: options.flakeColor</span><br><span class="line">	&#125;).animate(&#123;</span><br><span class="line">		<span class="attr">top</span>: endPositionTop,</span><br><span class="line">		<span class="attr">left</span>: endPositionLeft,</span><br><span class="line">		<span class="attr">opacity</span>: <span class="number">0.2</span></span><br><span class="line">	&#125;,durationFall,<span class="string">&#x27;linear&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		$(<span class="built_in">this</span>).remove()</span><br><span class="line">	&#125;);</span><br><span class="line">	&#125;, options.newOn);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.fn.snow(&#123; </span><br><span class="line">	    <span class="attr">minSize</span>: <span class="number">5</span>, <span class="comment">/* 定义雪花最小尺寸 */</span></span><br><span class="line">	    <span class="attr">maxSize</span>: <span class="number">50</span>,<span class="comment">/* 定义雪花最大尺寸 */</span></span><br><span class="line">	    <span class="attr">newOn</span>: <span class="number">300</span>  <span class="comment">/* 定义密集程度，数字越小越密集 */</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="show-snow2-js"><a href="#show-snow2-js" class="headerlink" title="show_snow2.js"></a><code>show_snow2.js</code></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*样式二*/</span></span><br><span class="line"><span class="comment">/* 控制下雪 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">snowFall</span>(<span class="params">snow</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 可配置属性 */</span></span><br><span class="line">    snow = snow || &#123;&#125;;</span><br><span class="line">    <span class="built_in">this</span>.maxFlake = snow.maxFlake || <span class="number">200</span>;   <span class="comment">/* 最多片数 */</span></span><br><span class="line">    <span class="built_in">this</span>.flakeSize = snow.flakeSize || <span class="number">10</span>;  <span class="comment">/* 雪花形状 */</span></span><br><span class="line">    <span class="built_in">this</span>.fallSpeed = snow.fallSpeed || <span class="number">1</span>;   <span class="comment">/* 坠落速度 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 兼容写法 */</span></span><br><span class="line">requestAnimationFrame = <span class="built_in">window</span>.requestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.mozRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.webkitRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.msRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.oRequestAnimationFrame ||</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123; <span class="built_in">setTimeout</span>(callback, <span class="number">1000</span> / <span class="number">60</span>); &#125;;</span><br><span class="line"></span><br><span class="line">cancelAnimationFrame = <span class="built_in">window</span>.cancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.mozCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.webkitCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.msCancelAnimationFrame ||</span><br><span class="line">	<span class="built_in">window</span>.oCancelAnimationFrame;</span><br><span class="line"><span class="comment">/* 开始下雪 */</span></span><br><span class="line">snowFall.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">/* 创建画布 */</span></span><br><span class="line">    snowCanvas.apply(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">/* 创建雪花形状 */</span></span><br><span class="line">    createFlakes.apply(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">/* 画雪 */</span></span><br><span class="line">    drawSnow.apply(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 创建画布 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">snowCanvas</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 添加Dom结点 */</span></span><br><span class="line">    <span class="keyword">var</span> snowcanvas = <span class="built_in">document</span>.createElement(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">    snowcanvas.id = <span class="string">&quot;snowfall&quot;</span>;</span><br><span class="line">    snowcanvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">    snowcanvas.height = <span class="built_in">document</span>.body.clientHeight;</span><br><span class="line">    snowcanvas.setAttribute(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;position:absolute; top: 0; left: 0; z-index: 1; pointer-events: none;&quot;</span>);</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;body&quot;</span>)[<span class="number">0</span>].appendChild(snowcanvas);</span><br><span class="line">    <span class="built_in">this</span>.canvas = snowcanvas;</span><br><span class="line">    <span class="built_in">this</span>.ctx = snowcanvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">    <span class="comment">/* 窗口大小改变的处理 */</span></span><br><span class="line">    <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        snowcanvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">        <span class="comment">/* snowcanvas.height = window.innerHeight */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 雪运动对象 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flakeMove</span>(<span class="params">canvasWidth, canvasHeight, flakeSize, fallSpeed</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.x = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * canvasWidth);   <span class="comment">/* x坐标 */</span></span><br><span class="line">    <span class="built_in">this</span>.y = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * canvasHeight);  <span class="comment">/* y坐标 */</span></span><br><span class="line">    <span class="built_in">this</span>.size = <span class="built_in">Math</span>.random() * flakeSize + <span class="number">2</span>;          <span class="comment">/* 形状 */</span></span><br><span class="line">    <span class="built_in">this</span>.maxSize = flakeSize;                           <span class="comment">/* 最大形状 */</span></span><br><span class="line">    <span class="built_in">this</span>.speed = <span class="built_in">Math</span>.random() * <span class="number">1</span> + fallSpeed;         <span class="comment">/* 坠落速度 */</span></span><br><span class="line">    <span class="built_in">this</span>.fallSpeed = fallSpeed;                         <span class="comment">/* 坠落速度 */</span></span><br><span class="line">    <span class="built_in">this</span>.velY = <span class="built_in">this</span>.speed;                             <span class="comment">/* Y方向速度 */</span></span><br><span class="line">    <span class="built_in">this</span>.velX = <span class="number">0</span>;                                      <span class="comment">/* X方向速度 */</span></span><br><span class="line">    <span class="built_in">this</span>.stepSize = <span class="built_in">Math</span>.random() / <span class="number">30</span>;                 <span class="comment">/* 步长 */</span></span><br><span class="line">    <span class="built_in">this</span>.step = <span class="number">0</span>                                       <span class="comment">/* 步数 */</span></span><br><span class="line">&#125;</span><br><span class="line">flakeMove.prototype.update = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="built_in">this</span>.x,</span><br><span class="line">        y = <span class="built_in">this</span>.y;</span><br><span class="line">    <span class="comment">/* 左右摆动(余弦) */</span></span><br><span class="line">    <span class="built_in">this</span>.velX *= <span class="number">0.98</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.velY &lt;= <span class="built_in">this</span>.speed) &#123;</span><br><span class="line">        <span class="built_in">this</span>.velY = <span class="built_in">this</span>.speed</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.velX += <span class="built_in">Math</span>.cos(<span class="built_in">this</span>.step += <span class="number">.05</span>) * <span class="built_in">this</span>.stepSize;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.y += <span class="built_in">this</span>.velY;</span><br><span class="line">    <span class="built_in">this</span>.x += <span class="built_in">this</span>.velX;</span><br><span class="line">    <span class="comment">/* 飞出边界的处理 */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.x &gt;= canvas.width || <span class="built_in">this</span>.x &lt;= <span class="number">0</span> || <span class="built_in">this</span>.y &gt;= canvas.height || <span class="built_in">this</span>.y &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.reset(canvas.width, canvas.height)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 飞出边界-放置最顶端继续坠落 */</span></span><br><span class="line">flakeMove.prototype.reset = <span class="function"><span class="keyword">function</span>(<span class="params">width, height</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.x = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * width);</span><br><span class="line">    <span class="built_in">this</span>.y = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.size = <span class="built_in">Math</span>.random() * <span class="built_in">this</span>.maxSize + <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">this</span>.speed = <span class="built_in">Math</span>.random() * <span class="number">1</span> + <span class="built_in">this</span>.fallSpeed;</span><br><span class="line">    <span class="built_in">this</span>.velY = <span class="built_in">this</span>.speed;</span><br><span class="line">    <span class="built_in">this</span>.velX = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 渲染雪花-随机形状（此处可修改雪花颜色！！！）</span></span><br><span class="line">flakeMove.prototype.render = <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> snowFlake = ctx.createRadialGradient(<span class="built_in">this</span>.x, <span class="built_in">this</span>.y, <span class="number">0</span>, <span class="built_in">this</span>.x, <span class="built_in">this</span>.y, <span class="built_in">this</span>.size);</span><br><span class="line">    snowFlake.addColorStop(<span class="number">0</span>, <span class="string">&quot;rgba(255, 255, 255, 0.9)&quot;</span>);  <span class="comment">/* 此处是雪花颜色，默认是白色 */</span></span><br><span class="line">    snowFlake.addColorStop(<span class="number">.5</span>, <span class="string">&quot;rgba(255, 255, 255, 0.5)&quot;</span>); <span class="comment">/* 若要改为其他颜色，请自行查 */</span></span><br><span class="line">    snowFlake.addColorStop(<span class="number">1</span>, <span class="string">&quot;rgba(255, 255, 255, 0)&quot;</span>);    <span class="comment">/* 找16进制的RGB 颜色代码。 */</span></span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.fillStyle = snowFlake;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(<span class="built_in">this</span>.x, <span class="built_in">this</span>.y, <span class="built_in">this</span>.size, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>);</span><br><span class="line">    ctx.fill();</span><br><span class="line">    ctx.restore();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 创建雪花-定义形状 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFlakes</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> maxFlake = <span class="built_in">this</span>.maxFlake,</span><br><span class="line">        flakes = <span class="built_in">this</span>.flakes = [],</span><br><span class="line">        canvas = <span class="built_in">this</span>.canvas;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; maxFlake; i++) &#123;</span><br><span class="line">        flakes.push(<span class="keyword">new</span> flakeMove(canvas.width, canvas.height, <span class="built_in">this</span>.flakeSize, <span class="built_in">this</span>.fallSpeed))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 画雪 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawSnow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> maxFlake = <span class="built_in">this</span>.maxFlake,</span><br><span class="line">        flakes = <span class="built_in">this</span>.flakes;</span><br><span class="line">    ctx = <span class="built_in">this</span>.ctx, canvas = <span class="built_in">this</span>.canvas, that = <span class="built_in">this</span>;</span><br><span class="line">    <span class="comment">/* 清空雪花 */</span></span><br><span class="line">    ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; maxFlake; e++) &#123;</span><br><span class="line">        flakes[e].update();</span><br><span class="line">        flakes[e].render(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*  一帧一帧的画 */</span></span><br><span class="line">    <span class="built_in">this</span>.loop = requestAnimationFrame(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        drawSnow.apply(that);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 调用及控制方法 */</span></span><br><span class="line"><span class="keyword">var</span> snow = <span class="keyword">new</span> snowFall(&#123;<span class="attr">maxFlake</span>:<span class="number">60</span>&#125;);</span><br><span class="line">snow.start();</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul>
<li><p><a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html">hexo的next主题个性化教程:打造炫酷网站</a></p>
</li>
<li><p><a href="https://www.itrhx.com/2018/08/27/A04-Hexo-blog-topic-personalization/">Hexo 博客主题个性化</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Python开发环境搭建</title>
    <url>/2024/03/17/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="Python-开发环境搭建"><a href="#Python-开发环境搭建" class="headerlink" title="Python 开发环境搭建"></a>Python 开发环境搭建</h1><p>[TOC]</p>
<p>说明：</p>
<ul>
<li>Conda + Pycharm 管理Python环境是主流的做法，能够你配置任意的python环境且不冲突</li>
<li>测试环境： Win11 + Anaconda23.7.4 +  PyCharm 2021.3.3 (Community Edition)</li>
</ul>
<span id="more"></span>

<h2 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>1、<a href="https://www.anaconda.com/download">下载</a></p>
<p>2、安装</p>
<ul>
<li>Anaconda 安装比较简单、没有需要特别注意的地方只需要一路next就行</li>
</ul>
<p><img src="/2024/03/17/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20240103093410932.png" alt="image-20240103093410932"></p>
<h3 id="Conda-常用命令"><a href="#Conda-常用命令" class="headerlink" title="Conda 常用命令"></a>Conda 常用命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查询环境列表</span></span><br><span class="line">conda env list</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询当前环境库列表</span></span><br><span class="line">conda list</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询当前环境信息</span></span><br><span class="line">conda info</span><br><span class="line"><span class="meta">#</span><span class="bash"> 激活环境 env_name</span></span><br><span class="line">activate env_name</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除环境 env_name</span></span><br><span class="line">conda remove --name env_name --all</span><br><span class="line">conda remove -n env_name --all</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建环境 env_name</span></span><br><span class="line">conda create --name env_name</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建指定python版本的环境 env_name</span></span><br><span class="line">conda crate --name env_name python=3.6</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建指定python版本下包含特定包的环境 env_name</span></span><br><span class="line">conda crate --name env_name python=3.6 numpy</span><br></pre></td></tr></table></figure>

<h2 id="Pycharm"><a href="#Pycharm" class="headerlink" title="Pycharm"></a>Pycharm</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>1、 <a href="https://www.jetbrains.com/pycharm/download/?section=windows">下载</a> 社区版基本够用</p>
<p>2、安装一路next</p>
<h3 id="Pycharm-使用Conda环境"><a href="#Pycharm-使用Conda环境" class="headerlink" title="Pycharm 使用Conda环境"></a>Pycharm 使用Conda环境</h3><p><img src="/2024/03/17/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20240103100737954.png" alt="image-20240103100737954"></p>
<ul>
<li>选择<code>base</code>环境中的<code>python</code>解释器</li>
</ul>
<p><img src="/2024/03/17/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20240103101150542.png" alt="image-20240103101150542"></p>
<ul>
<li>同样的选择<code>conda</code>的其它环境，只需要指定<code>conda</code>生成的虚拟环境即可</li>
</ul>
<p><img src="/2024/03/17/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20240317134111312.png" alt="image-20240317134111312"></p>
<h2 id="Conda修改虚拟环境安装目录"><a href="#Conda修改虚拟环境安装目录" class="headerlink" title="Conda修改虚拟环境安装目录"></a>Conda修改虚拟环境安装目录</h2><ul>
<li>在命令行中使用 <code>conda info</code>命令可查看<code>conda</code>的配置信息，其中<code>envs directories </code>显示了虚拟环境安装目录</li>
</ul>
<p><img src="/2024/03/17/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20240314142634049.png" alt="image-20240314142634049"></p>
<ul>
<li>打开<code>.condarc</code>  文件默认存储在<code>C:\Users\Acer\.condarc</code>，若是没有使用以下命令创建</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda config --add channels r </span><br></pre></td></tr></table></figure>

<ul>
<li>打开文件并在文件中添加以下信息，其中<code>D:\Programs\anaconda3\envs</code>更换为你需要存放环境的位置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">envs_dirs:</span><br><span class="line">  - D:\Programs\anaconda3\envs</span><br></pre></td></tr></table></figure>

<ul>
<li>作者这里设置的虚拟环境安装目录在<code>Anaconda</code>的安装目录下，但是该目录的控制权限是<code>read only </code>（从上图可知）</li>
<li>指定的文件需要用户完全控制，若是没有，则需要右键文件 -&gt; 属性 -&gt; 安全 -&gt;高级 -&gt; 修改指定用户访问权限为完全控制</li>
</ul>
<p><img src="/2024/03/17/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20240314143708252.png" alt="image-20240314143708252"></p>
<p><a href="https://zhuanlan.zhihu.com/p/686307072">参考</a></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt+CMake应用开发</title>
    <url>/2024/03/17/Qt-CMake%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="Qt-CMake应用开发"><a href="#Qt-CMake应用开发" class="headerlink" title="Qt+CMake应用开发"></a>Qt+CMake应用开发</h1><p>[TOC]</p>
<ul>
<li><p>开发环境：</p>
<ul>
<li>Qt5.15.2 + Qt Creator 12.01  + CMake3.28.0-rc3 + MSVC2015</li>
<li>Qt5.15对CMake的支持非常友好，只需要安装CMake并添加环境就行，基本不需要做过多的配置</li>
</ul>
<span id="more"></span></li>
</ul>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul>
<li>Qt5.15对CMake的支持非常友好，只需要安装CMake并添加环境就行，基本不需要做过多的配置</li>
</ul>
<h2 id="QtCreator新建项目"><a href="#QtCreator新建项目" class="headerlink" title="QtCreator新建项目"></a>QtCreator新建项目</h2><ul>
<li>新建项目和Qt创建项目时一样，只是在”Define Build System“选择CMake作为构建系统，而不是qmake。</li>
<li>构建器笔者使用的是MSVC2015，可自行根据需求选择</li>
<li>创建完成后QtCreator 会自动生成 CMakeLists.txt</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(CmakeTest VERSION <span class="number">0.1</span> LANGUAGES CXX)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_AUTOUIC <span class="keyword">ON</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_AUTOMOC <span class="keyword">ON</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_AUTORCC <span class="keyword">ON</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">17</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="keyword">ON</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets)</span><br><span class="line"><span class="keyword">find_package</span>(Qt<span class="variable">$&#123;QT_VERSION_MAJOR&#125;</span> REQUIRED COMPONENTS Widgets)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(PROJECT_SOURCES</span><br><span class="line">        main.cpp</span><br><span class="line">        mainwindow.cpp</span><br><span class="line">        mainwindow.h</span><br><span class="line">        mainwindow.ui</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$&#123;QT_VERSION_MAJOR&#125;</span> <span class="keyword">GREATER_EQUAL</span> <span class="number">6</span>)</span><br><span class="line">    qt_add_executable(<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">        MANUAL_FINALIZATION</span><br><span class="line">        <span class="variable">$&#123;PROJECT_SOURCES&#125;</span></span><br><span class="line">    )</span><br><span class="line"><span class="comment"># Define target properties for Android with Qt 6 as:</span></span><br><span class="line"><span class="comment">#    set_property(TARGET $&#123;PROJECT_NAME&#125; APPEND PROPERTY QT_ANDROID_PACKAGE_SOURCE_DIR</span></span><br><span class="line"><span class="comment">#                 $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/android)</span></span><br><span class="line"><span class="comment"># For more information, see https://doc.qt.io/qt-6/qt-add-executable.html#target-creation</span></span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">    <span class="keyword">if</span>(ANDROID)</span><br><span class="line">        <span class="keyword">add_library</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> SHARED</span><br><span class="line">            <span class="variable">$&#123;PROJECT_SOURCES&#125;</span></span><br><span class="line">        )</span><br><span class="line"><span class="comment"># Define properties for Android with Qt 5 after find_package() calls as:</span></span><br><span class="line"><span class="comment">#    set(ANDROID_PACKAGE_SOURCE_DIR &quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/android&quot;)</span></span><br><span class="line">    <span class="keyword">else</span>()</span><br><span class="line">        <span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">            <span class="variable">$&#123;PROJECT_SOURCES&#125;</span></span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> PRIVATE Qt<span class="variable">$&#123;QT_VERSION_MAJOR&#125;</span>::Widgets)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Qt for iOS sets MACOSX_BUNDLE_GUI_IDENTIFIER automatically since Qt 6.1.</span></span><br><span class="line"><span class="comment"># If you are developing for iOS or macOS you should consider setting an</span></span><br><span class="line"><span class="comment"># explicit, fixed bundle identifier manually though.</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$&#123;QT_VERSION&#125;</span> <span class="keyword">VERSION_LESS</span> <span class="number">6.1</span>.<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">set</span>(BUNDLE_ID_OPTION MACOSX_BUNDLE_GUI_IDENTIFIER com.example.<span class="variable">$&#123;PROJECT_NAME&#125;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">set_target_properties</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> PROPERTIES</span><br><span class="line">    <span class="variable">$&#123;BUNDLE_ID_OPTION&#125;</span></span><br><span class="line">    MACOSX_BUNDLE_BUNDLE_VERSION <span class="variable">$&#123;PROJECT_VERSION&#125;</span></span><br><span class="line">    MACOSX_BUNDLE_SHORT_VERSION_STRING <span class="variable">$&#123;PROJECT_VERSION_MAJOR&#125;</span>.<span class="variable">$&#123;PROJECT_VERSION_MINOR&#125;</span></span><br><span class="line">    MACOSX_BUNDLE <span class="keyword">TRUE</span></span><br><span class="line">    WIN32_EXECUTABLE <span class="keyword">TRUE</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(GNUInstallDirs)</span><br><span class="line"><span class="keyword">install</span>(TARGETS <span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">    BUNDLE DESTINATION .</span><br><span class="line">    LIBRARY DESTINATION <span class="variable">$&#123;CMAKE_INSTALL_LIBDIR&#125;</span></span><br><span class="line">    RUNTIME DESTINATION <span class="variable">$&#123;CMAKE_INSTALL_BINDIR&#125;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(QT_VERSION_MAJOR <span class="keyword">EQUAL</span> <span class="number">6</span>)</span><br><span class="line">    qt_finalize_executable(<span class="variable">$&#123;PROJECT_NAME&#125;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>可以根据自己的习惯对 CMakeLists.txt 做修改</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(CmakeTest VERSION <span class="number">0.1</span> LANGUAGES CXX)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_AUTOUIC <span class="keyword">ON</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_AUTOMOC <span class="keyword">ON</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_AUTORCC <span class="keyword">ON</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)	    <span class="comment"># 使用C++11</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="keyword">ON</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_EXTENSIONS <span class="keyword">OFF</span>)   <span class="comment"># 禁用扩展</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets)</span><br><span class="line"><span class="keyword">find_package</span>(Qt<span class="variable">$&#123;QT_VERSION_MAJOR&#125;</span> REQUIRED COMPONENTS Widgets)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文件</span></span><br><span class="line"><span class="keyword">file</span>(GLOB UI_FILE <span class="string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/*.ui&quot;</span>)       <span class="comment"># 添加.ui文件</span></span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_FILE <span class="string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/*.cpp&quot;</span>)     <span class="comment"># 添加.cpp文件</span></span><br><span class="line"><span class="keyword">file</span>(GLOB HEADER_FILE <span class="string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/*.h&quot;</span>)    <span class="comment"># 添加.h文件 显式的添加头文件到项目树中</span></span><br><span class="line"><span class="keyword">set</span>(PROJECT_SOURCES <span class="variable">$&#123;HEADER_FILE&#125;</span> <span class="variable">$&#123;SRC_FILE&#125;</span> <span class="variable">$&#123;UI_FILE&#125;</span>) <span class="comment"># 合并变量</span></span><br><span class="line"><span class="comment"># 设置输出路径</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY <span class="string">&quot;$&#123;PROJECT_BINARY_DIR&#125;/bin&quot;</span>) <span class="comment"># 设置可执行文件生成路径</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_LIBRARY_OUTPUT_DIRECTORY <span class="string">&quot;$&#123;PROJECT_BINARY_DIR&#125;/lib&quot;</span>) <span class="comment"># 设置动态库生成路径</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_ARCHIVE_OUTPUT_DIRECTORY <span class="string">&quot;$&#123;PROJECT_BINARY_DIR&#125;/lib&quot;</span>) <span class="comment"># 设置静态库生成路径</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$&#123;QT_VERSION_MAJOR&#125;</span> <span class="keyword">GREATER_EQUAL</span> <span class="number">6</span>)</span><br><span class="line">    qt_add_executable(<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">        MANUAL_FINALIZATION</span><br><span class="line">        <span class="variable">$&#123;PROJECT_SOURCES&#125;</span></span><br><span class="line">    )</span><br><span class="line"><span class="comment"># Define target properties for Android with Qt 6 as:</span></span><br><span class="line"><span class="comment">#    set_property(TARGET $&#123;PROJECT_NAME&#125; APPEND PROPERTY QT_ANDROID_PACKAGE_SOURCE_DIR</span></span><br><span class="line"><span class="comment">#                 $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/android)</span></span><br><span class="line"><span class="comment"># For more information, see https://doc.qt.io/qt-6/qt-add-executable.html#target-creation</span></span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">    <span class="keyword">if</span>(ANDROID)</span><br><span class="line">        <span class="keyword">add_library</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> SHARED</span><br><span class="line">            <span class="variable">$&#123;PROJECT_SOURCES&#125;</span></span><br><span class="line">        )</span><br><span class="line"><span class="comment"># Define properties for Android with Qt 5 after find_package() calls as:</span></span><br><span class="line"><span class="comment">#    set(ANDROID_PACKAGE_SOURCE_DIR &quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/android&quot;)</span></span><br><span class="line">    <span class="keyword">else</span>()</span><br><span class="line">        <span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">            <span class="variable">$&#123;PROJECT_SOURCES&#125;</span></span><br><span class="line">            CenterWindow.h CenterWindow.cpp</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> PRIVATE Qt<span class="variable">$&#123;QT_VERSION_MAJOR&#125;</span>::Widgets)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Qt for iOS sets MACOSX_BUNDLE_GUI_IDENTIFIER automatically since Qt 6.1.</span></span><br><span class="line"><span class="comment"># If you are developing for iOS or macOS you should consider setting an</span></span><br><span class="line"><span class="comment"># explicit, fixed bundle identifier manually though.</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$&#123;QT_VERSION&#125;</span> <span class="keyword">VERSION_LESS</span> <span class="number">6.1</span>.<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">set</span>(BUNDLE_ID_OPTION MACOSX_BUNDLE_GUI_IDENTIFIER com.example.<span class="variable">$&#123;PROJECT_NAME&#125;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">set_target_properties</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> PROPERTIES</span><br><span class="line">    <span class="variable">$&#123;BUNDLE_ID_OPTION&#125;</span></span><br><span class="line">    MACOSX_BUNDLE_BUNDLE_VERSION <span class="variable">$&#123;PROJECT_VERSION&#125;</span></span><br><span class="line">    MACOSX_BUNDLE_SHORT_VERSION_STRING <span class="variable">$&#123;PROJECT_VERSION_MAJOR&#125;</span>.<span class="variable">$&#123;PROJECT_VERSION_MINOR&#125;</span></span><br><span class="line">    MACOSX_BUNDLE <span class="keyword">TRUE</span></span><br><span class="line">    WIN32_EXECUTABLE <span class="keyword">TRUE</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(GNUInstallDirs)</span><br><span class="line"><span class="keyword">install</span>(TARGETS <span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">    BUNDLE DESTINATION .</span><br><span class="line">    LIBRARY DESTINATION <span class="variable">$&#123;CMAKE_INSTALL_LIBDIR&#125;</span></span><br><span class="line">    RUNTIME DESTINATION <span class="variable">$&#123;CMAKE_INSTALL_BINDIR&#125;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(QT_VERSION_MAJOR <span class="keyword">EQUAL</span> <span class="number">6</span>)</span><br><span class="line">    qt_finalize_executable(<span class="variable">$&#123;PROJECT_NAME&#125;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h2><h3 id="添加源文件"><a href="#添加源文件" class="headerlink" title="添加源文件"></a>添加源文件</h3><ul>
<li><p>CMake添加类时与Pro项目不同，不能项目上右键添加。</p>
</li>
<li><p>鼠标点击菜单栏 -&gt; 文件 -&gt; New File -&gt; 选择模板 -&gt; 类名 -&gt; 后面的步骤都是一样的， 新生成出的类会自动添加到CMakeLists.txt 中</p>
</li>
<li><p>不推荐CMakeLists中使用显式的添加文件名的方式去添加每一个文件，文件越多可读性越差，且不方便频繁新增移除文件。</p>
</li>
<li><p>推荐使用 CMake file语法匹配文件</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加文件</span></span><br><span class="line"><span class="keyword">file</span>(GLOB UI_FILE <span class="string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/*.ui&quot;</span>)       <span class="comment"># 添加.ui文件</span></span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_FILE <span class="string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/*.cpp&quot;</span>)     <span class="comment"># 添加.cpp文件</span></span><br><span class="line"><span class="keyword">file</span>(GLOB HEADER_FILE <span class="string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/*.h&quot;</span>)    <span class="comment"># 添加.h文件 显式的添加头文件到项目树中</span></span><br><span class="line"><span class="keyword">set</span>(PROJECT_SOURCES <span class="variable">$&#123;HEADER_FILE&#125;</span> <span class="variable">$&#123;SRC_FILE&#125;</span> <span class="variable">$&#123;UI_FILE&#125;</span>) <span class="comment"># 合并变量</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>手动添加文件</p>
<ul>
<li>在外部编辑器中编辑好文件拷贝到源文件目录下 右键项目 执行CMake，CMake会自动添加文件到项目中（前提是使用file匹配了文件）</li>
</ul>
</li>
</ul>
<h3 id="添加资源文件"><a href="#添加资源文件" class="headerlink" title="添加资源文件"></a>添加资源文件</h3><h4 id="添加Qt资源文件-qrc"><a href="#添加Qt资源文件-qrc" class="headerlink" title="添加Qt资源文件 qrc"></a>添加Qt资源文件 qrc</h4><ul>
<li><p>Qt资源文件依然是右键菜单栏文件 -&gt; New File -&gt; 选择Qt资源文件 -&gt; 后面的步骤与Pro项目添加方式相同</p>
</li>
<li><p>但资源文件不会自动添加到CMakeLists中</p>
</li>
<li><p>在CMakeLists添加以下代码可自动添加文件到项目结构中</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">file</span>(GLOB QRC_FILE <span class="string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/*.qrc&quot;</span>)     <span class="comment"># 添加.qrc文件 显式的添加qt资源文件到项目树中</span></span><br><span class="line"><span class="keyword">set</span>(PROJECT_SOURCES <span class="variable">$&#123;HEADER_FILE&#125;</span> <span class="variable">$&#123;SRC_FILE&#125;</span> <span class="variable">$&#123;UI_FILE&#125;</span> <span class="variable">$&#123;QRC_FILE&#125;</span>) <span class="comment"># 合并变量</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可右键qrc文件 -&gt;用…打开 -&gt; 资源管理器 -&gt; 对qrc文件进行修改</p>
</li>
</ul>
<h4 id="添加Windows-资源文件-rc"><a href="#添加Windows-资源文件-rc" class="headerlink" title="添加Windows 资源文件 rc"></a>添加Windows 资源文件 rc</h4><ul>
<li><p>添加windows资源文件的目的是可以设置应用程序的详细信息、以及图标等</p>
</li>
<li><p>windows资源文件QtCreator不能自动生成，但可使用Vs生成，如果只需要修改应用程序图标 只需要行代码就行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IDI_ICON1	ICON	DISCARDABLE	&quot;logo.ico&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="添加翻译文件"><a href="#添加翻译文件" class="headerlink" title="添加翻译文件"></a>添加翻译文件</h3><ul>
<li><p>添加翻译文件与pro项目相同在创建项目时 <strong>Translator File</strong> 时选择一个翻译文件</p>
</li>
<li><p>QtCreator会自动创建翻译文件并添加到CMakeLists中</p>
</li>
<li><p>如果你的程序中需要翻译的字符串都使用tr()包裹，那么执行CMake时会自动执行 lupdate，更新ts翻译文件</p>
</li>
<li><p>手动添加翻译</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加组件 LinguistTools</span></span><br><span class="line"><span class="keyword">find_package</span>(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets LinguistTools)</span><br><span class="line"><span class="keyword">find_package</span>(Qt<span class="variable">$&#123;QT_VERSION_MAJOR&#125;</span> REQUIRED COMPONENTS Widgets LinguistTools)</span><br><span class="line"><span class="comment"># 添加翻译文件名 这里可以添加多个翻译文件</span></span><br><span class="line"><span class="keyword">set</span>(TS_FILES <span class="variable">$&#123;PROJECT_NAME&#125;</span>_zh_CN.ts)</span><br><span class="line"><span class="comment"># 创建翻译文件</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$&#123;QT_VERSION_MAJOR&#125;</span> <span class="keyword">GREATER_EQUAL</span> <span class="number">6</span>)</span><br><span class="line">	qt_create_translation(QM_FILES <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span> <span class="variable">$&#123;TS_FILES&#125;</span>)	</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">	<span class="comment"># 创建指定的ts文件，并ts文件转换为qm （每次重新构建项目时会重新生成会删除以前的文件）</span></span><br><span class="line">	qt5_create_translation(QM_FILES <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span> <span class="variable">$&#123;TS_FILES&#125;</span>)</span><br><span class="line">	qt5_add_translation(QM_FILES <span class="variable">$&#123;TS_FILES&#125;</span>)   <span class="comment"># 将ts文件转换为qm</span></span><br><span class="line">    <span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;PROJECT_SOURCES&#125;</span> <span class="variable">$&#123;QM_FILES&#125;</span>) <span class="comment"># 必须要在编译时加上 QM_FILES 文件否则不会生成.qm</span></span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>这里有个反人类操作</p>
<ul>
<li>qt5_create_translation 每次都会创建一个新的ts文件并删除以前的，但在实际应用中，可能只想更新ts，保留以前的翻译工作</li>
<li>qt5_add_translation 只会单纯的将ts文件转换为qm</li>
<li>所有我们需要一个正常点的函数<ul>
<li>检查指定翻译文件是否存在，不存在则生成；存在则更新；最后将ts转换为qm</li>
<li>参考<a href="https://blog.csdn.net/Tclser/article/details/125364058">这篇文章</a>可以是实现</li>
</ul>
</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">qt5_create_translation(QM_FILES <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span> <span class="variable">$&#123;TS_FILES&#125;</span>) <span class="comment"># 创建翻译文件</span></span><br><span class="line"><span class="keyword">add_custom_target</span>(lupdate_task DEPENDS <span class="variable">$&#123;TS_FILES&#125;</span>) 			<span class="comment"># 不知道为什么这样做ts存在时是更新，不是删除创建</span></span><br><span class="line"><span class="keyword">add_custom_target</span>(lrelease_task DEPENDS <span class="variable">$&#123;QM_FILES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 经过测试使用以上方法时，有时在没有文件时会报错</span></span><br><span class="line"><span class="keyword">foreach</span>(_file <span class="variable">$&#123;TS_FILES&#125;</span>)</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">EXISTS</span> <span class="variable">$&#123;_file&#125;</span>)</span><br><span class="line">        <span class="keyword">add_custom_target</span>(lupdate_task DEPENDS <span class="variable">$&#123;_file&#125;</span>)</span><br><span class="line">    <span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">endforeach</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>其中添加外部命令的方式也是有用的，但也是能正常工作的，为了方便移植程序这里就不加</li>
<li>RC2135 : file not found: IDI_ICON1  rc编码修改为UTF-8</li>
</ul>
</li>
</ul>
<h2 id="添加子项目"><a href="#添加子项目" class="headerlink" title="添加子项目"></a>添加子项目</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cmake-doc.readthedocs.io/zh-cn/latest/index.html">https://cmake-doc.readthedocs.io/zh-cn/latest/index.html</a></p>
]]></content>
      <tags>
        <tag>CMake</tag>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>QtCreator+CMake环境配置</title>
    <url>/2023/10/12/QtCreator+CMake/</url>
    <content><![CDATA[<h1 id="QtCreator-CMake-环境配置"><a href="#QtCreator-CMake-环境配置" class="headerlink" title="QtCreator+CMake 环境配置"></a>QtCreator+CMake 环境配置</h1><p>[TOC]</p>
<ul>
<li><p>环境1：Qt5.12.10、QtCreator4.13.1 、Vs2015、CMake3.27.4</p>
<ul>
<li>下面主要针对环境1 的情况</li>
</ul>
</li>
<li><p>环境2：Qt5.15.2、QtCreator9.0.1、Vs2019、CMake3.25.1  </p>
<ul>
<li>MinGW、MSVC 都可直接使用都是用的Ninja</li>
</ul>
</li>
<li><p>特别说明：测试编译器设置时，修改了编译器参数再编译已有的项目是不可行的，需要单独建立项目或者删除.user 重新选择修改后的编译器</p>
</li>
</ul>
<span id="more"></span>

<h2 id="安装CMake"><a href="#安装CMake" class="headerlink" title="安装CMake"></a>安装CMake</h2><ul>
<li><p><a href="https://cmake.org/download/">CMake下载</a></p>
</li>
<li><p>不管是添加环境变量<code>QtCreator</code>自动检测还是手动添加只要在构建器中能看到就行</p>
</li>
</ul>
<p><img src="/2023/10/12/QtCreator+CMake/image-20231012135514872.png" alt="image-20231012135514872"></p>
<h2 id="MinGW"><a href="#MinGW" class="headerlink" title="MinGW"></a>MinGW</h2><ul>
<li>如果使用<code>MinGW</code>作为编译器的话只需要添加<code>CMake</code>就行</li>
</ul>
<p><img src="/2023/10/12/QtCreator+CMake/image-20231012135843954.png" alt="image-20231012135843954"></p>
<h2 id="MSVC"><a href="#MSVC" class="headerlink" title="MSVC"></a>MSVC</h2><ul>
<li>这里默认你的MSVC编译器是可用的（就是可以新建Msvc的Qt工程，并且能正常编译）</li>
</ul>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><ul>
<li><p><code>MSVC</code>默认<code>CMake Generator </code>是 <code>NMake Makefiles JOM</code> ，经测试在<code>Qt5.12.10</code>中是不可用的</p>
</li>
<li><p>将<code>NMake Makefiles JOM</code> 修改为 <code>NMake Makefiles</code> 是可行的 且不需要做其它修改</p>
</li>
</ul>
<p><img src="/2023/10/12/QtCreator+CMake/image-20231012140234657.png" alt="image-20231012140234657"></p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><ul>
<li><p><a href="https://github.com/ninja-build/ninja/releases">Ninja下载</a></p>
</li>
<li><p>在<code>CMake COnfiguration</code>中添加<code>Ninja</code>的安装路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CMAKE_MAKE_PROGRAM:FILEPATH=D:/Programs/ninja-win/ninja.exe</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="/2023/10/12/QtCreator+CMake/image-20231012140550202.png" alt="image-20231012140550202"></p>
<p><img src="/2023/10/12/QtCreator+CMake/image-20231012140738095.png" alt="image-20231012140738095"></p>
<p>参考</p>
<p><a href="https://www.cnblogs.com/amwuau/p/16241267.html">QtCreator中使用CMake+Ninja加速编译)</a></p>
<h2 id="CMake生成工程"><a href="#CMake生成工程" class="headerlink" title="CMake生成工程"></a>CMake生成工程</h2><ul>
<li><p>生成Vs工程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake ..</span><br><span class="line"><span class="meta">#</span><span class="bash"> 直接生成 32位</span></span><br><span class="line">&quot;D:\Program Files\CMake\bin\cmake.exe&quot; ../CmakeMsvcNMake</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成 64位 不可用</span></span><br><span class="line">&quot;D:\Program Files\CMake\bin\cmake.exe&quot; -G&quot;Visual Studio 14 2015  Win64&quot; ../CmakeMsvcNMake</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成 64位</span></span><br><span class="line">&quot;D:\Program Files\CMake\bin\cmake.exe&quot; -G &quot;Visual Studio 14 2015&quot; -A x64 ../CmakeMsvcNMake  </span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>CMake</tag>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>QT Windows 小功能实现</title>
    <url>/2022/04/30/QT-Windows-%E5%B0%8F%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="QT-Windows-小功能实现"><a href="#QT-Windows-小功能实现" class="headerlink" title="QT Windows 小功能实现"></a>QT Windows 小功能实现</h1><p>[TOC]</p>
<span id="more"></span>

<h2 id="最小化到系统托盘"><a href="#最小化到系统托盘" class="headerlink" title="最小化到系统托盘"></a>最小化到系统托盘</h2><h3 id="使用到的类"><a href="#使用到的类" class="headerlink" title="使用到的类"></a>使用到的类</h3>  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QSystemTrayIcon&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3>  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setWindowTitle</span>(<span class="string">&quot;最小化到托盘和开机自启功能测试&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sysTrayInit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::sysTrayInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QAction *show_action = <span class="keyword">new</span> <span class="built_in">QAction</span>(<span class="string">&quot;显示主窗口&quot;</span>);</span><br><span class="line">    QAction *min_action = <span class="keyword">new</span> <span class="built_in">QAction</span>(<span class="string">&quot;最小化&quot;</span>);</span><br><span class="line">    QAction *quit_action = <span class="keyword">new</span> <span class="built_in">QAction</span>(<span class="string">&quot;退出&quot;</span>);</span><br><span class="line">    QMenu *tray_menu = <span class="keyword">new</span> QMenu;</span><br><span class="line">    tray_menu-&gt;<span class="built_in">addAction</span>(show_action);</span><br><span class="line">    tray_menu-&gt;<span class="built_in">addAction</span>(min_action);</span><br><span class="line">    tray_menu-&gt;<span class="built_in">addAction</span>(quit_action);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(show_action,&amp;QAction::triggered,<span class="keyword">this</span>,[=]()&#123; <span class="keyword">this</span>-&gt;<span class="built_in">showNormal</span>(); &#125;);</span><br><span class="line">    <span class="built_in">connect</span>(min_action,&amp;QAction::triggered,<span class="keyword">this</span>,[=]()&#123; <span class="keyword">this</span>-&gt;<span class="built_in">showMinimized</span>(); &#125;);</span><br><span class="line">    <span class="built_in">connect</span>(quit_action,&amp;QAction::triggered,<span class="keyword">this</span>,[=]()&#123; <span class="built_in">close</span>();    <span class="comment">/*QApplication::quit();*/</span> &#125;);  <span class="comment">//close() 关闭时会触发关闭事件  可以根据需求修改</span></span><br><span class="line"></span><br><span class="line">    m_systray = <span class="keyword">new</span> <span class="built_in">QSystemTrayIcon</span>(<span class="keyword">this</span>);</span><br><span class="line">    m_systray-&gt;<span class="built_in">setIcon</span>(<span class="built_in">QIcon</span>(<span class="string">&quot;:/resource/svgs/svg4.svg&quot;</span>));   <span class="comment">//必须要给一个Icon</span></span><br><span class="line">    m_systray-&gt;<span class="built_in">setToolTip</span>(<span class="string">&quot;我是最小化托盘按钮&quot;</span>);</span><br><span class="line">    m_systray-&gt;<span class="built_in">setContextMenu</span>(tray_menu);   <span class="comment">//设置右键菜单</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(m_systray,&amp;QSystemTrayIcon::activated,<span class="keyword">this</span>,&amp;MainWindow::SysTrayActivated);</span><br><span class="line">    m_systray-&gt;<span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::SysTrayActivated</span><span class="params">(QSystemTrayIcon::ActivationReason reason)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span>(reason)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> QSystemTrayIcon::Trigger :</span><br><span class="line">        <span class="keyword">case</span> QSystemTrayIcon::DoubleClick :</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;双击&quot;</span>;</span><br><span class="line">        m_systray-&gt;<span class="built_in">showMessage</span>(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;被双击&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">showNormal</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> QSystemTrayIcon::MiddleClick :</span><br><span class="line">        m_systray-&gt;<span class="built_in">showMessage</span>(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;被中击&quot;</span>);</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;中击&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;No work&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>需要注意的是<code>QSystemTrayIcon</code>b必须要<code>setIcon()</code>一个显示在系统托盘的图标 不然会在控制台输出<code>QSystemTrayIcon::setVisible: No Icon set</code> 同时在系统托盘中也了看不见</li>
<li><code>setContextMenu</code> 设置右键菜单</li>
<li><code>showMessage</code> 可以以通知的方式显示消息提示</li>
<li>这里需要说明的一点是 程序里面使用退出 <code>Close()</code> 会触发窗口关闭事件（可以做一些关闭前的设置保存的操作） 如果不想触发关闭事件的可以使用 <code>QApplication::quit()</code> 或者<code>QApplication::exit();</code></li>
</ul>
<p>​    </p>
<h2 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h2><h3 id="操作注册表"><a href="#操作注册表" class="headerlink" title="操作注册表"></a>操作注册表</h3><ul>
<li>这种方式是通过将程序的名字和路径组成的键值对写到注册表 电脑开机后通过注册表的路径去启动程序</li>
<li>一般都写在注册表的 <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</code> 这个目录下</li>
<li>如果需要自己手动查看需要通过 <code>Win+R</code> <code>regedit</code> 然后到上面说的目录下查看</li>
</ul>
<h4 id="需要使用到的类"><a href="#需要使用到的类" class="headerlink" title="需要使用到的类"></a>需要使用到的类</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QSettings&gt;</span>	</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFileInfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDir&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>主要是使用<code>QSettings</code> 类对注册表进行操作 如果不清楚基本用法可以看<a href="https://blog.csdn.net/weixin_49500446/article/details/117789756?spm=1001.2014.3001.5501">这里</a></li>
</ul>
<h4 id="简单使用-1"><a href="#简单使用-1" class="headerlink" title="简单使用"></a>简单使用</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QString m_regedit_path  = <span class="string">&quot;HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run&quot;</span>;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::enableAutoStart</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QSettings <span class="title">setting</span><span class="params">(m_regedit_path,QSettings::Registry64Format)</span></span>; <span class="comment">//32位使用 Registry32Format</span></span><br><span class="line"></span><br><span class="line">    <span class="function">QFileInfo <span class="title">f_info</span><span class="params">(qApp-&gt;applicationFilePath())</span></span>;  <span class="comment">//获取程序所在路径</span></span><br><span class="line">    QString name = f_info.<span class="built_in">baseName</span>();</span><br><span class="line">    QString last_path = setting.<span class="built_in">value</span>(name).<span class="built_in">toString</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;f_info:&quot;</span>&lt;&lt;f_info&lt;&lt;name;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;last_path:&quot;</span>&lt;&lt;last_path;</span><br><span class="line"></span><br><span class="line">    QString new_path = QDir::<span class="built_in">toNativeSeparators</span>(qApp-&gt;<span class="built_in">applicationFilePath</span>()); <span class="comment">//toNativeSeparators()将‘/’替换为 ‘\’</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;new_path:&quot;</span>&lt;&lt;new_path;</span><br><span class="line">    <span class="keyword">if</span>(last_path != new_path)</span><br><span class="line">    &#123;</span><br><span class="line">        setting.<span class="built_in">setValue</span>(name,new_path);</span><br><span class="line">        setting.<span class="built_in">sync</span>();</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;setting.<span class="built_in">status</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::disenableAutoStart</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QFileInfo <span class="title">f_info</span><span class="params">(qApp-&gt;applicationFilePath())</span></span>;</span><br><span class="line">    QString name = f_info.<span class="built_in">baseName</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function">QSettings <span class="title">setting</span><span class="params">(m_regedit_path,QSettings::Registry64Format)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;f_info;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;setting.<span class="built_in">allKeys</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(setting.<span class="built_in">contains</span>(name))</span><br><span class="line">    &#123;</span><br><span class="line">        setting.<span class="built_in">remove</span>(name);</span><br><span class="line">        setting.<span class="built_in">sync</span>();</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;setting.<span class="built_in">status</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::on_cBox_AutoStart_clicked</span><span class="params">(<span class="keyword">bool</span> checked)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(checked)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">enableAutoStart</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">disenableAutoStart</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>为啥使用的时候<code>m_regedit_path</code>用的是<code>\\</code> 因为前一个是转义字符</li>
<li>这里获取了程序当前路径与注册表中是否一致 不一致则写入当前路径</li>
<li>如果程序出现<code>QSettings: failed to set subkey &quot;xxx&quot;: 拒绝访问</code> 请右键管理员运行程序</li>
<li><code>qDebug()</code>打印调试信息实际应用中可以去掉</li>
</ul>
<p><a href="https://blog.csdn.net/zyhse/article/details/110651732">参考</a></p>
]]></content>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt开发奇葩问题总集</title>
    <url>/2022/03/27/Qt%E5%BC%80%E5%8F%91%E5%A5%87%E8%91%A9%E9%97%AE%E9%A2%98%E6%80%BB%E9%9B%86/</url>
    <content><![CDATA[<h2 id="Qt开发奇葩问题总集"><a href="#Qt开发奇葩问题总集" class="headerlink" title="Qt开发奇葩问题总集"></a>Qt开发奇葩问题总集</h2><p>[TOC]</p>
<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ul>
<li>说明  主要记录一些 Qt 开发以及QtCreator 使用过程中遇到的奇葩问题 记录</li>
<li>有些已经解决（有些也晓不得为啥就能解决）有些还未解决  </li>
<li>其实觉得问题奇葩 就是目前个人的知识水平还不够  晓不得为啥这样能解决  希望有路过的大佬懂的原因的能解下惑</li>
</ul>
<span id="more"></span>

<h3 id="使用-QColorDialog-控制台出现提示-未解决"><a href="#使用-QColorDialog-控制台出现提示-未解决" class="headerlink" title="使用 QColorDialog   控制台出现提示  未解决"></a>使用 QColorDialog   控制台出现提示  未解决</h3><p>使用 QColorDialog   控制台出现提示 也不是报错叭  但是看到总不舒服   202106171602 未解决</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setGeometry: Unable to set geometry 400x400+2619+336 (frame: 416x439+2611+305) on QWidgetWindow/&quot;QColorDialogClassWindow&quot; on &quot;\\.\DISPLAY2&quot;. Resulting geometry: 522x393+2619+336 (frame: 538x432+2611+305) margins: 8, 31, 8, 8 minimum size: 522x393 maximum size: 522x393 MINMAXINFO maxSize=0,0 maxpos=0,0 mintrack=538,432 maxtrack=538,432)</span><br></pre></td></tr></table></figure>

<h3 id="Qt-运行程序控制台-自动输出-CUserInputProcessor-OnSetFocus-in-之类的"><a href="#Qt-运行程序控制台-自动输出-CUserInputProcessor-OnSetFocus-in-之类的" class="headerlink" title="Qt 运行程序控制台 自动输出  CUserInputProcessor::OnSetFocus in  之类的"></a>Qt 运行程序控制台 自动输出  CUserInputProcessor::OnSetFocus in  之类的</h3><p>环境：  win7   Qt Creator4.13.1  Qt5.12.10<br>现象描述：<br> QtCreator 运行程序 控制台自动弹出    换个项目依然是  但是不影响程序执行  就是有点看着不舒服 就是不爽。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">CUserInputProcessor::OnSetFocus in</span><br><span class="line">CUserInputProcessor::OnSetFocus out</span><br></pre></td></tr></table></figure>

<p>百度网友解决办法是卸载百度输入法  运行的电脑上确实有百度输入法   同时 发现运行程序时鼠标点Mainwindow外面  输出out  里面输出in  </p>
<p>换用讯飞输入法后控制台出现：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">iFlyIMEEntry ::DllMain | strPath:D:\<span class="function">Program <span class="title">Files</span> <span class="params">(x86)</span>\iFlytek\iFlyIME\3.0.1727</span></span><br><span class="line"><span class="function">iFlyIMEEntry::ImeInquire | pos1</span></span><br><span class="line"><span class="function">::GetiflyimeModule | strBuf:D:\Program Files (x86)\iFlytek\iFlyIME\<span class="number">3.0</span><span class="number">.1727</span></span></span><br><span class="line"><span class="function">::GetiflyimeModule | hModule:<span class="number">0X2edd0000</span>iFlyIMEEntry::ImeInquire | pos2</span></span><br><span class="line"><span class="function">iFlyIMEEntry::ImeSelect | pos1iFlyIMEEntry::ImeSelect | pos2iFlyIMEEntry::ImeSelect | pos1iFlyIMEEntry::ImeSelect | pos2</span></span><br></pre></td></tr></table></figure>

<p>解决办法： 卸载百度输入法  </p>
<p> 出现原因： <em>希望路过的大佬能为我解解惑</em> </p>
<h3 id="Qt-打开软件出现-缺库-api-ms-win-core-sysinfo-l1-2-o-dll"><a href="#Qt-打开软件出现-缺库-api-ms-win-core-sysinfo-l1-2-o-dll" class="headerlink" title="Qt 打开软件出现  缺库 api-ms-win-core-sysinfo-l1-2-o.dll"></a>Qt 打开软件出现  缺库 api-ms-win-core-sysinfo-l1-2-o.dll</h3><p>环境：QtCreater4.13.1  Qt5.12.10</p>
<p>系统：Win7 </p>
<p>出现问题： 忘记截图了   虽然不影响使用 但看起来不舒服</p>
<p>解决办法：</p>
<p>1、下载 <a href="https://dllspedia.com/download/downloading-api-ms-win-core-sysinfo-l1-2-0_dll_32bit_6_2_9200_16384-dll-for-you/88435/">api-ms-win-core-sysinfo-l1-2-o.dll</a></p>
<p>2、将dll 放到  <code>C:\Windows\System32 </code> 目录下  如果出现了两次提示没有<code>api-ms-win-core-sysinfo-l1-2-o.dll</code> 分别把 32(<code>C:\Windows\System32 </code>)和64位（<code>C:\Windows\SysWOW64</code>）的dll放到目录下</p>
<p>说明：不知道是dll的原因还是啥  <code>C:\Windows\System32 </code>目录下放 32位的提示错误  最后是交换放置</p>
<h4 id="Qt-使用多线程连接信号槽-发生错误"><a href="#Qt-使用多线程连接信号槽-发生错误" class="headerlink" title="Qt 使用多线程连接信号槽  发生错误"></a>Qt 使用多线程连接信号槽  发生错误</h4><p>环境：QtCreater4.13.1  Qt5.12.10</p>
<p>系统：Win7 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QObject::connect: Cannot queue arguments of type &#x27;QList&lt;PsdData&gt;&#x27;</span><br><span class="line">(Make sure &#x27;QList&lt;PsdData&gt;&#x27; is registered using qRegisterMetaType()</span><br></pre></td></tr></table></figure>

<p>解决办法：</p>
<p>connect 之前调用 qRegisterMetaType()注册数据类型   （自定义的数据类型PsdData）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;QMetaType&gt;</span><br><span class="line">qRegisterMetaType&lt;QList&lt;PsdData&gt;&gt;(&quot;QList&lt;PsdData&gt;&quot;);</span><br><span class="line">qRegisterMetaType&lt;QList&lt;rgbPoint&gt;&gt;(&quot;QList&lt;rgbPoint&gt;&quot;);</span><br></pre></td></tr></table></figure>

<h4 id="Qt-多线程-未解决"><a href="#Qt-多线程-未解决" class="headerlink" title="Qt 多线程  未解决"></a>Qt 多线程  未解决</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This application has requested the Runtime to terminate it in an unusual way.</span><br><span class="line">Please contact the application&#x27;s support team for more information.</span><br><span class="line">CSProxy refcount 22</span><br><span class="line">==========&gt; ExitInstance :gLayerInfo delete 873638104&lt;==============Unload CSProxy from E:\Works_Project\DMCA\DMCA_PSD\Software\build-DMCA_PSD-Desktop_Qt_5_12_10_MinGW_32_bit\debug\DMCA_PSD.exe...</span><br><span class="line">terminate called after throwing an instance of &#x27;std::bad_alloc&#x27;</span><br><span class="line">  what():  std::bad_alloc</span><br></pre></td></tr></table></figure>



<h3 id="Qt-使用MSVC-编译器-显示中文字符-报错"><a href="#Qt-使用MSVC-编译器-显示中文字符-报错" class="headerlink" title="Qt 使用MSVC 编译器  显示中文字符 报错"></a>Qt 使用MSVC 编译器  显示中文字符 报错</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">error: C2001: newline in constant</span><br><span class="line">.......</span><br><span class="line">error: C3872: &#x27;0xe11b&#x27;: this character is not allowed in an identifier</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解决办法：将当前文档转化为 UTF-8   使用QStringLiteral（）包裹字符串</p>
<p>保存UTF-8： （都需要用QStringLiteral包裹中文字符）</p>
<p>1、使用记事本另存为 选择UTF-8</p>
<p>2、Qt Creator 工具-&gt;选项-&gt;文本编辑器-&gt;Behavior-&gt;文件编码    默认编码格式-&gt;UTF-8     UTF-8 BOM-&gt;如果编码是UTF-8则添加</p>
<h3 id="error-LNK2019"><a href="#error-LNK2019" class="headerlink" title="error: LNK2019"></a>error: LNK2019</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">device_sapp.obj:-1: error: LNK2019: unresolved external symbol &quot;public: virtual __cdecl device_sapp::~device_sapp(void)&quot; (??1device_sapp@@UEAA@XZ) referenced in function &quot;public: virtual void * __cdecl device_sapp::`scalar deleting destructor&#x27;(unsigned int)&quot; (??_Gdevice_sapp@@UEAAPEAXI@Z)</span><br></pre></td></tr></table></figure>

<p>虚基类的构造函数与析构函数   与继承的类的析构函数重复</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Exception at 0x7fefdadb87d, code: 0xe06d7363: C++ exception, flags=0x1 (execution cannot be continued) (first chance) in dwrite!DWriteCreateFactory</span><br><span class="line">Exception at 0x7fefdadb87d, code: 0xe06d7363: C++ exception, flags=0x1 (execution cannot be continued) (first chance) in dwrite!DWriteCreateFactory</span><br></pre></td></tr></table></figure>

<h4 id="error-LNK2019-1"><a href="#error-LNK2019-1" class="headerlink" title="error: LNK2019"></a>error: LNK2019</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">qcustomplot.obj:-1: error: LNK2019: unresolved external symbol &quot;__declspec(dllimport) public: __cdecl QPrinter::QPrinter(enum QPrinter::PrinterMode)&quot; (__imp_??0QPrinter@@QEAA@W4PrinterMode@0@@Z) referenced in function &quot;public: bool __cdecl QCustomPlot::savePdf(class QString const &amp;,int,int,enum QCP::ExportPen,class QString const &amp;,class QString const &amp;)&quot; (?savePdf@QCustomPlot@@QEAA_NAEBVQString@@HHW4ExportPen@QCP@@00@Z)</span><br></pre></td></tr></table></figure>

<p>出现这样的错误一般是声明了函数没有实现其定义，比如这里提示的是没有自定义类MyWidget的实现函数。如果你已经检查了确定定义是有的，比如我这个就确实有定义了的，那就把该项目编译出的build debug文件夹给删除掉，再重新编译，注意是编译出来的整个文件夹一起删，而不是clean清除后重新构建。</p>
<p>忘记添加：  <strong>printsupport</strong></p>
<h3 id="error-LNK2038"><a href="#error-LNK2038" class="headerlink" title="error: LNK2038"></a>error: LNK2038</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SmartFFT.lib(smartfft.obj):-1: error: LNK2038: mismatch detected for &#x27;_ITERATOR_DEBUG_LEVEL&#x27;: value &#x27;0&#x27; doesn&#x27;t match value &#x27;2&#x27; in main.obj</span><br></pre></td></tr></table></figure>

<p>原因：用<strong>release链接到一个debug编译的lib</strong>或者<strong>debug模式链接到一个release编译的lib</strong></p>
<h3 id="error-C2131"><a href="#error-C2131" class="headerlink" title="error: C2131"></a>error: C2131</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">error: C2131: expression did not evaluate to a constant</span><br></pre></td></tr></table></figure>

<p>原因：MSVC编译器  使用变量定义数组的尺寸</p>
<h3 id="error-LNK2005"><a href="#error-LNK2005" class="headerlink" title="error: LNK2005"></a>error: LNK2005</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">error: LNK2005: &quot;void __cdecl doFFT(short *,int,double *)&quot; (?doFFT@@YAXPEAFHPEAN@Z) already defined in main.obj</span><br></pre></td></tr></table></figure>

<p>原因：需要使用<code>static</code>定义 函数为静态方法</p>
<h4 id="Cannot-send-events-to-objects-owned-by-a-different-thread"><a href="#Cannot-send-events-to-objects-owned-by-a-different-thread" class="headerlink" title="Cannot send events to objects owned by a different thread"></a>Cannot send events to objects owned by a different thread</h4><p>环境：QtCreater4.13.1  Qt5.12.10</p>
<p>系统：Win7 </p>
<p>问题描述：Qt 使用<code>std::thread</code>调用了主线程的对象 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ASSERT failure in QCoreApplication::sendEvent: &quot;Cannot send events to objects owned by a different thread. Current thread 0x0xdbd5b20. Receiver &#x27;MainWindow&#x27; (of type &#x27;MainWindow&#x27;) was created in thread 0x0x364090&quot;, file kernel\qcoreapplication.cpp, line 578</span><br><span class="line">(Press Retry to debug the application)</span><br></pre></td></tr></table></figure>

<p>解决办法：使用Qt的的信号槽机制跨线程通信</p>
<h3 id="Cannot-open-include-file-‘corecrt-h’"><a href="#Cannot-open-include-file-‘corecrt-h’" class="headerlink" title="Cannot open include file: ‘corecrt.h’"></a>Cannot open include file: ‘corecrt.h’</h3><p>环境：QtCreater4.13.1  Qt5.12.10</p>
<p>系统：Win7 </p>
<p>原因是更改系统之前安装的Windows SDK版本</p>
<h4 id="Cannot-open-include-file-‘corecrt-h’-1"><a href="#Cannot-open-include-file-‘corecrt-h’-1" class="headerlink" title="Cannot open include file: ‘corecrt.h’"></a>Cannot open include file: ‘corecrt.h’</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\include\crtdefs.h:10: error: C1083: Cannot open include file: &#x27;corecrt.h&#x27;: No such file or directory</span><br></pre></td></tr></table></figure>

<h4 id="Cannot-open-include-file-‘Windows-h’"><a href="#Cannot-open-include-file-‘Windows-h’" class="headerlink" title="Cannot open include file: ‘Windows.h’"></a>Cannot open include file: ‘Windows.h’</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\Works_Project\Spectrum_Analyzer\PCIE\SPEED_APP_win\APP_win\PcieSpeed\pcie_fun.c:4: error: C1083: Cannot open include file: &#x27;Windows.h&#x27;: No such file or directory</span><br></pre></td></tr></table></figure>

<p>1、尝试修改系统环境变量   <strong>未解决</strong></p>
<p>2、通过baidu 在Pro里面链接 库 能解决第一个问题  但会出现第二个问题更严重 （治标不治本） <strong>未解决</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INCLUDEPATH += &quot;C:/Program Files (x86)/Windows Kits/10/Include/10.0.10240.0/ucrt&quot;</span><br><span class="line">LIBS += -L&quot;C:/Program Files (x86)/Windows Kits/10/Lib/10.0.10240.0/ucrt/x64&quot;</span><br></pre></td></tr></table></figure>

<p>（我的个人想法出现问题的大概率需要在哪里重新配置一下就好）</p>
<p>3、没有找到再哪里找到可以配置的地方 于是重新装了Qt 依然  <strong>未解决</strong> </p>
<p>4、但是再次打开Qt发现里面的配置配色跟卸载前一样 想到Qt会把配置文件放到用户目录下  <strong>解决</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\用户\AppData\Roaming\QtProject</span><br></pre></td></tr></table></figure>

<p>先备份一下文档 并删除 再次打开QtCreator 这时候打开花的时间有点长 它重新从系统获取了配置 这时候重新测试没有报错</p>
<p>说明： 遇到这种问题可以不用卸载Qt 直接删除 这个文件就行 但之前辛苦配置出自己的工作环境就搞掉 需要对QtProject每个文件设置什么东西了解下 出现问题删除对应文件即可</p>
]]></content>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>VS 2015 Steup 打包发布软件</title>
    <url>/2022/04/03/VS%202015%20Steup%20%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="VS-2015-Steup-打包发布软件"><a href="#VS-2015-Steup-打包发布软件" class="headerlink" title="VS 2015 Steup 打包发布软件"></a>VS 2015 Steup 打包发布软件</h2><p>[TOC]</p>
<h3 id="打包非Vs项目"><a href="#打包非Vs项目" class="headerlink" title="打包非Vs项目"></a>打包非Vs项目</h3><ul>
<li>项目使用<code>Qt</code>编写</li>
</ul>
<h4 id="1、插件下载"><a href="#1、插件下载" class="headerlink" title="1、插件下载"></a>1、插件下载</h4><ul>
<li><p><a href="https://marketplace.visualstudio.com/items?itemName=VisualStudioClient.MicrosoftVisualStudio2015InstallerProjects">Microsoft Visual Studio 2015 Installer Projects</a></p>
</li>
<li><p>工具-&gt;扩展与更新-&gt;联机-&gt;搜索  Installer Projects</p>
</li>
</ul>
<h4 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h4><ul>
<li>关掉VS 双击下载好的 .exe 安装</li>
</ul>
<span id="more"></span>

<h4 id="3、打开VS新建Steup-Project项目"><a href="#3、打开VS新建Steup-Project项目" class="headerlink" title="3、打开VS新建Steup Project项目"></a>3、打开VS新建<code>Steup Project</code>项目</h4><ul>
<li>注意项目名称 需要跟你打包的软件名字一致，出来的安装包名称才是一样的(我这里是测试所以就不改名字了)</li>
<li>因为 我的项目是用<code>Qt</code>写的没有”添加到解决方法案“的选项</li>
</ul>
<p><img src="/2022/04/03/VS%202015%20Steup%20%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83%E8%BD%AF%E4%BB%B6/image-20220403100807308.png"></p>
<ul>
<li>新建好项目之后出现出现三个目录<ul>
<li>1、应用主目录 放需要打包的的<code>.exe</code>所依赖的<code>.dll</code></li>
<li>2、用户桌面 放程序启动快捷方式</li>
<li>3、用户程序菜单 （就是开始菜单旁边的程序菜单）主要放一个启动和卸载快捷方式</li>
</ul>
</li>
</ul>
<p><img src="/2022/04/03/VS%202015%20Steup%20%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83%E8%BD%AF%E4%BB%B6/image-20220403102355842.png"></p>
<ul>
<li>特别说明：<ul>
<li>因为被打包程序不是vs解决方案所以 网上<a href="https://blog.csdn.net/qq_43026206/article/details/104264194">“添加项目输出-&gt;主输出”</a>的方法对当前不适用</li>
<li>所以看到“添加项目输出组”为空也不用担心</li>
</ul>
</li>
</ul>
<h4 id="4、添加程序以及依赖项"><a href="#4、添加程序以及依赖项" class="headerlink" title="4、添加程序以及依赖项"></a>4、添加程序以及依赖项</h4><p><img src="/2022/04/03/VS%202015%20Steup%20%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83%E8%BD%AF%E4%BB%B6/image-20220403105553625.png"></p>
<ul>
<li>将程序<code>.exe</code>和<code>.dll</code>以及其它程序依赖项添加到这个目录下 【 右键 Application Folder-&gt;Add-&gt;文件】<ul>
<li>如果是Qt项目 请务必先先使用 <code>windeployqt  xxx.exe</code> 打包程序（就是将dll以及依赖项添加到exe目录）</li>
<li>依赖项如果存在多文件夹的情况 请通过【右键 Application Folder-&gt;Add-&gt;Folder】新建文件夹并取相同名称 再在此文件夹下添加原文件</li>
</ul>
</li>
</ul>
<p><img src="/2022/04/03/VS%202015%20Steup%20%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83%E8%BD%AF%E4%BB%B6/image-20220403104011438-16489536662101.png"></p>
<ul>
<li>添加完成</li>
</ul>
<p><img src="/2022/04/03/VS%202015%20Steup%20%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83%E8%BD%AF%E4%BB%B6/image-20220403110046529.png"></p>
<h4 id="5、添加卸载程序以及快捷方式"><a href="#5、添加卸载程序以及快捷方式" class="headerlink" title="5、添加卸载程序以及快捷方式"></a>5、添加卸载程序以及快捷方式</h4><ul>
<li>在Application Folder下添加 <code>C：Windows\System32\Msiexec.exe</code> 可以右键重命名为<code>uninstaller.exe</code></li>
<li>然后右键 <code>uninstaller.exe</code> 创建快捷方式</li>
<li>右键 <code>.exe</code> 创建快捷方式 可以直接通过拖动的方式移动到 User‘s Programs Menu下</li>
<li>这里看个人需求添加 作者这里将.exe的快捷方式t添加到 Desktop   exe和uninstall.exe 添加到Menu</li>
</ul>
<p><img src="/2022/04/03/VS%202015%20Steup%20%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83%E8%BD%AF%E4%BB%B6/image-20220403110822367.png"></p>
<ul>
<li>卸载程序的快捷方式的 <code>Arguments</code>参数需要添加项目的<code>ProductCode</code></li>
<li>注意<code>Arguments</code>参数填写的时候    <code>/x+空格+ProductCode</code>  注意&#x2F;x后面跟空格再跟ProductCode&#96;</li>
</ul>
<p><img src="/2022/04/03/VS%202015%20Steup%20%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83%E8%BD%AF%E4%BB%B6/image-20220403112257278.png"><img src="/2022/04/03/VS%202015%20Steup%20%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83%E8%BD%AF%E4%BB%B6/image-20220403112503565.png"></p>
<h4 id="6、编译生成"><a href="#6、编译生成" class="headerlink" title="6、编译生成"></a>6、编译生成</h4><ul>
<li>在项目右键重新生成 编译完成可以在生成目录下看到一个 <code>.exe</code>和<code>.msi</code></li>
</ul>
<p><img src="/2022/04/03/VS%202015%20Steup%20%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83%E8%BD%AF%E4%BB%B6/image-20220403113255966.png"></p>
<ul>
<li>自行安装测试</li>
</ul>
<h4 id="7、优化安装界面"><a href="#7、优化安装界面" class="headerlink" title="7、优化安装界面"></a>7、优化安装界面</h4><ul>
<li><p>可以通过右键项目View里面设置或者添加需要的设置或者美化</p>
</li>
<li><p>笔者这里还未用到  就没有测试 等后面测试过了在补上</p>
</li>
</ul>
<h3 id="打包Vs项目"><a href="#打包Vs项目" class="headerlink" title="打包Vs项目"></a>打包Vs项目</h3><ul>
<li>先放这后面补</li>
</ul>
<h3 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h3><p>使用过程中遇到的问题希望路过的大佬知道的不吝赐教 （可能是我的操作方式有误或是没有发现）</p>
<ul>
<li>为啥VS添加依赖项不能通过<code>.exe</code>自动添加依赖项</li>
<li>为啥VS不能遍历选择的<code>.exe</code>所在目录 自动添加文件夹以及依赖项</li>
</ul>
<p>参考：</p>
<p><a href="https://www.cnblogs.com/qq52117354/p/11434031.html">参考1</a></p>
<p><a href="https://blog.csdn.net/qq_43026206/article/details/104264194">参考2</a></p>
]]></content>
      <tags>
        <tag>Vs</tag>
      </tags>
  </entry>
  <entry>
    <title>VsQt开发问题</title>
    <url>/2022/12/04/VsQt%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="VsQt开发问题"><a href="#VsQt开发问题" class="headerlink" title="VsQt开发问题"></a>VsQt开发问题</h1><p>[TOC]</p>
<h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><ul>
<li><p>Win10</p>
</li>
<li><p>Visual Studio 2019 pro</p>
</li>
<li><p>Qt Creator 4.13.1 、Qt 5.12.10</p>
</li>
<li><p>以下教程默认已安装好 <code>Vs</code> 以及<code>Qt</code></p>
</li>
</ul>
<span id="more"></span>



<h2 id="VS-Qt安装注意事项"><a href="#VS-Qt安装注意事项" class="headerlink" title="VS+Qt安装注意事项"></a>VS+Qt安装注意事项</h2><ul>
<li>一般先安装VS在安装Qt，Q这样t会检测环境变量列出编译器</li>
<li>Qt如果现需要使用msvc需要在安装时勾选msvc</li>
</ul>
<h3 id="Visual-Studio-2015-安装注意事项"><a href="#Visual-Studio-2015-安装注意事项" class="headerlink" title="Visual Studio 2015 安装注意事项"></a>Visual Studio 2015 安装注意事项</h3><ul>
<li><p>尽量安装最后一版 注意哈希校验这是不会变的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cn_visual_studio_professional_2015_with_update_3_x86_x64_dvd_8923256.iso</span><br><span class="line">//SHA1 99E6C061FFB3194D28682D75D5F2F0F12A8D614F</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装项</p>
<p><img src="/2022/12/04/VsQt%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/image-20230702104002402.png" alt="image-20230702104002402"></p>
</li>
</ul>
<p><img src="/2022/12/04/VsQt%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/image-20230702104045051.png" alt="image-20230702104045051"></p>
<h2 id="QtCreator-msvc编译器配置"><a href="#QtCreator-msvc编译器配置" class="headerlink" title="QtCreator msvc编译器配置"></a>QtCreator msvc编译器配置</h2><ul>
<li>QtCreator 想要使用<code>msvc</code>编译器需要先配置 <code>msvc kits</code></li>
<li>安装<a href="https://developer.microsoft.com/en-us/windows/downloads/windows-sdk/">Windows SDK</a>配置 windows 调试器</li>
</ul>
<p><img src="/2022/12/04/VsQt%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/image-20221204172329524.png" alt="image-20221204172329524"></p>
<h3 id="Visual-Studio-2019-Qt-5-12-10"><a href="#Visual-Studio-2019-Qt-5-12-10" class="headerlink" title="Visual Studio 2019 + Qt 5.12.10"></a>Visual Studio 2019 + Qt 5.12.10</h3><ul>
<li>安装好<code>WindowsKits  Debbug </code>后 重启<code>QtCreator </code>可以看到自动检测出的<code>cdb</code></li>
</ul>
<p><img src="/2022/12/04/VsQt%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/image-20221204170543076.png" alt="image-20221204170543076"></p>
<ul>
<li>如果Vs Qt都安装了msvc 编译器的话这里应该能检测出来</li>
</ul>
<p><img src="/2022/12/04/VsQt%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/image-20221204171010583.png" alt="image-20221204171010583"></p>
<ul>
<li>msvc Kits 的配置 <code>msvc2017_32</code></li>
</ul>
<p><img src="/2022/12/04/VsQt%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/image-20221204171327262.png" alt="image-20221204171327262"></p>
<ul>
<li><code>msvc2017_64</code></li>
</ul>
<p><img src="/2022/12/04/VsQt%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/image-20221204171420662.png" alt="image-20221204171420662"></p>
<h3 id="Visual-Studio-2015-Qt5-12-10"><a href="#Visual-Studio-2015-Qt5-12-10" class="headerlink" title="Visual Studio 2015  + Qt5.12.10"></a>Visual Studio 2015  + Qt5.12.10</h3><ul>
<li>调试器</li>
</ul>
<p><img src="/2022/12/04/VsQt%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/image-20230702101412284.png" alt="image-20230702101412284"></p>
<ul>
<li>编译器</li>
</ul>
<p><img src="/2022/12/04/VsQt%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/image-20230702101321058.png" alt="image-20230702101321058"></p>
<ul>
<li>msvc2015_64</li>
</ul>
<p><img src="/2022/12/04/VsQt%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/image-20230702101731490.png" alt="image-20230702101731490"></p>
<ul>
<li>msvc2017_32</li>
</ul>
<p><img src="/2022/12/04/VsQt%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/image-20230702105034324.png" alt="image-20230702105034324"></p>
<ul>
<li>msvc2017_64</li>
</ul>
<p><img src="/2022/12/04/VsQt%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/image-20230702104901362.png" alt="image-20230702104901362"></p>
<h2 id="VsQt环境配置"><a href="#VsQt环境配置" class="headerlink" title="VsQt环境配置"></a>VsQt环境配置</h2><h3 id="安装插件-Qt-Visual-Studio-Tools"><a href="#安装插件-Qt-Visual-Studio-Tools" class="headerlink" title="安装插件 Qt Visual Studio Tools"></a>安装插件 Qt Visual Studio Tools</h3><ul>
<li><p><a href="https://marketplace.visualstudio.com/items?itemName=TheQtCompany.QtVisualStudioTools2019">Qt Visual Studio Tools</a></p>
</li>
<li><p>右键 -&gt;扩展 -&gt;扩展管理 -&gt;联机-&gt; 右边搜索框输入<code>Qt</code> -&gt; 点击<code>Qt Visual Studio Tools</code> -&gt;下载安装-&gt;重启<code>Vs</code>【Vs2015的扩展是在工具里面】</p>
</li>
<li><p>如果无法下载或下载过慢可手动下载对应<code>Vs</code>版本安装</p>
</li>
</ul>
<p><img src="/2022/12/04/VsQt%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/image-20221204152356771.png" alt="image-20221204152356771"></p>
<h3 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h3><ul>
<li>右键 -&gt;扩展 -&gt;Qt Vs Tools -&gt; QtVersions -&gt;点击add -&gt;编译器命名-&gt;点击文件夹-&gt;选择对应编译器qmake -&gt;打开-&gt;确定 -&gt;重启Vs </li>
<li>其它版本msvc编译器操作方法类似 不同 Qt tools 工具版本不一样操作方式有点区别 但道理是相通的</li>
<li>可以新建一个<code>Qt</code>项目测试一下</li>
</ul>
<p><img src="/2022/12/04/VsQt%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/image-20221204155630937.png" alt="image-20221204155630937"></p>
<h2 id="Qt创建项目"><a href="#Qt创建项目" class="headerlink" title="Qt创建项目"></a>Qt创建项目</h2><ul>
<li>Projects-&gt;New-&gt; Qt Widgets Applicationn-&gt;项目名称-&gt;项目路径-&gt;一路下一步 就行</li>
</ul>
<p><img src="/2022/12/04/VsQt%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/image-20221204162127087.png" alt="image-20221204162127087"></p>
<p><img src="/2022/12/04/VsQt%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/image-20221204162543177.png" alt="image-20221204162543177"></p>
<ul>
<li>特别说明：如果想转换工程到<code>Vs</code> 请选择<code>Msvc</code>编译器(Kit)</li>
</ul>
<h2 id="Vs创建Qt项目"><a href="#Vs创建Qt项目" class="headerlink" title="Vs创建Qt项目"></a>Vs创建Qt项目</h2><ul>
<li>FIle-&gt;新建-&gt;项目-&gt;搜索Qt -&gt;下滑选择<code>Qt Widgets Application</code> -&gt; 下一步-&gt;创建</li>
</ul>
<p><img src="/2022/12/04/VsQt%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/image-20221204160857826.png" alt="image-20221204160857826"></p>
<ul>
<li>其它参数可以先不管一路往下走</li>
<li>这里类名可以自行修改如<code>MainWindow</code>（对应Qt创建工程时的类名）</li>
</ul>
<p><img src="/2022/12/04/VsQt%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/image-20221204161531012.png" alt="image-20221204161531012"></p>
<ul>
<li>点击运行</li>
</ul>
<p><img src="/2022/12/04/VsQt%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/image-20221204161738792.png" alt="image-20221204161738792"></p>
<h2 id="VsQt工程转换"><a href="#VsQt工程转换" class="headerlink" title="VsQt工程转换"></a>VsQt工程转换</h2><ul>
<li>Vs的Debug比Qt的Debug好用且功能更多</li>
<li>这里只是一些基本的转换 中间还有一些小毛病需要解决</li>
</ul>
<h3 id="Vs工程转Qt工程"><a href="#Vs工程转Qt工程" class="headerlink" title="Vs工程转Qt工程"></a>Vs工程转Qt工程</h3><ul>
<li>右键项目 -&gt;<code>Qt Create Basic .pro File</code> -&gt; <code>Project tag</code> 选择<code>Target Name</code>(生成出来的文件名与工程名相同) -&gt;Ok  -&gt; 保存<code>.pri</code></li>
</ul>
<p><img src="/2022/12/04/VsQt%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/image-20221204163828231.png" alt="image-20221204163828231"></p>
<h3 id="Qt工程转Vs工程"><a href="#Qt工程转Vs工程" class="headerlink" title="Qt工程转Vs工程"></a>Qt工程转Vs工程</h3><ul>
<li>扩展-&gt;<code>Qt Vs Tools</code> -&gt; <code>Open Qt Project File(.pro)</code>-&gt;选择<code>.pro</code>-&gt; 打开</li>
</ul>
<p><img src="/2022/12/04/VsQt%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/image-20221204164509822.png" alt="image-20221204164509822"></p>
<ul>
<li><p>设置<code>.pro</code>使在<code>Qt</code>和<code>Vs</code>中的编译文件输出到同一目录中</p>
<ul>
<li><p><code>Qt</code>的影子构建更好用 没有找到<code>.pro</code>中获取<code>Kit</code>的方法 只能手动修改一次就行 <code>Desktop_Qt_5_12_10_MSVC2015_64bit</code>换成自己的构建器名字</p>
</li>
<li><p>因为不喜欢影子构建把<code>debug</code>和<code>release</code>产出两个文件到顶层 所以控制了输出到一个文件下面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 影子构建产生的文件夹名称</span></span><br><span class="line">../%&#123;JS: Util.asciify(<span class="string">&quot;build-%&#123;CurrentProject:Name&#125;-%&#123;CurrentKit:FileSystemName&#125;&quot;</span>)&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CurrentKitName = Desktop_Qt_5_12_10_MSVC2015_64bit</span><br><span class="line">OUTDIR = $$PWD/../&quot;build-$$TARGET-$$CurrentKitName&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">set</span> save built output files</span></span><br><span class="line">CONFIG(debug, debug|release) &#123;</span><br><span class="line">DESTDIR = $$OUTDIR/debug</span><br><span class="line">UI_DIR = $$OUTDIR/outc/debug/uic</span><br><span class="line">RCC_DIR = $$OUTDIR/outc/debug/qrc</span><br><span class="line">MOC_DIR = $$OUTDIR/outc/debug/moc</span><br><span class="line">OBJECTS_DIR = $$OUTDIR/outc/debug/obj</span><br><span class="line">&#125;else&#123;</span><br><span class="line">DESTDIR = $$OUTDIR/release</span><br><span class="line">UI_DIR = $$OUTDIR/outc/release/uic</span><br><span class="line">RCC_DIR = $$OUTDIR/outc/release/qrc</span><br><span class="line">MOC_DIR = $$OUTDIR/outc/release/moc</span><br><span class="line">OBJECTS_DIR = $$OUTDIR/outc/release/obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>这样设置了之后 <code>Qt</code>编译了转换到<code>Vs</code>可直接运行</li>
</ul>
<h3 id="一些小毛病"><a href="#一些小毛病" class="headerlink" title="一些小毛病"></a>一些小毛病</h3><ul>
<li><p>Vs 工程转换为Qt时会出现<code>ui_xxx.h</code>文件找不到等情况都是由于文件生成文件路径引起的</p>
</li>
<li><p>工程转换后编译调试输出的文件 发生改变 非常并不便于 文档管理 Qt的影子构建非常好用将编译文件输出到源文件外  改变工程后编译文件都输出到工程外的一个文件夹就行</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Qt</tag>
        <tag>Vs</tag>
      </tags>
  </entry>
  <entry>
    <title>VS开发问题总集【持续更新中】</title>
    <url>/2022/11/13/VS%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E6%80%BB%E9%9B%86/</url>
    <content><![CDATA[<h2 id="VS开发问题总集【持续更新中】"><a href="#VS开发问题总集【持续更新中】" class="headerlink" title="VS开发问题总集【持续更新中】"></a>VS开发问题总集【持续更新中】</h2><p>[TOC]</p>
<h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><ul>
<li>Visual Studio 2015</li>
<li>Windows 7</li>
<li>记录实际VS开发过程中遇到的问题</li>
<li>✔️ : 解决 ❌ ：未解决 ⚪️ ：未知</li>
</ul>
<span id="more"></span>

<h3 id="动态-x2F-静态库链接✔️"><a href="#动态-x2F-静态库链接✔️" class="headerlink" title="动态&#x2F;静态库链接✔️"></a>动态&#x2F;静态库链接✔️</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;CyAPI\CyAPI.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _WIN64</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;CyAPI/x64/CyAPI.lib&quot;</span>) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;CyAPI/x86/CyAPI.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>链接 CyAPI.lib （静态库）时出错</p>
</li>
<li><p>检查链接库路径没问题</p>
</li>
<li><p>检查头文件路径没问题</p>
</li>
<li><p>始终报如下错误：</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">1&gt;</span><span class="bash">CyAPI.lib(CyAPI.obj) : error LNK2019: 无法解析的外部符号 __imp_SetupDiDestroyDeviceInfoList，该符号在函数 <span class="string">&quot;public: unsigned char __cdecl CCyUSBDevice::DeviceCount(void)&quot;</span> (?DeviceCount@CCyUSBDevice@@QEAAEXZ) 中被引用</span></span><br><span class="line"><span class="meta">1&gt;</span><span class="bash">CyAPI.lib(CyAPI.obj) : error LNK2019: 无法解析的外部符号 __imp_SetupDiEnumDeviceInterfaces，该符号在函数 <span class="string">&quot;public: unsigned char __cdecl CCyUSBDevice::DeviceCount(void)&quot;</span> (?DeviceCount@CCyUSBDevice@@QEAAEXZ) 中被引用</span></span><br><span class="line"><span class="meta">1&gt;</span><span class="bash">CyAPI.lib(CyAPI.obj) : error LNK2019: 无法解析的外部符号 __imp_SetupDiGetClassDevsA，该符号在函数 <span class="string">&quot;public: unsigned char __cdecl CCyUSBDevice::DeviceCount(void)&quot;</span> (?DeviceCount@CCyUSBDevice@@QEAAEXZ) 中被引用</span></span><br><span class="line"><span class="meta">1&gt;</span><span class="bash">CyAPI.lib(CyAPI.obj) : error LNK2019: 无法解析的外部符号 __imp_SetupDiGetDeviceInterfaceDetailA，该符号在函数 <span class="string">&quot;public: bool __cdecl CCyUSBDevice::CreateHandle(unsigned char)&quot;</span> (?CreateHandle@CCyUSBDevice@@QEAA_NE@Z) 中被引用</span></span><br><span class="line"><span class="meta">1&gt;</span><span class="bash">CyAPI.lib(CyAPI.obj) : error LNK2019: 无法解析的外部符号 sprintf，该符号在函数 <span class="string">&quot;public: void __cdecl CCyUSBDevice::UsbdStatusString(unsigned long,char *)&quot;</span> (?UsbdStatusString@CCyUSBDevice@@QEAAXKPEAD@Z) 中被引用</span></span><br></pre></td></tr></table></figure>

<ul>
<li>解决办法添加 附加依赖项    右键项目-&gt;属性-&gt;连接器-&gt;输入-&gt;附加依赖项</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">setupapi.lib</span><br><span class="line">legacy_stdio_definitions.lib</span><br></pre></td></tr></table></figure>

<ul>
<li>或者是在链接库之前添加</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;setupapi.lib&quot;</span>) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;legacy_stdio_definitions.lib&quot;</span>) </span></span><br></pre></td></tr></table></figure>

<h3 id="warning-LNK4098✔️"><a href="#warning-LNK4098✔️" class="headerlink" title="warning LNK4098✔️"></a>warning LNK4098✔️</h3><ul>
<li>警告</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">warning LNK4098: 默认库“LIBCMT”与其他库的使用冲突；请使用 /NODEFAULTLIB:library</span><br></pre></td></tr></table></figure>

<ul>
<li>解决：右键项目-&gt;属性-&gt;连接器-&gt;输入-&gt;忽略特定默认库</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">LIBC</span><br><span class="line">LIBCMT</span><br></pre></td></tr></table></figure>

<h3 id="WDK-VS2008转到VS2015✔️"><a href="#WDK-VS2008转到VS2015✔️" class="headerlink" title="WDK VS2008转到VS2015✔️"></a>WDK VS2008转到VS2015✔️</h3><ul>
<li>报错</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Unknown <span class="keyword">or</span> unsupported property value <span class="string">&#x27;Win7&#x27;</span> <span class="keyword">for</span> TargetVersion.</span><br></pre></td></tr></table></figure>

<ul>
<li>VS2015 <code>TargetVersion</code>参数不再    <code>Win7</code>  而是<code>Windows7</code></li>
<li>同理<code>Win8</code> 换成 <code>Windows8</code></li>
<li>用文本编辑器打开<code>.vcxproj</code> 文件 将</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">&lt;TargetVersion&gt;Win7&lt;/TargetVersion&gt; </span><br><span class="line">&lt;TargetVersion&gt;Win8&lt;/TargetVersion&gt;</span><br><span class="line"><span class="comment">// Win7 修改为  Windows7</span></span><br><span class="line">&lt;TargetVersion&gt;Windows7&lt;/TargetVersion&gt; </span><br><span class="line">&lt;TargetVersion&gt;Windows8&lt;/TargetVersion&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>方法二  右键项目属性-&gt;Dirver Setting-&gt;General-&gt;Target OS Version -&gt;Windows 7</li>
</ul>
<h3 id="C2664✔️"><a href="#C2664✔️" class="headerlink" title="C2664✔️"></a>C2664✔️</h3><blockquote>
<p>“const char *” 类型的实参与 “LPCWSTR” 类型的形参不兼容    </p>
<p>“int MessageBoxW(HWND,LPCWSTR,LPCWSTR,UINT)”: 无法将参数 2 从“const char [45]”转换为“LPCWSTR”</p>
</blockquote>
<ul>
<li><p>使用 L _T TEXT 等包裹字符串</p>
</li>
<li><p>更改编码格式   项目菜单-&gt;项目属性-&gt;配置属性-&gt;常规-&gt;项目默认值-&gt;字符集，将使用Unicode字符集改为未设置即可。</p>
</li>
</ul>
<p><a href="https://blog.csdn.net/aishuirenjia/article/details/88996228">解决CREATEFILE函数中不能从const char* 转换到LPCTSTR的问题_爱水人家的博客-CSDN博客_无法从char转换为lptstr</a></p>
<h3 id="C4996✔️"><a href="#C4996✔️" class="headerlink" title="C4996✔️"></a>C4996✔️</h3><blockquote>
<p>C4996    ‘sprintf’: This function or variable may be unsafe. Consider using sprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.   </p>
</blockquote>
<ul>
<li><p>打开项目 -&gt; 属性 -&gt; C&#x2F;C++ -&gt; 预处理器 -&gt; 预处理器定义中添加 _CRT_SECURE_NO_WARNINGS</p>
</li>
<li><p>使用 sprintf_s 替换 sprintf</p>
</li>
</ul>
<h3 id="Please-assign-a-Qt-installation-in-‘Qt-Project-Settings’✔️"><a href="#Please-assign-a-Qt-installation-in-‘Qt-Project-Settings’✔️" class="headerlink" title="Please assign a Qt installation in ‘Qt Project Settings’✔️"></a>Please assign a Qt installation in ‘Qt Project Settings’✔️</h3><ul>
<li>报错如下</li>
<li>同时 配置属性中没有 Qt Project Settings</li>
</ul>
<p><img src="/2022/11/13/VS%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E6%80%BB%E9%9B%86/2022-11-15-10-39-37-image.png"></p>
<ul>
<li><p>右键项目-&gt;Qt-&gt; Convert custon build steps to Qt&#x2F;MSBuild</p>
<p><img src="/2022/11/13/VS%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E6%80%BB%E9%9B%86/2022-11-15-10-42-54-image.png"></p>
</li>
<li><p>同时设置为你的Qt编译器环境</p>
<p>右键项目-&gt;Qt Project Settings-&gt;Qt Insatllation-&gt;选择对应的编译环境</p>
<p><img src="/2022/11/13/VS%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E6%80%BB%E9%9B%86/2022-11-15-10-46-20-image.png"></p>
</li>
</ul>
<h3 id="VS2015-Ctrl-左键跳转✔️"><a href="#VS2015-Ctrl-左键跳转✔️" class="headerlink" title="VS2015 Ctrl+左键跳转✔️"></a>VS2015 Ctrl+左键跳转✔️</h3><ul>
<li><p>Vs2015以后都有这个功能 </p>
</li>
<li><p>Vs2015可以通过安装 <code>GO TO Definition</code> 插件来完成</p>
<p><img src="/2022/11/13/VS%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E6%80%BB%E9%9B%86/2022-11-18-10-30-02-image.png"></p>
</li>
</ul>
<h3 id="Qt工程转Vs2015工程✔️"><a href="#Qt工程转Vs2015工程✔️" class="headerlink" title="Qt工程转Vs2015工程✔️"></a>Qt工程转Vs2015工程✔️</h3><ul>
<li><p>安装并配置好 <code>Qt VS Tools</code>工具</p>
</li>
<li><p>使用 <code>Qt VS Tools</code> 打开.pro工程</p>
<p><img src="/2022/11/13/VS%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E6%80%BB%E9%9B%86/2022-11-18-11-24-30-image.png"></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 批处理命令</title>
    <url>/2022/11/12/Windows%20%E6%89%B9%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="windows-批处理命令学习"><a href="#windows-批处理命令学习" class="headerlink" title="windows 批处理命令学习"></a>windows 批处理命令学习</h2><p>[TOC]</p>
<span id="more"></span>

<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:: 如果不知道命令如何使用 可查看该命令<span class="built_in">help</span></span><br><span class="line">xxxx /?</span><br><span class="line">:: 显示输出</span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line">:: 本行命令开始关闭回显 @本行开始</span><br><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line">:: 注释  ::</span><br><span class="line">rem</span><br><span class="line">:: <span class="string">&quot;%&quot;</span>参数 依次填充</span><br><span class="line">%1 </span><br><span class="line">:: 显示文件结构树</span><br><span class="line">tree</span><br><span class="line">:: 输出到文件 append</span><br><span class="line">&gt;&gt; xxx.txt</span><br><span class="line">:: 输出到文件 覆盖</span><br><span class="line">&gt; xxx.txt</span><br><span class="line">:: 删除</span><br><span class="line">del</span><br><span class="line">:: 网络 ping</span><br><span class="line">ping www.baidu.com</span><br><span class="line">ping -n 3 www.baidu.com  ::发送3次</span><br><span class="line">:: 获取ip</span><br><span class="line">ipconfig</span><br><span class="line">:: 调用其他批处理</span><br><span class="line">call xx.bat</span><br><span class="line">:: 跳转</span><br><span class="line">goto xxx</span><br><span class="line">:: <span class="string">&quot;:&quot;</span>表示标签 和goto搭配使用 让命令跳转到指定地方 </span><br><span class="line">:xxx  </span><br><span class="line">:: 暂停</span><br><span class="line">pause</span><br><span class="line">:: 退出</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">:: 关闭或重启计算机</span><br><span class="line">shutdown</span><br><span class="line">:: 解析地址</span><br><span class="line">arp</span><br><span class="line">:: 开启命令</span><br><span class="line">start</span><br><span class="line">:: 关闭指定进程</span><br><span class="line">taskkill</span><br></pre></td></tr></table></figure>

<h4 id="del"><a href="#del" class="headerlink" title="del"></a>del</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rmdir /s /q  bulid</span><br><span class="line">:: /s 删除本身及子目录</span><br><span class="line">:: /q 安静模式 /s 删除目录树时不需要确认</span><br><span class="line"></span><br><span class="line">C:\Users\MAG&gt;del /?</span><br><span class="line">删除一个或多个文件。</span><br><span class="line"></span><br><span class="line">DEL [/P] [/F] [/S] [/Q] [/A[[:]attributes]] names</span><br><span class="line">ERASE [/P] [/F] [/S] [/Q] [/A[[:]attributes]] names</span><br><span class="line"></span><br><span class="line">  names         指定一个或多个文件或者目录列表。</span><br><span class="line">                通配符可用来删除多个文件。</span><br><span class="line">                如果指定了一个目录，该目录中的所</span><br><span class="line">                有文件都会被删除。</span><br><span class="line"></span><br><span class="line">  /P            删除每一个文件之前提示确认。</span><br><span class="line">  /F            强制删除只读文件。</span><br><span class="line">  /S            删除所有子目录中的指定的文件。</span><br><span class="line">  /Q            安静模式。删除全局通配符时，不要求确认</span><br><span class="line">  /A            根据属性选择要删除的文件</span><br><span class="line">  属性          R  只读文件            S  系统文件</span><br><span class="line">                H  隐藏文件            A  准备存档的文件</span><br><span class="line">                I  无内容索引文件      L  重新分析点</span><br><span class="line">                O  脱机文件            -  表示“否”的前缀</span><br><span class="line"></span><br><span class="line">如果命令扩展被启用，DEL 和 ERASE 更改如下:</span><br><span class="line"></span><br><span class="line">/S 开关的显示句法会颠倒，即只显示已经</span><br><span class="line">删除的文件，而不显示找不到的文件。</span><br></pre></td></tr></table></figure>

<h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if &quot;%1&quot;==&quot;&quot; goto usage</span><br><span class="line">if &quot;%1&quot;==&quot;/?&quot; goto usage</span><br><span class="line">if &quot;%1&quot;==&quot;help&quot; goto usage</span><br><span class="line">f not &quot;%1&quot;==&quot;&quot; goto usage</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if exist xx.gif del xx.gif  如果文件存在就删除</span><br><span class="line"></span><br><span class="line">masm %1.asm</span><br><span class="line">if errorlevel 1 pause &amp; edit %1.asm</span><br><span class="line">link %1.obj</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">::close <span class="built_in">echo</span></span><br><span class="line">cls</span><br><span class="line">::clean screen</span><br><span class="line"><span class="built_in">echo</span> This programme is to make the MASM programme automate</span><br><span class="line">::display info</span><br><span class="line"><span class="built_in">echo</span> Edit by CODERED</span><br><span class="line">::display info</span><br><span class="line"><span class="built_in">echo</span> Mailto me : qqkiller@sina.com</span><br><span class="line">::display info</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;%1&quot;</span>==<span class="string">&quot;&quot;</span> goto usage</span><br><span class="line">::<span class="keyword">if</span> input without paramater goto usage</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;%1&quot;</span>==<span class="string">&quot;/?&quot;</span> goto usage</span><br><span class="line">::<span class="keyword">if</span> paramater is <span class="string">&quot;/?&quot;</span> goto usage</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;%1&quot;</span>==<span class="string">&quot;help&quot;</span> goto usage</span><br><span class="line">::<span class="keyword">if</span> paramater is <span class="string">&quot;help&quot;</span> goto usage</span><br><span class="line">pause</span><br><span class="line">::pause to see usage</span><br><span class="line">masm %1.asm</span><br><span class="line">::assemble the .asm code</span><br><span class="line"><span class="keyword">if</span> errorlevel 1 pause &amp; edit %1.asm</span><br><span class="line">::<span class="keyword">if</span> error pause to see error msg and edit the code</span><br><span class="line">link %1.obj &amp; %1</span><br><span class="line">::<span class="keyword">else</span> link the .obj file and execute the .exe file</span><br><span class="line">:usage</span><br><span class="line">::<span class="built_in">set</span> usage</span><br><span class="line"><span class="built_in">echo</span> Usage: This BAT file name [asm file name]</span><br><span class="line"><span class="built_in">echo</span> Default BAT file name is START.BAT</span><br><span class="line">::display usage</span><br></pre></td></tr></table></figure>

<h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for %%I in (cmd1) do cmd2</span><br><span class="line"></span><br><span class="line">%%I 形式参数 相当于C for中的i 必要条件</span><br><span class="line">cmd1 循环条件 可以是指令 以空格 逗号 顿号等符号 分不同的指令</span><br><span class="line">cmd2 需要循环执行的任务 可以是命令 可以使用%%I 得到的参数</span><br><span class="line"></span><br><span class="line">for /f &quot;delims=&quot; %%I in (cmd1) do cmd2</span><br><span class="line">/f &quot;delims=&quot; 提取字符串</span><br><span class="line">　</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">mode con lines=3000</span><br><span class="line"><span class="built_in">set</span> <span class="comment">#=Any question&amp;set $=Q&amp;set/az=0x53b7e0b4</span></span><br><span class="line">title %<span class="comment">#% +%$%%$% %z%</span></span><br><span class="line"><span class="built_in">cd</span> /d <span class="string">&quot;%~dp0&quot;</span></span><br><span class="line">rem 删除含有指定字符串/关键字的文件夹</span><br><span class="line"><span class="keyword">for</span> /f <span class="string">&quot;delims=&quot;</span> %%a <span class="keyword">in</span> (<span class="string">&#x27;dir /ad/b/s &quot;*Out*&quot; 2^&gt;nul&#x27;</span>) <span class="keyword">do</span> (</span><br><span class="line">    <span class="keyword">if</span> exist <span class="string">&quot;%%a\&quot; (</span></span><br><span class="line"><span class="string">        echo;delete - &quot;</span>%%a<span class="string">&quot;</span></span><br><span class="line"><span class="string">        rd /s /q &quot;</span>%%a\&quot;</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">rem 清空含有指定字符串/关键字的文件夹</span><br><span class="line"><span class="keyword">for</span> /f <span class="string">&quot;delims=&quot;</span> %%a <span class="keyword">in</span> (<span class="string">&#x27;dir /ad/b/s &quot;*Log*&quot; 2^&gt;nul&#x27;</span>) <span class="keyword">do</span> (</span><br><span class="line">    <span class="keyword">if</span> exist <span class="string">&quot;%%a\&quot; (</span></span><br><span class="line"><span class="string">        echo;clear - &quot;</span>%%a<span class="string">&quot;</span></span><br><span class="line"><span class="string">        rd /s /q &quot;</span>%%a\&quot;</span><br><span class="line">        md <span class="string">&quot;%%a\&quot;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">rem 截取文件夹名中指定字符串/关键字后面的内容</span></span><br><span class="line"><span class="string">rem 替换文件名中指定字符串/关键字为其他内容</span></span><br><span class="line"><span class="string"> (echo;Do While WSH.StdIn.AtEndOfStream^&lt;^&gt;True</span></span><br><span class="line"><span class="string"> echo;    f=replace^(WSH.StdIn.ReadLine,WSH.Arguments^(0^),LCase^(WSH.Arguments^(0^)^),1,-1,1^)</span></span><br><span class="line"><span class="string"> echo;    arr=split^(f,&quot;</span>\&quot;^):fn=arr^(ubound^(arr^)^)</span><br><span class="line"> <span class="built_in">echo</span>;    If WSH.Arguments.Count = 2 Then</span><br><span class="line"> <span class="built_in">echo</span>;        s=replace^(fn,WSH.Arguments^(1^),WSH.Arguments^(0^),1,-1,1^)</span><br><span class="line"> <span class="built_in">echo</span>;    Else</span><br><span class="line"> <span class="built_in">echo</span>;        s=split^(f,LCase^(WSH.Arguments^(0^)^),2^)^(1^)</span><br><span class="line"> <span class="built_in">echo</span>;    End If</span><br><span class="line"> <span class="built_in">echo</span>;    WSH.echo f ^&amp; <span class="string">&quot;|&quot;</span> ^&amp; s</span><br><span class="line"> <span class="built_in">echo</span>;Loop)&gt;<span class="string">&quot;%tmp%\t.t&quot;</span></span><br><span class="line"><span class="keyword">for</span> /f <span class="string">&quot;tokens=1* delims=|&quot;</span> %%a <span class="keyword">in</span> (<span class="string">&#x27;dir /ad/b/s &quot;*Kff*&quot; 2^&gt;nul^|cscript -nologo -e:vbscript &quot;%tmp%\t.t&quot; &quot;Kff&quot;&#x27;</span>) <span class="keyword">do</span> (</span><br><span class="line">    <span class="keyword">for</span> /f <span class="string">&quot;tokens=1* delims=|&quot;</span> %%c <span class="keyword">in</span> (<span class="string">&#x27;dir /a-d/b/s &quot;%%a\*cv*&quot; 2^&gt;nul^|cscript -nologo -e:vbscript &quot;%tmp%\t.t&quot; &quot;%%b&quot; &quot;cv&quot;&#x27;</span>) <span class="keyword">do</span> (</span><br><span class="line">        <span class="built_in">echo</span>;<span class="string">&quot;%%c&quot;</span> --^&gt; <span class="string">&quot;%%d&quot;</span></span><br><span class="line">        ren <span class="string">&quot;%%c&quot;</span> <span class="string">&quot;%%d&quot;</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">:end</span><br><span class="line"><span class="built_in">echo</span>;%<span class="comment">#% +%$%%$% %z%</span></span><br><span class="line">pause</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<h4 id="choice"><a href="#choice" class="headerlink" title="choice"></a>choice</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ choice /?</span><br><span class="line">CHOICE [/C choices] [/N] [/CS] [/T timeout /D choice] [/M text]</span><br><span class="line"></span><br><span class="line">描述:</span><br><span class="line">    该工具允许用户从选择列表选择一个项目并返回所选项目的索引。</span><br><span class="line"></span><br><span class="line">参数列表:</span><br><span class="line">   /C    choices       指定要创建的选项列表。默认列表是 <span class="string">&quot;YN&quot;</span>。</span><br><span class="line">   /N                  在提示符中隐藏选项列表。提示前面的消息得到显示，</span><br><span class="line">                       选项依旧处于启用状态。</span><br><span class="line">   /CS                 允许选择分大小写的选项。在默认情况下，这个工具</span><br><span class="line">                       是不分大小写的。</span><br><span class="line">   /T    timeout       做出默认选择之前，暂停的秒数。可接受的值是从 0</span><br><span class="line">                       到 9999。如果指定了 0，就不会有暂停，默认选项</span><br><span class="line">                       会得到选择。</span><br><span class="line">   /D    choice        在 nnnn 秒之后指定默认选项。字符必须在用 /C 选</span><br><span class="line">                       项指定的一组选择中; 同时，必须用 /T 指定 nnnn。</span><br><span class="line">   /M    text          指定提示之前要显示的消息。如果没有指定，工具只</span><br><span class="line">                       显示提示。</span><br><span class="line">   /?                  显示此帮助消息。</span><br><span class="line"></span><br><span class="line">   注意:</span><br><span class="line">   ERRORLEVEL 环境变量被设置为从选择集选择的键索引。列出的第一个选</span><br><span class="line">   择返回 1，第二个选择返回 2，等等。如果用户按的键不是有效的选择，</span><br><span class="line">   该工具会发出警告响声。如果该工具检测到错误状态，它会返回 255 的</span><br><span class="line">   ERRORLEVEL 值。如果用户按 Ctrl+Break 或 Ctrl+C 键，该工具会返回 0</span><br><span class="line">   的 ERRORLEVEL 值。在一个批程序中使用 ERRORLEVEL 参数时，将参数降</span><br><span class="line">   序排列。</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line">   CHOICE /?</span><br><span class="line">   CHOICE /C YNC /M <span class="string">&quot;确认请按 Y，否请按 N，或者取消请按 C。&quot;</span></span><br><span class="line">   CHOICE /T 10 /C ync /CS /D y</span><br><span class="line">   CHOICE /C ab /M <span class="string">&quot;选项 1 请选择 a，选项 2 请选择 b。&quot;</span></span><br><span class="line">   CHOICE /C ab /N /M <span class="string">&quot;选项 1 请选择 a，选项 2 请选择 b。&quot;</span></span><br><span class="line"></span><br><span class="line">choice /C YN /T 10 /D N /M <span class="string">&quot;是否删除*.exe *.rc&quot;</span></span><br><span class="line"><span class="keyword">if</span> errorlevel 2 goto opll </span><br><span class="line"><span class="keyword">if</span> errorlevel 1 (<span class="built_in">echo</span> 删除 exe</span><br><span class="line"><span class="built_in">echo</span> 删除 rc)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>errorlevel</code> 判断的不是 字符而是字符所在的序号  比如这里的<code>Y</code>是<code>1</code> 所以<code>1</code>是执行<code>Yes</code>的结果</li>
</ul>
<h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><ul>
<li>一些实用的<code>bat</code>脚本</li>
</ul>
<h4 id="删除Qt编译构建冗余文件"><a href="#删除Qt编译构建冗余文件" class="headerlink" title="删除Qt编译构建冗余文件"></a>删除Qt编译构建冗余文件</h4><ul>
<li>Qt 构建信息删除脚本  <code>qtclear.bat</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">del *.o         /s</span><br><span class="line">del *.moc       /s</span><br><span class="line">del moc_*.cpp   /s</span><br><span class="line">del moc_*.h     /s</span><br><span class="line">del *.obj   	/s</span><br><span class="line">del moc_*.obj   /s</span><br><span class="line">del qrc_*.cpp   /s</span><br><span class="line">del ui_*.h      /s</span><br><span class="line">del Makefile*   /s</span><br><span class="line">del *.cache     /s</span><br><span class="line">del *.stash     /s</span><br><span class="line">::del *.rc        /s</span><br><span class="line">del *.Debug     /s</span><br><span class="line">del *.Release   /s</span><br><span class="line">::del *.exe       /s</span><br><span class="line">del *.pro.user	/s</span><br><span class="line">del *.pro.user.*/s</span><br><span class="line">del *.qbs.user  /s</span><br><span class="line">del *.qbs.user.*/s</span><br><span class="line">::del  build-*    /s</span><br><span class="line">		  </span><br><span class="line">::pause</span><br></pre></td></tr></table></figure>

<ul>
<li>Qt 构建信息删除脚本 因为有时候删除程序创建的文件需要管理员权限 便有了以下脚本 <code>del_build_pro.bat</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 注意：删除后不可恢复 请谨慎操作！</span><br><span class="line"><span class="built_in">echo</span> 1、删除当前路径下所有Qt项目构建中产生的文件(.o .obj moc等))</span><br><span class="line"><span class="built_in">echo</span> 2、删除当前路径下所有bulid-*及其子文件夹</span><br><span class="line">choice /C 12 /T 20 /D 1 /M <span class="string">&quot;1、删除Qt构建文件(默认)  2、删除bulid-*文件夹&quot;</span></span><br><span class="line"><span class="keyword">if</span> errorlevel 2 goto op2</span><br><span class="line"><span class="keyword">if</span> errorlevel 1 goto op1</span><br><span class="line"></span><br><span class="line">:op1</span><br><span class="line">del *.o         /s</span><br><span class="line">del *.moc       /s</span><br><span class="line">del moc_*.cpp   /s</span><br><span class="line">del moc_*.h     /s</span><br><span class="line">del *.obj   	/s</span><br><span class="line">del *.pdb		/s</span><br><span class="line">del *.ilk		/s</span><br><span class="line">del moc_*.obj   /s</span><br><span class="line">del qrc_*.cpp   /s</span><br><span class="line">del ui_*.h      /s</span><br><span class="line">del Makefile*   /s</span><br><span class="line">del *.cache     /s</span><br><span class="line">del *.stash     /s</span><br><span class="line">del *.Debug     /s</span><br><span class="line">del *.Release   /s</span><br><span class="line">choice /C YN /T 10 /D N /M <span class="string">&quot;是否删除*.exe *.rc&quot;</span></span><br><span class="line"><span class="keyword">if</span> errorlevel 2 goto opll </span><br><span class="line"><span class="keyword">if</span> errorlevel 1 (del *.rc /s</span><br><span class="line">del *.exe /s)</span><br><span class="line"></span><br><span class="line">:opll</span><br><span class="line">choice /C YN /T 10 /D N /M <span class="string">&quot;是否删除*.user&quot;</span></span><br><span class="line"><span class="keyword">if</span> errorlevel 2 goto end</span><br><span class="line"><span class="keyword">if</span> errorlevel 1 (del *.pro.user	/s</span><br><span class="line">del *.pro.user.*/s</span><br><span class="line">del *.qbs.user  /s</span><br><span class="line">del *.qbs.user.*/s)</span><br><span class="line">goto end </span><br><span class="line"></span><br><span class="line">:op2</span><br><span class="line"><span class="keyword">for</span> /f <span class="string">&quot;delims=&quot;</span> %%i <span class="keyword">in</span> (<span class="string">&#x27;dir /ad/b/s &quot;build-*-*&quot; 2^&gt;nul&#x27;</span>) <span class="keyword">do</span> ( rd /s /q <span class="string">&quot;%%i&quot;</span>)</span><br><span class="line">goto end </span><br><span class="line"></span><br><span class="line">:end</span><br><span class="line">rem pause</span><br></pre></td></tr></table></figure>

<h4 id="Qt打包脚本"><a href="#Qt打包脚本" class="headerlink" title="Qt打包脚本"></a>Qt打包脚本</h4><ul>
<li>这个脚本命令本质上是执行<code>windeployqt.exe</code>将Qt的依赖项复制到exe目录下</li>
<li>不同人的安装版本或路径不一样需要稍作修改</li>
<li>可结合一些打包软件(NSIS)一起使用正真实现一键打包</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">::设置Qt安装目录</span><br><span class="line"><span class="built_in">set</span> qt_dir=D:\Qt\Qt5.12.10\5.12.10\</span><br><span class="line">::默认构建器名称</span><br><span class="line">::不同的Qt版本编译器名称不同可根据需求改变 kit 变量</span><br><span class="line"><span class="built_in">set</span> kit = msvc2015_64</span><br><span class="line"><span class="built_in">echo</span> Qt windeployqt 打包脚本</span><br><span class="line"><span class="built_in">echo</span> msvc2015_64(默认编译器)</span><br><span class="line">choice /C 12345 /T 5 /D 3 /M <span class="string">&quot;1、mingw73_32  2、mingw73_64 3、msvc2015_64 4、msvc2017 5、msvc2017_64&quot;</span></span><br><span class="line">::<span class="built_in">set</span><span class="string">&quot;=&quot;</span>两端不能有空格</span><br><span class="line">::choice 如果不选择默认执行下一条指令(这里是3)</span><br><span class="line"><span class="keyword">if</span> errorlevel 3 (<span class="built_in">set</span> kit=msvc2015_64</span><br><span class="line">goto wdp)</span><br><span class="line"><span class="keyword">if</span> errorlevel 1 (<span class="built_in">set</span> kit=mingw73_32</span><br><span class="line">goto wdp)</span><br><span class="line"><span class="keyword">if</span> errorlevel 2 (<span class="built_in">set</span> kit=mingw73_64</span><br><span class="line">goto wdp)</span><br><span class="line"><span class="keyword">if</span> errorlevel 4 (<span class="built_in">set</span> kit=msvc2017</span><br><span class="line">goto wdp)</span><br><span class="line"><span class="keyword">if</span> errorlevel 5 (<span class="built_in">set</span> kit=msvc2017_64</span><br><span class="line">goto wdp)</span><br><span class="line"></span><br><span class="line">:wdp</span><br><span class="line"><span class="built_in">set</span> windeployqt_dir=%qt_dir%%kit%\bin\windeployqt.exe</span><br><span class="line">::<span class="built_in">echo</span> %windeployqt_dir%</span><br><span class="line"><span class="keyword">for</span> /r <span class="string">&quot;%cd%&quot;</span> %%i <span class="keyword">in</span> (*.exe) <span class="keyword">do</span> (%windeployqt_dir% <span class="string">&quot;%%~nxi&quot;</span>)</span><br><span class="line">::pause</span><br></pre></td></tr></table></figure>

<h4 id="删除Keil的编译调试信息"><a href="#删除Keil的编译调试信息" class="headerlink" title="删除Keil的编译调试信息"></a>删除Keil的编译调试信息</h4><ul>
<li><code>keilkilll.bat</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">del *.bak /s</span><br><span class="line">del *.ddk /s</span><br><span class="line">del *.edk /s</span><br><span class="line">del *.lst /s</span><br><span class="line">del *.lnp /s</span><br><span class="line">del *.mpf /s</span><br><span class="line">del *.mpj /s</span><br><span class="line">del *.obj /s</span><br><span class="line">del *.om	f /s</span><br><span class="line">::del *.opt /s  ::不允许删除JLINK的设置</span><br><span class="line">del *.plg /s</span><br><span class="line">del *.rpt /s</span><br><span class="line">del *.tmp /s</span><br><span class="line">del *.__i /s</span><br><span class="line">del *.crf /s</span><br><span class="line">del *.o /s</span><br><span class="line">del *.d /s</span><br><span class="line">del *.axf /s</span><br><span class="line">del *.tra /s</span><br><span class="line">del *.dep /s           </span><br><span class="line">del JLinkLog.txt /s</span><br><span class="line"></span><br><span class="line">del *.iex /s</span><br><span class="line">del *.htm /s</span><br><span class="line">del *.sct /s</span><br><span class="line">del *.map /s</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<h4 id="获取电脑信息"><a href="#获取电脑信息" class="headerlink" title="获取电脑信息"></a>获取电脑信息</h4><ul>
<li>脚本源自网络(记不住是那篇文章了)稍作修改 <code>getPcInfo.bat</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> on</span><br><span class="line"><span class="built_in">echo</span> 开始获取本机信息，请稍等......</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>  exist .\ComputerInfos.txt (</span><br><span class="line">	del .\ComputerInfos.txt </span><br><span class="line">) <span class="keyword">else</span> (</span><br><span class="line">rem 查看本机系统详细信息</span><br><span class="line"><span class="built_in">echo</span> 1-本机系统详细信息 &gt;&gt; .\ComputerInfos.txt </span><br><span class="line">systeminfo &gt;&gt; .\ComputerInfos.txt </span><br><span class="line"> </span><br><span class="line">rem 查看本机CPU信息</span><br><span class="line"><span class="built_in">echo</span> 2-本机CPU序列号 &gt;&gt; .\ComputerInfos.txt </span><br><span class="line">wmic cpu get processorid &gt;&gt; .\ComputerInfos.txt </span><br><span class="line"> </span><br><span class="line">rem 2-查看本机主板信息</span><br><span class="line"><span class="built_in">echo</span> 主板信息（主板厂家、系统序号、主板序列号、主板版本）&gt;&gt; .\ComputerInfos.txt</span><br><span class="line">wmic baseboard get Manufacturer, Product, SerialNumber, Version &gt;&gt; .\ComputerInfos.txt </span><br><span class="line"> </span><br><span class="line">rem 3-查看本机产品信息</span><br><span class="line"><span class="built_in">echo</span> 本机信息（本机序列号、品牌、型号）&gt;&gt; .\ComputerInfos.txt</span><br><span class="line">wmic csproduct get IdentifyingNumber,Vendor, Version &gt;&gt; .\ComputerInfos.txt </span><br><span class="line"> </span><br><span class="line">rem 4-查看本机BIOS信息</span><br><span class="line"><span class="built_in">echo</span> 本机BIOS信息（本机BIOS序列号）&gt;&gt; .\ComputerInfos.txt</span><br><span class="line">wmic bios get serialnumber &gt;&gt; .\ComputerInfos.txt </span><br><span class="line"> </span><br><span class="line">rem 查看本机系统信息dxdiag </span><br><span class="line"> </span><br><span class="line">rem 5-查看本机的所有网络信息</span><br><span class="line"><span class="built_in">echo</span> 本机所有网络信息 &gt;&gt; .\ComputerInfos.txt</span><br><span class="line">ipconfig /all &gt;&gt; .\ComputerInfos.txt </span><br><span class="line"></span><br><span class="line">rem 5-查看本机的所有网络信息</span><br><span class="line"><span class="built_in">echo</span> 本机所在网络信息 &gt;&gt; .\ComputerInfos.txt</span><br><span class="line">arp /a &gt;&gt; .\ComputerInfos.txt </span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;===================本机信息保存在 .\ComputerInfos.txt================ &quot;</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line">rem pause</span><br></pre></td></tr></table></figure>

<h4 id="Bat延时"><a href="#Bat延时" class="headerlink" title="Bat延时"></a>Bat延时</h4><ul>
<li>源自网络</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> /p delay=请输入需延迟的毫秒数：</span><br><span class="line"><span class="built_in">set</span> TotalTime=0</span><br><span class="line"><span class="built_in">set</span> NowTime=%time%</span><br><span class="line">::读取起始时间，时间格式为：13:01:05.95</span><br><span class="line"><span class="built_in">echo</span> 程序开始时间：%NowTime%</span><br><span class="line">:delay_continue</span><br><span class="line"><span class="built_in">set</span> /a minute1=1%NowTime:~3,2%-100</span><br><span class="line">::读取起始时间的分钟数</span><br><span class="line"><span class="built_in">set</span> /a second1=1%NowTime:~-5,2%%NowTime:~-2%0-100000</span><br><span class="line">::将起始时间的秒数转为毫秒</span><br><span class="line"><span class="built_in">set</span> NowTime=%time%</span><br><span class="line"><span class="built_in">set</span> /a minute2=1%NowTime:~3,2%-100</span><br><span class="line">:: 读取现在时间的分钟数</span><br><span class="line"><span class="built_in">set</span> /a second2=1%NowTime:~-5,2%%NowTime:~-2%0-100000</span><br><span class="line">::将现在时间的秒数转为毫秒</span><br><span class="line"><span class="built_in">set</span> /a TotalTime+=(%minute2%-%minute1%+60)%%60*60000+%second2%-%second1%</span><br><span class="line"><span class="keyword">if</span> %TotalTime% lss %delay% goto delay_continue</span><br><span class="line"><span class="built_in">echo</span> 程序结束时间：%time%</span><br><span class="line"><span class="built_in">echo</span> 设定延迟时间：%delay%毫秒</span><br><span class="line"><span class="built_in">echo</span> 实际延迟时间：%TotalTime%毫秒</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<h4 id="文件名遍历"><a href="#文件名遍历" class="headerlink" title="文件名遍历"></a>文件名遍历</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> source_dir=<span class="string">&quot;.\&quot;</span></span><br><span class="line"><span class="string">set out_file = &quot;</span>info.txt<span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for /R %source_dir% %%f in (*.dll *.bat) do (</span></span><br><span class="line"><span class="string">    echo 完整路径信息: %%f &gt;&gt; info.txt</span></span><br><span class="line"><span class="string">    echo 所在目录信息: %%~dpf &gt;&gt; info.txt</span></span><br><span class="line"><span class="string">    echo 文件前缀名称: %%~nf &gt;&gt; info.txt</span></span><br><span class="line"><span class="string">    echo 文件后缀名称: %%~xf &gt;&gt; info.txt</span></span><br><span class="line"><span class="string">    echo 完整文件名称: %%~nxf &gt;&gt; info.txt</span></span><br><span class="line"><span class="string">    echo 不带后缀路径: %%~dpnf &gt;&gt; info.txt</span></span><br><span class="line"><span class="string">    echo 文件修改时间: %%~tf &gt;&gt; info.txt</span></span><br><span class="line"><span class="string">    echo 文件内容大小: %%~zf Byte &gt;&gt; info.txt</span></span><br><span class="line"><span class="string">	echo. &gt;&gt; info.txt </span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">::pause</span></span><br></pre></td></tr></table></figure>

<h4 id="获取文件的详细信息"><a href="#获取文件的详细信息" class="headerlink" title="获取文件的详细信息"></a>获取文件的详细信息</h4><ul>
<li>类似于选择文件右键属性-&gt;详细信息 该脚本<code>getdllinfo.bat</code>会产生一个当前时间的<code>getdllinfo.bat</code></li>
<li>这里获取的是<code>.exe</code> <code>.dll</code> 可以换为其它类型文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> source_dir = <span class="string">&quot;.\&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if  exist .\dllinfo-%date:~0,4%-%date:~5,2%-%date:~8,2%.txt (</span></span><br><span class="line"><span class="string">	del .\dllinfo-%date:~0,4%-%date:~5,2%-%date:~8,2%.txt </span></span><br><span class="line"><span class="string">) </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo 获取详细信息中请稍后...</span></span><br><span class="line"><span class="string">for /R %source_dir% %%i in (*.dll *.exe) do (</span></span><br><span class="line"><span class="string">	powershell &quot;</span>(Get-Item -path “%%i”).VersionInfo | Format-List<span class="string">&quot; &gt;&gt; &quot;</span>dllinfo-%date:~0,4%-%date:~5,2%-%date:~8,2%.txt<span class="string">&quot;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">echo 获取完成</span></span><br><span class="line"><span class="string">rem pause</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这种方式用起来还存在问题</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> EXE=<span class="string">&#x27;.\xxx.exe&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>  exist .\info.txt (</span><br><span class="line">	del .\info.txt</span><br><span class="line">) </span><br><span class="line">rem <span class="built_in">echo</span> var =  文件名</span><br><span class="line">powershell <span class="string">&quot;(Get-Item -path %EXE%).Name&quot;</span> &gt;&gt;%var%info.txt</span><br><span class="line"></span><br><span class="line">rem <span class="built_in">echo</span> 文件说明&gt;&gt;.\info.txt </span><br><span class="line">powershell <span class="string">&quot;(Get-Item -path %EXE%).VersionInfo.FileDescription&quot;</span> &gt;&gt; info.txt</span><br><span class="line"></span><br><span class="line">rem <span class="built_in">echo</span> 件版本&gt;&gt;.\info.txt</span><br><span class="line">powershell <span class="string">&quot;(Get-Item -path %EXE%).VersionInfo.FileVersion&quot;</span> &gt;&gt; info.txt</span><br><span class="line"></span><br><span class="line">rem <span class="built_in">echo</span> 产品名称&gt;&gt;.\info.txt</span><br><span class="line">powershell <span class="string">&quot;(Get-Item -path %EXE%).VersionInfo.ProductName&quot;</span> &gt;&gt; info.txt</span><br><span class="line"></span><br><span class="line">rem <span class="built_in">echo</span> 产品版本&gt;&gt;.\info.txt</span><br><span class="line">powershell <span class="string">&quot;(Get-Item -path %EXE%).VersionInfo.ProductVersion&quot;</span> &gt;&gt; info.txt</span><br><span class="line"></span><br><span class="line">rem <span class="built_in">echo</span> 公司名字&gt;&gt;</span><br><span class="line">powershell <span class="string">&quot;(Get-Item -path %EXE%).VersionInfo.CompanyName&quot;</span> &gt;&gt; info.txt</span><br><span class="line"></span><br><span class="line">rem <span class="built_in">echo</span> 版权信息&gt;&gt;</span><br><span class="line">powershell <span class="string">&quot;(Get-Item -path %EXE%).VersionInfo.LegalCopyright&quot;</span> &gt;&gt; info.txt</span><br><span class="line"></span><br><span class="line">rem <span class="built_in">echo</span> 大小&gt;&gt;.\info.txt </span><br><span class="line">powershell <span class="string">&quot;(Get-Item -path %EXE%).Length&quot;</span> &gt;&gt; info.txt</span><br><span class="line"></span><br><span class="line">rem <span class="built_in">echo</span> 语言&gt;&gt;.\info.txt </span><br><span class="line">powershell <span class="string">&quot;(Get-Item -path %EXE%).VersionInfo.Language&quot;</span> &gt;&gt; info.txt</span><br><span class="line"></span><br><span class="line">rem <span class="built_in">echo</span> 原始文件名&gt;&gt;.\info.txt </span><br><span class="line">powershell <span class="string">&quot;(Get-Item -path %EXE%).VersionInfo.OriginalFileName&quot;</span> &gt;&gt; info.txt</span><br><span class="line"></span><br><span class="line">rem <span class="built_in">echo</span> 创建时间&gt;&gt;.\info.txt </span><br><span class="line">powershell <span class="string">&quot;(Get-Item -path %EXE%).CreationTime&quot;</span> &gt;&gt; info.txt</span><br><span class="line">rem <span class="built_in">echo</span> 修改时间&gt;&gt;.\info.txt</span><br><span class="line">powershell <span class="string">&quot;(Get-Item -path %EXE%).LastWriteTime&quot;</span> &gt;&gt; info.txt</span><br><span class="line">rem <span class="built_in">echo</span> 访问时间&gt;&gt;.\info.txt</span><br><span class="line">powershell <span class="string">&quot;(Get-Item -path %EXE%).LastAccessTime&quot;</span> &gt;&gt; info.txt</span><br></pre></td></tr></table></figure>

<h4 id="Git-提交脚本"><a href="#Git-提交脚本" class="headerlink" title="Git 提交脚本"></a>Git 提交脚本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> Git Commit提交脚本</span><br><span class="line">choice /C 12 /T 5 /D 1 /M <span class="string">&quot;1、日常提交（默认）2、添加提交信息&quot;</span></span><br><span class="line">:: 选项需要从大到小</span><br><span class="line"><span class="keyword">if</span> errorlevel 2 (<span class="built_in">set</span> /p commit_msg=请输入Commit提交信息:</span><br><span class="line">goto git_commit)</span><br><span class="line"><span class="keyword">if</span> errorlevel 1 (<span class="built_in">set</span> commit_msg=%COMPUTERNAME%_%USERNAME%-%date:~0,4%%date:~5,2%%date:~8,2%</span><br><span class="line">goto git_commit)</span><br><span class="line">:git_commit</span><br><span class="line">git status</span><br><span class="line">git add .</span><br><span class="line">git commit -am<span class="string">&quot;%message%&quot;</span></span><br><span class="line"><span class="built_in">set</span> /p result=是否需要提交到远程仓库？Y/N </span><br><span class="line">:: /i 不区分大小写</span><br><span class="line"><span class="keyword">if</span> /i “%result%”==“Y” (git push gitee main)</span><br><span class="line">::pause</span><br></pre></td></tr></table></figure>

<h4 id="系统任务进程处理"><a href="#系统任务进程处理" class="headerlink" title="系统任务进程处理"></a>系统任务进程处理</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出加载了 xxx_api.dll 的所有任务 格式控制为csv</span></span><br><span class="line">tasklist /m xxx_api.dll /fo csv</span><br><span class="line"><span class="comment"># 格式控制输出不显示列标题</span></span><br><span class="line">tasklist /m xxx_api.dll /fo csv /nh</span><br><span class="line"><span class="comment"># 列出程序名等于XXX.exe的所有任务 格式控制输出不显示列标题</span></span><br><span class="line">tasklist /<span class="keyword">fi</span> <span class="string">&quot;IMAGENAME eq XXX.exe&quot;</span> /fo csv  /nh</span><br><span class="line"><span class="comment"># 列出程序名等于XXX.exe的所有任务</span></span><br><span class="line">tasklist /fo csv /nh /<span class="keyword">fi</span> <span class="string">&quot;IMAGENAME eq XXX.exe&quot;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://learn.microsoft.com/zh-cn/windows-server/administration/windows-commands/tasklist">tasklist | Microsoft Learn</a></p>
<p><a href="https://learn.microsoft.com/zh-cn/windows-server/administration/windows-commands/taskkill">taskkill | Microsoft Learn</a></p>
<h4 id="Netsh-命令"><a href="#Netsh-命令" class="headerlink" title="Netsh 命令"></a>Netsh 命令</h4><p>Network shell (netsh) 是一种命令行实用工具，使用该工具，你可以在运行 Windows Server 的计算机上安装网络通信服务器组件之后配置和显示各种网络通信服务器角色和组件的状态。</p>
<p><a href="https://learn.microsoft.com/zh-cn/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc754516(v=ws.10)">netsh command 参考</a></p>
<h4 id="route命令"><a href="#route命令" class="headerlink" title="route命令"></a>route命令</h4><p>显示和修改本地 IP 路由表中的项</p>
<p><a href="https://learn.microsoft.com/zh-cn/windows-server/administration/windows-commands/route_ws2008">https://learn.microsoft.com/zh-cn/windows-server/administration/windows-commands/route_ws2008</a></p>
<h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><ul>
<li>中文乱码请使用 ASCII编码</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>ESP8266_Learning快速上手</title>
    <url>/2019/07/17/esp8266%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
    <content><![CDATA[<p> 最近学习了wifi模组的esp8266WiFi模块 这里总结了一些快速上手的教程</p>
<p>一是能帮助一些初学者</p>
<p>二以便自己以后查看。 <span id="more"></span></p>
<h3 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h3><p><a href="https://wiki.ai-thinker.com/_media/esp8266/docs/esp8266_series_modules_user_manual_cn.pdf">按需求参考此文档</a></p>
<h3 id="上电基本测试"><a href="#上电基本测试" class="headerlink" title="上电基本测试"></a>上电基本测试</h3><p>一般情况刚买的模组是已经烧写好了固件的，就是说模组到手了后没意外或别的需求是不需要重烧固件的如有需求</p>
<p>请移步 <a href="http://bbs.ai-thinker.com/forum.php?mod=viewthread&tid=8&extra=page=1">烧录教程</a></p>
<p>若无调试工具请自行到安信可科技下载 <a href="https://wiki.ai-thinker.com/tools">开发工具清单</a></p>
<blockquote>
<p>AT-&gt;ok<br>AT+GMR-&gt;返回版本信息<br>AT+RST-&gt;复位<br>AT+RESTORE-&gt;恢复出厂设置</p>
</blockquote>
<p><img src="/2019/07/17/esp8266%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/image-20221112154217549.png" alt="image-20221112154217549"></p>
<h2 id="STA模式（AT-CWMODE-x3D-1）"><a href="#STA模式（AT-CWMODE-x3D-1）" class="headerlink" title="STA模式（AT+CWMODE&#x3D;1）"></a>STA模式（AT+CWMODE&#x3D;1）</h2><p>串口无线 STA（COM-WIFI STA） 模式，模块作为无线 WIFI STA， 用于连接到无线网<br>络，实现串口与其他设备之间的无线（WIFI） 数据转换互传。该模式下，根据应用场景的<br>不同，可以设置 3 个子模式： TCP 服务器、 TCP 客户端， UDP </p>
<p>此时8266作为TCP服务器</p>
<blockquote>
<table>
<thead>
<tr>
<th>AT指令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>AT+CWMODE&#x3D;1</td>
<td>STA模式</td>
</tr>
<tr>
<td>AT+CWJAP_DEF&#x3D;”AAAAA”,”12345678”</td>
<td>连接对象路由器的 ssid 和password</td>
</tr>
<tr>
<td>AT+CIPMUX&#x3D;1</td>
<td>开启多连接</td>
</tr>
<tr>
<td>AT+CIPSERVER&#x3D;1,8080</td>
<td>开启服务器，端口号为 8080</td>
</tr>
<tr>
<td>AT+CIPSEND&#x3D;0,25</td>
<td>向 ID0 发送 25 字节的数据</td>
</tr>
</tbody></table>
</blockquote>
<h2 id="AP模式-AT-CWMODE-x3D-2"><a href="#AP模式-AT-CWMODE-x3D-2" class="headerlink" title="AP模式(AT+CWMODE&#x3D;2)"></a>AP模式(AT+CWMODE&#x3D;2)</h2><p>我们把模组配置成server 手机配置成client</p>
<p>此时8266作为TCP服务器</p>
<blockquote>
<table>
<thead>
<tr>
<th>AT指令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>AT+CWMODE&#x3D;2</td>
<td>AP模式   （模块作 TCP server）</td>
</tr>
<tr>
<td>AT+CWSAP&#x3D;”ESP8266”,”0123456789”,2,3</td>
<td>创建wifi（ESP8266）,密码，通道号，加密方式</td>
</tr>
<tr>
<td>AT+CIPMUX&#x3D;1</td>
<td>开启多连接</td>
</tr>
<tr>
<td>AT+CIPSERVER&#x3D;1,8080</td>
<td>开启服务器，端口号为 8080（手机&#x2F;电脑连接此热点）</td>
</tr>
<tr>
<td>AT+CIPSEND&#x3D;0,5</td>
<td>传输连接的 id ，发送数据的长度（最大2048）</td>
</tr>
</tbody></table>
<p>注：模组AP模式  默认的IP是192.168.4.1 可以用AT+CIFSR 查看mac地址和IP</p>
<p><img src="/2019/07/17/esp8266%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/image-20221112154246318.png" alt="image-20221112154246318"></p>
<p><img src="/2019/07/17/esp8266%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/image-20221112154303968.png" alt="image-20221112154303968"></p>
</blockquote>
<h2 id="AP-STA模式-AT-CWMODE-x3D-3"><a href="#AP-STA模式-AT-CWMODE-x3D-3" class="headerlink" title="AP+STA模式(AT+CWMODE&#x3D;3)"></a>AP+STA模式(AT+CWMODE&#x3D;3)</h2><p>模组的tcp透传（配置成server不能用透传）<br>首先，把手机接入到一个路由，建议路由不要用 中文名字。<br>这里我们把8266配置成client ，手机软件&#x2F;电脑开启tcp server，完成tcp的透传</p>
<p>此时模组工作在TCP 客户端模式</p>
<blockquote>
<table>
<thead>
<tr>
<th>AT指令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>AT+CWMODE&#x3D;3</td>
<td>AP+STA模式</td>
</tr>
<tr>
<td>AT+CWJAP_DEF&#x3D;”mm8”,”123456789”</td>
<td>连接对象路由器的 ssid 和password（客户端连接wifi，并开启tcp sever 模式连接）</td>
</tr>
<tr>
<td>AT+CIPSTART&#x3D;”TCP”,”192.168.43.41”,8080</td>
<td>手机&#x2F;电脑的ip port</td>
</tr>
<tr>
<td>AT+CIPMODE&#x3D;1</td>
<td>开启透传模式（仅单连接 client 时支持）</td>
</tr>
<tr>
<td>AT+CIPSEND</td>
<td>开始发送数据</td>
</tr>
</tbody></table>
</blockquote>
<p><img src="/2019/07/17/esp8266%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/image-20221112154334512.png" alt="image-20221112154334512"></p>
<p><img src="/2019/07/17/esp8266%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/image-20221112154346273.png" alt="image-20221112154346273"></p>
<h3 id="连接安信可透传云"><a href="#连接安信可透传云" class="headerlink" title="连接安信可透传云"></a>连接安信可透传云</h3><p><a href="http://tt.ai-thinker.com:8000/ttcloud">安信可透传云地址</a></p>
<table>
<thead>
<tr>
<th>AT指令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>AT+CWMODE&#x3D;1</td>
<td>STA模式</td>
</tr>
<tr>
<td>AT+CWJAP_DEF&#x3D;”mm8”,”123456789”</td>
<td>连接对象路由器的 ssid 和password</td>
</tr>
<tr>
<td>AT+CIPMUX&#x3D;0</td>
<td>单连接模式</td>
</tr>
<tr>
<td>AT+CIPMODE&#x3D;1</td>
<td>透传模式</td>
</tr>
<tr>
<td>AT+CIPSTART&#x3D;”TCP”,”22.114.122.174 “,37599</td>
<td>远程云sever IP，端口</td>
</tr>
<tr>
<td>AT+CIPSEND</td>
<td>进入透传</td>
</tr>
</tbody></table>
<p><img src="/2019/07/17/esp8266%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/image-20221112154420717.png" alt="image-20221112154420717"></p>
<p>本文章仅供交流学习</p>
<p><a href="http://bbs.ai-thinker.com/forum.php?mod=viewthread&t&tid=15extra=page=1">本文参考文章</a></p>
<p><a href="https://wiki.ai-thinker.com/esp8266">若要查找更多的资料请参考</a></p>
<p>——-文章中图片均来源于网络如有侵权请联系作者删除</p>
]]></content>
  </entry>
  <entry>
    <title>第一篇文章</title>
    <url>/2019/04/10/frist%20blog/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="随便输入个密码就想骗我？" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6d6b914fcb8955cf5e2f5d4e594a2273b6435dc64fd1fcb97a696e0d4baa6e37">b9375481f1d1062e2ade6f541e30aa31279249e4cf6ba14d84e39a15c0e4a39a425cbef0a9258301b4838771eae055bdfc6aba71296fa83193ee307f6a1ebe4caa2758d9570b05d5908bfc5fdc94e6371412fe6f3aa1db57d2ed5d6a713ed8fa87261f544d42465efddb2df93a35915d87b2153580e898d8b6f061ff28a8d68887aef2cea7f47dbdd837ca756306841396e6b2e360379ed1fcc7e9d324451fe5782b1c013f8342771eb11c2946bc3e540c096ac4875d5f8c27ae664814f0b90f5dbc413ad4cff0b10446d3b0ba342c1ea0e8f1fa5e67eb42921f4c823355965ff7f4bb8923926afa47d5a87851f4cf99151dc6dd14966e5404bc39b67b887381e492a314991cb8c9cc0e734a39261119e3f515d5d1f2241d0e299f8ed176ca84197209bf279800e7a0626597cef134c22fec0f363163ae0180b277833763d66de4ab1f39b82940394b00ca7b32a08309e6c62bdff39b39290a5ac68a363c7b6f1d1fdcacedd4a4f4dd827f335f9f9efb82b39cd4becbdf7e8c49e0899d5a8ee3a66a6c7dd0d270d328d80d93c035834807439560e0b57b6faf6d596782da675deb475e1ea1593b2a05fcae92c6956517803726192d5c1628f5e8582c8d7f35d3d5d2bfdfc701614d191ba58f879056b87fbd1a68b4a8e79b8bfb6ce3af490c22043bff72be8c2cc2aeafc73571f4975d285ed5f326067a939f8ac8d8c32eaee678fba70d849b126ea48dbd2b54191f4a2ce19423ed6ef87af1764109a8a6ca906b131fa1e1234fa796952eff050d61a551f4edb72b0e877bd0aa402848826480c9b3525eda2cd652f8c31395d9d8c191a2a406baa14a25eda99e49cdcb8dce837d522c0361d64cfb1aabea40a79d425aebddcf9b51666dc76787a66d58216e370d67bd8d1f48ba7c9a1a7632bf8f3e4c3a2c5ebc85d034553f963e98f8b95f5413c4dd65b4ad1aed821343592630350074708509215aa9f287e32aa43fe20d224128f3784742221875397d9195e445245acbadeed31cd768f9b8b18e2b18bf0cd34e45423d9b23a6aacb1d05982e51acaa3c7f156cb5d301d80201fd96818bd9f599acd13d0714b2246abdf041c076c9252d61584191654d8122dfab98b0815b198a92c42c6d4e23597f99b0ff55af3eafdec43acd0d75093f5ce57f513c526626d426d42ba4d15534f5972be83b75a195932b00e07e741c90072661150dcc02e96188c9ff97682a2ae4f6e7a522d09082ad723afbbc9f3f2d28444a05f346f8f464bdf1ce880fe42456b09be17d3cef186302048ee9c36afd21054eed65964fdf027c95d8d6cef6a881fc99a734a98907862a4bcb4c2d693309b9fe0edb227ab16dbb119e3cfe4d949aa129f6bb16f60ac6e5b713d4d2adc46afb7e37fb91554241e955a9996d580ac91332066e934dd5f6fe343b78f9c08beb9af6954684105294a7bfa81728af215719ddab910744b75a671ef1011d2ba379e5bcd6710c3aa246eb34d9c3b80644f9f490cec1db68b4d1a4000e56bb09fe625b25199701fdb1ea1111cf4948e5f46e5752ed59e05f</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">就不给你看，除非你有密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>python09</title>
    <url>/2019/10/14/python09/</url>
    <content><![CDATA[<h1 id="Python-Learning"><a href="#Python-Learning" class="headerlink" title="Python  Learning"></a>Python  Learning</h1><h3 id="number"><a href="#number" class="headerlink" title="number"></a>number</h3><p>type（） #数据类型</p>
<p>msg1&#x3D;’hello world’</p>
 <span id="more"></span>

<blockquote>
<p>为什么0. + 0.1 和 0.2 + 0.7 怎么和我们想要的结果不一样？<br>这是因为我们生活中使用的数字都是十进制，在计算机计算的时候会自动转换成<br>二进制的形式(即0和1)， 0.1不会无限循环，而0.2则会变成无线循环的数。运算<br>完成之后再转换成十进制时会对尾部的小数进行截取处理。所以导致了精度的差<br>异，这个在其他语言也是存在的 并不是bug<br>如何解决呢 可以借助Python的Decimal来处理这一问题 </p>
</blockquote>
<h2 id="str"><a href="#str" class="headerlink" title="str"></a>str</h2><p>print(‘%s %s’ %(msg1,msg2))</p>
<p> print(‘{}{}’.format(msg1,msg2)</p>
<p>print(a + ‘ ‘ + b) # 如 果 多 个 字 符 串 + 号 拼 接 ， 会 创 建 多 个 对 象 ，<br>print(a, b)<br>print(‘%s %s’ % (a, b)) # 推 荐 ， 效 率 高<br>print(‘Hello’’ World’)<br>print(‘{} {}’.format(a, b)) # 推 荐 ， 效 率 高<br>print(‘ ‘.join([‘Hello’, ‘World’])) </p>
<h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><blockquote>
<p>list &#x3D; [‘f’, ‘e’, ‘a’, ‘d’, ‘b’, ‘w’, ‘c’]         可重复元素</p>
</blockquote>
<p>list[0] &#x3D; ‘f’  获取元素</p>
<p> list.append(‘q’)    list 末尾添加元素</p>
<p>list.insert(0,’wang’)  指定位置(不可省缺)添加元素     </p>
<p> del   list[0]   删除指定元素</p>
<p>del  list  删除整个list</p>
<p>list.pop()   弹出指定元素 默认-1 （最后一个）</p>
<p>len(list)    返回list长度</p>
<p>‘a’ in list  查询元素是否在list中   是  True   否  F alse</p>
<p>list  分片&#x2F;截取</p>
<p>list[初始索引：终止索引：步长]的方式去完成。步长默认是1 </p>
<p>list[0:6:2]</p>
<blockquote>
<p>list[num:] 表示从num位开始一直到最后，包括num位<br>list[:num] 从起始位置开始，到num位结束，不包括第num位<br>list[num: -1] 表示从num为开始，一直到最后一个，不包括最后一个<br>list[:] 等同于list返回全部<br>list[::-1] 表示num1到num2倒叙排列，如果[::-1]表示全部倒序 </p>
</blockquote>
<h4 id="list-相加"><a href="#list-相加" class="headerlink" title="list 相加"></a>list 相加</h4><p>list1 +  list2        产生一个新list     list1，list2不变</p>
<p>list1.extend(list2)   拼接元素    不会产生新的对象   拼接结果在list1中  list2 不变 </p>
<p>list.count(‘a’)      统计相同元素个数 </p>
<p>list.sort()     list 排序   默认升序</p>
<p>list.sort(reverse&#x3D;True)    降序</p>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>集合中的元素不可以重复！！ </p>
<p>创建set </p>
<p>name &#x3D; set()     空集  不能用 {}  </p>
<p>非空集合创建</p>
<blockquote>
<p>name &#x3D; {‘tom’, ‘lily’, ‘lucy’} </p>
</blockquote>
<blockquote>
<p>name &#x3D; set([‘tom’, ‘lily’, ‘lucy’]) </p>
</blockquote>
<h6 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h6><p>name.add(‘wang’)</p>
<p>a.update({‘z’, ‘x’}) </p>
<p>a.update([‘j’,’k’]) </p>
<p>a.remove(‘b’)    移除</p>
<p>discard(元素),和remove的区别在于当删除不存在的元素则不会报错 </p>
<p>a.discard(‘a’) </p>
<p>a.pop()   集合中随机弹出   不能弹出指定元素</p>
<h4 id="set-运算"><a href="#set-运算" class="headerlink" title="set 运算"></a>set 运算</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; &gt; &gt; set1 = &#123;&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;&#125;</span><br><span class="line">&gt; &gt; &gt; set2 = &#123;&#x27;a&#x27;, &#x27;d&#x27;, &#x27;z&#x27;, &#x27;x&#x27;&#125;</span><br><span class="line">&gt; &gt; &gt; 在 集 合 set1 而 不 在 set2 中 的 元 素</span><br><span class="line"></span><br><span class="line">&gt; &gt; &gt; set1 - set2</span><br><span class="line">&gt; &gt; &gt; &#123;&#x27;b&#x27;, &#x27;c&#x27;&#125;</span><br><span class="line">&gt; &gt; &gt; set1 和 set2 的 所 有 元 素 ， 合 集</span><br><span class="line"></span><br><span class="line">&gt; &gt; &gt; set1 | set2</span><br><span class="line">&gt; &gt; &gt; &#123;&#x27;d&#x27;, &#x27;a&#x27;, &#x27;x&#x27;, &#x27;c&#x27;, &#x27;z&#x27;, &#x27;b&#x27;&#125;</span><br><span class="line">&gt; &gt; &gt; 不 同 时 在 set1 和 set2 的 元 素</span><br><span class="line"></span><br><span class="line">&gt; &gt; &gt; set1 ^ set2</span><br><span class="line">&gt; &gt; &gt; &#123;&#x27;x&#x27;, &#x27;c&#x27;, &#x27;z&#x27;, &#x27;b&#x27;&#125;</span><br><span class="line">&gt; &gt; &gt; 同 时 在 set1 和 set2 的 元 素 , 交 集</span><br><span class="line"></span><br><span class="line">&gt; &gt; &gt; set1 &amp; set2</span><br><span class="line">&gt; &gt; &gt; &#123;&#x27;d&#x27;, &#x27;a&#x27;&#125; </span><br></pre></td></tr></table></figure>

<p>交 集</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; &gt; &gt; set1.intersection(set2)</span><br><span class="line">&gt; &gt; &gt; &#123;&#x27;d&#x27;, &#x27;a&#x27;&#125;</span><br><span class="line">&gt; &gt; &gt; 合 集</span><br><span class="line"></span><br><span class="line">&gt; &gt; &gt; set1.union(set2)</span><br><span class="line">&gt; &gt; &gt; &#123;&#x27;d&#x27;, &#x27;a&#x27;, &#x27;x&#x27;, &#x27;c&#x27;, &#x27;z&#x27;, &#x27;b&#x27;&#125;</span><br><span class="line">&gt; &gt; &gt; 差 集</span><br><span class="line"></span><br><span class="line">&gt; &gt; &gt; set1.difference(set2)</span><br><span class="line">&gt; &gt; &gt; &#123;&#x27;b&#x27;, &#x27;c&#x27;&#125; </span><br></pre></td></tr></table></figure>

<p>a.clear()   清空集合</p>
<p>获取集合的长度，判断元素是否在集合中与上面的列表方法一样。 </p>
<h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>元组和列表基本类似，区别在于元组一旦创建就不能再修改。所以它没有新增修改<br>的方法。这样做能够使数据更安全，如果可以尽量使用tuple(元组) </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tuple = (&#x27;a&#x27;,&#x27;b&#x27;)</span><br><span class="line">type(tuple)</span><br><span class="line">&lt;class &#x27;tuple&#x27;&gt;</span><br></pre></td></tr></table></figure>



<h5 id="仅有1个元素的创建"><a href="#仅有1个元素的创建" class="headerlink" title="仅有1个元素的创建"></a>仅有1个元素的创建</h5><p>只有一个元素创建元组的时候也需要加上逗号， </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; t = (1,)</span><br><span class="line"></span><br><span class="line">&gt; type(t)</span><br><span class="line">&gt; &lt;class &#x27;tuple&#x27; </span><br></pre></td></tr></table></figure>



<h4 id="tuple其实也是‘可变’的"><a href="#tuple其实也是‘可变’的" class="headerlink" title="tuple其实也是‘可变’的"></a>tuple其实也是‘可变’的</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list</span><br><span class="line">[&#x27;e&#x27;, &#x27;a&#x27;, &#x27;d&#x27;, &#x27;b&#x27;, &#x27;w&#x27;, &#x27;c&#x27;]</span><br><span class="line">t</span><br><span class="line">&#x27;a&#x27;</span><br><span class="line">t=(&#x27;a&#x27;,list)</span><br><span class="line">t</span><br><span class="line">(&#x27;a&#x27;, [&#x27;e&#x27;, &#x27;a&#x27;, &#x27;d&#x27;, &#x27;b&#x27;, &#x27;w&#x27;, &#x27;c&#x27;])</span><br><span class="line">list[0]=&#x27;wang&#x27;</span><br><span class="line">t</span><br><span class="line">(&#x27;a&#x27;, [&#x27;wang&#x27;, &#x27;a&#x27;, &#x27;d&#x27;, &#x27;b&#x27;, &#x27;w&#x27;, &#x27;c&#x27;])</span><br></pre></td></tr></table></figure>

<p>tuple不可修改，其实指的是它的引用是不可改变，在上面的过程中tuple最后一<br>个元素的引用始终指向的是list，并没有改变。改变的只是list的值 </p>
<h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><h4 id="1、与列表类似。比如通过索引获取元素，切片"><a href="#1、与列表类似。比如通过索引获取元素，切片" class="headerlink" title="1、与列表类似。比如通过索引获取元素，切片"></a>1、与列表类似。比如通过索引获取元素，切片</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; t = (&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;a&#x27;)</span><br><span class="line">&gt; t</span><br><span class="line">&gt; (&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;a&#x27;)</span><br><span class="line">&gt; t[2]</span><br><span class="line">&gt; &#x27;c&#x27;</span><br><span class="line">&gt; t[-3]</span><br><span class="line">&gt; &#x27;d&#x27;</span><br><span class="line">&gt; t[1: 2]</span><br><span class="line">&gt; (&#x27;b&#x27;,) </span><br><span class="line"></span><br><span class="line">&gt; t[1: 5]</span><br><span class="line">&gt; (&#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;)</span><br><span class="line"></span><br><span class="line">&gt; t[5:1: -1]</span><br><span class="line">&gt; (&#x27;a&#x27;, &#x27;e&#x27;, &#x27;d&#x27;, &#x27;c&#x27;) **</span><br></pre></td></tr></table></figure>

<h4 id="元组拼接"><a href="#元组拼接" class="headerlink" title="元组拼接"></a>元组拼接</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t1 = (&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;)</span><br><span class="line">t2 = (&#x27;m&#x27;, &#x27;n&#x27;, &#x27;v&#x27;)</span><br><span class="line">t1 + t2</span><br><span class="line">(&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;m&#x27;, &#x27;n&#x27;, &#x27;v&#x27;)</span><br><span class="line">t1 * 3</span><br><span class="line">(&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;) </span><br></pre></td></tr></table></figure>



<h4 id="循环获取元素"><a href="#循环获取元素" class="headerlink" title="循环获取元素"></a>循环获取元素</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t = (&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;a&#x27;)</span><br><span class="line">for i in t:</span><br><span class="line">... print(i)</span><br><span class="line">...</span><br><span class="line">a</span><br><span class="line"></span><br><span class="line">b</span><br><span class="line"></span><br><span class="line">c</span><br><span class="line"></span><br><span class="line">d</span><br><span class="line"></span><br><span class="line">e</span><br><span class="line"></span><br><span class="line">a </span><br></pre></td></tr></table></figure>



<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>dict(字典) </p>
<p>{‘键’: ‘值’， ‘键’: ‘值’， ‘键’: ‘值’} </p>
<p>dict1 &#x3D; {}   创建空字典</p>
<p>dict2 &#x3D; {‘name’: ‘xiaoming’, ‘age’: 18} </p>
<h5 id="修改字典的值"><a href="#修改字典的值" class="headerlink" title="修改字典的值"></a>修改字典的值</h5><p>一 个 key 只 能 对 应 一 个 value ， 当 再 次 给 某 个 key 赋 值 的 时 候 回 覆 盖 掉 旧 值 ，<br>所以可以理解为键是唯一的，但是值并不是，而且值可以是任何一种数据类型。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict2 = &#123;&#x27;name&#x27;: &#x27;xiaoming&#x27;, &#x27;age&#x27;: 18&#125;</span><br><span class="line">dict2[&#x27;name&#x27;]</span><br><span class="line">&#x27;xiaoming&#x27;</span><br><span class="line">dict2[&#x27;name&#x27;] = &#x27;lily&#x27;</span><br><span class="line">dict2</span><br><span class="line">&#123;&#x27;name&#x27;: &#x27;lily&#x27;, &#x27;age&#x27;: 18&#125; </span><br></pre></td></tr></table></figure>

<p>新增字典的值   （跟修改写法一致 ）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict2 = &#123;&#x27;name&#x27;: &#x27;xiaoming&#x27;, &#x27;age&#x27;: 18&#125;</span><br><span class="line">dict2[&#x27;sex&#x27;] = 1</span><br><span class="line">dict2 &#123;&#x27;name&#x27;: &#x27;xiaoming&#x27;, &#x27;age&#x27;: 18, &#x27;sex&#x27;: 1&#125; </span><br></pre></td></tr></table></figure>

<h5 id="删除字典"><a href="#删除字典" class="headerlink" title="删除字典"></a>删除字典</h5><p>del和pop(删除并返回) </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict2 = &#123;&#x27;name&#x27;: &#x27;xiaoming&#x27;, &#x27;age&#x27;: 18&#125;</span><br><span class="line">del dict2[&#x27;name&#x27;]</span><br><span class="line">dict2</span><br><span class="line">&#123;&#x27;age&#x27;: 18&#125;</span><br><span class="line">dict2 = &#123;&#x27;name&#x27;: &#x27;xiaoming&#x27;, &#x27;age&#x27;: 18&#125;</span><br><span class="line">dict2.pop(&#x27;name&#x27;)</span><br><span class="line">&#x27;xiaoming&#x27;</span><br><span class="line">dict2</span><br><span class="line">&#123;&#x27;age&#x27;: 18&#125; </span><br></pre></td></tr></table></figure>

<h5 id="字典合并"><a href="#字典合并" class="headerlink" title="字典合并"></a>字典合并</h5><p>两个字典通过update的方法进行合并 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;&#x27;A&#x27;: &#x27;a&#x27;, &#x27;B&#x27;: &#x27;b&#x27;&#125;</span><br><span class="line">dict2 = &#123;&#x27;M&#x27;: &#x27;m&#x27;, &#x27;N&#x27;: &#x27;n&#x27;&#125; </span><br><span class="line"></span><br><span class="line">将 dict2 合 并 到 dict1</span><br><span class="line"></span><br><span class="line">dict1.update(dict2)</span><br><span class="line">dict1</span><br><span class="line">&#123;&#x27;A&#x27;: &#x27;a&#x27;, &#x27;B&#x27;: &#x27;b&#x27;, &#x27;M&#x27;: &#x27;m&#x27;, &#x27;N&#x27;: &#x27;n&#x27;&#125; </span><br></pre></td></tr></table></figure>

<h5 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h5><p>1、 获取字典的所有key </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict2 = &#123;&#x27;name&#x27;: &#x27;xiaoming&#x27;, &#x27;age&#x27;: 18&#125;</span><br><span class="line">dict2.keys()</span><br><span class="line">dict_keys([&#x27;name&#x27;, &#x27;age&#x27;]) </span><br></pre></td></tr></table></figure>

<p>2、返回字典的所有value </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict2 = &#123;&#x27;name&#x27;: &#x27;xiaoming&#x27;, &#x27;age&#x27;: 18&#125;</span><br><span class="line">dict2.values()</span><br><span class="line">dict_values([&#x27;xiaoming&#x27;, 18]) </span><br></pre></td></tr></table></figure>

<p>3、返回字典的所有键和值 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict2 = &#123;&#x27;name&#x27;: &#x27;xiaoming&#x27;, &#x27;age&#x27;: 18&#125;</span><br><span class="line">dict2.items()</span><br><span class="line">dict_items([(&#x27;name&#x27;, &#x27;xiaoming&#x27;), (&#x27;age&#x27;, 18)]) </span><br></pre></td></tr></table></figure>



<blockquote>
</blockquote>
]]></content>
      <tags>
        <tag>Note</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>基本操作</title>
    <url>/2023/10/05/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><ul>
<li>此处记录一些基本操作</li>
</ul>
<h2 id="不同语言的一些基本操作"><a href="#不同语言的一些基本操作" class="headerlink" title="不同语言的一些基本操作"></a>不同语言的一些基本操作</h2><ul>
<li><a href="/2023/10/05/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/" title="字符串操作">字符串操作</a></li>
</ul>
]]></content>
      <tags>
        <tag>基操</tag>
      </tags>
  </entry>
  <entry>
    <title>学习笔记</title>
    <url>/2023/10/05/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h1><ul>
<li><a href="/2023/10/05/Cpp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" title="C++学习笔记">C++学习笔记</a></li>
</ul>
]]></content>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>库文件的一些操作</title>
    <url>/2023/10/29/%E5%BA%93%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="库文件的一些操作"><a href="#库文件的一些操作" class="headerlink" title="库文件的一些操作"></a>库文件的一些操作</h1><p>[TOC]</p>
<span id="more"></span>

<h2 id="动态库导出lib"><a href="#动态库导出lib" class="headerlink" title="动态库导出lib"></a>动态库导出lib</h2><ul>
<li>使用动态库文件<code>.dll</code>导出<code>.lib</code></li>
</ul>
<h3 id="导出def文件"><a href="#导出def文件" class="headerlink" title="导出def文件"></a>导出def文件</h3><h4 id="dumpbin-导出def"><a href="#dumpbin-导出def" class="headerlink" title="dumpbin 导出def"></a>dumpbin 导出def</h4><ul>
<li><code>dumpbin</code>.exe 是<code>windows</code>自带的程序导出函数表只是其中一个功能</li>
<li><a href="https://learn.microsoft.com/zh-cn/cpp/build/exporting-from-a-dll-using-def-files?view=msvc-170"> DUMPBIN 选项参数说明</a></li>
<li>这里导出的只是函数表需要做一定修改才是<code>.def</code>文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;D:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64\dumpbin.exe&quot; /exports mr_api.dll&gt;mr_api.def</span><br></pre></td></tr></table></figure>

<ul>
<li><code>.bat</code>脚本其中脚本是对当前目录下的所有<code>.dll </code>执行 <code>dumpbin</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">::设置dumpbin目录</span><br><span class="line"><span class="built_in">set</span> vs_path=D:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\bin\</span><br><span class="line"><span class="built_in">set</span> kit=Hostx64</span><br><span class="line"><span class="built_in">echo</span> dll def 导出脚本</span><br><span class="line"><span class="built_in">echo</span> Hostx64(默认)</span><br><span class="line"><span class="built_in">set</span> dumpbin_dir=<span class="string">&quot;%vs_path%%kit%\x64\dumpbin.exe&quot;</span></span><br><span class="line">::<span class="built_in">echo</span> %dumpbin_dir%</span><br><span class="line"><span class="keyword">for</span> /r <span class="string">&quot;%cd%&quot;</span> %%i <span class="keyword">in</span> (*.dll) <span class="keyword">do</span> (%dumpbin_dir% /exports <span class="string">&quot;%%~nxi&quot;</span>&gt;<span class="string">&quot;%%~nxi&quot;</span>.def )</span><br><span class="line">::pause</span><br></pre></td></tr></table></figure>

<ul>
<li>修改文件为<code>.def</code>格式 <code>@1</code>是函数导出序号可以没有</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LIBRARY xxx.dll</span><br><span class="line">EXPORTS</span><br><span class="line">函数名		@1</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://blog.csdn.net/mylaf/article/details/91040033">参考</a></li>
</ul>
<h4 id="pexports导出def"><a href="#pexports导出def" class="headerlink" title="pexports导出def"></a>pexports导出def</h4><ul>
<li><a href="https://sourceforge.net/projects/mingw/files/MinGW/Extension/pexports/">pexports下载</a></li>
<li>下面是一个综合脚本<code>.bat</code>将使用<code>pexports</code>导出<code>.def</code>然后使用<code>lib.exe</code>导出<code>.lib</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">::设置dumpbin目录</span><br><span class="line"><span class="built_in">set</span> vs_path=D:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\bin\</span><br><span class="line"><span class="built_in">set</span> kit=Hostx64</span><br><span class="line"><span class="built_in">echo</span> dll def 导出脚本</span><br><span class="line">::https://sourceforge.net/projects/mingw/files/MinGW/Extension/pexports/</span><br><span class="line"><span class="built_in">set</span> pexports_path=D:\Program Files (x86)\pexports-0.47-mingw32-bin\bin\</span><br><span class="line"><span class="built_in">set</span> export_exe=<span class="string">&quot;%pexports_path%pexports.exe&quot;</span></span><br><span class="line"><span class="keyword">for</span> /r <span class="string">&quot;%cd%&quot;</span> %%i <span class="keyword">in</span> (*.dll) <span class="keyword">do</span> (%export_exe% -o <span class="string">&quot;%%~nxi&quot;</span>&gt;<span class="string">&quot;%%~nxi&quot;</span>.def)</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> dumpbin_dir=<span class="string">&quot;%vs_path%%kit%\x64\lib.exe&quot;</span></span><br><span class="line">::<span class="built_in">echo</span> %dumpbin_dir%</span><br><span class="line"><span class="keyword">for</span> /r <span class="string">&quot;%cd%&quot;</span> %%i <span class="keyword">in</span> (*.def) <span class="keyword">do</span> (%dumpbin_dir% /def:<span class="string">&quot;%%~nxi&quot;</span> /machine:x64 /out:<span class="string">&quot;%%~nxi&quot;</span>.lib)</span><br><span class="line">::pause</span><br></pre></td></tr></table></figure>

<ul>
<li><p><a href="https://blog.lwons.com/archieve/export-lib-from-dll.html">参考</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/ziyu-trip/p/13299357.html">MINGW 使用 MSVC 的动态库方法</a></p>
</li>
</ul>
<h3 id="导出lib文件"><a href="#导出lib文件" class="headerlink" title="导出lib文件"></a>导出lib文件</h3><ul>
<li>导出<code>.lib</code>文件需要用到<code>winndows</code>自带的<code> lib.exe</code></li>
<li><a href="https://learn.microsoft.com/zh-cn/cpp/build/reference/overview-of-lib?view=msvc-170">lib程序参数选项用法</a></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;D:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64\lib.exe&quot; /def:xxx.def /machine:x64 /out:xxx.lib</span><br></pre></td></tr></table></figure>

<ul>
<li><code>.bat</code>脚本对当前目录下所有<code>.def</code>导出<code>.lib</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">::设置dumpbin目录</span><br><span class="line"><span class="built_in">set</span> vs_path=D:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\bin\</span><br><span class="line"><span class="built_in">set</span> kit=Hostx64</span><br><span class="line"><span class="built_in">echo</span> dll def 导出脚本</span><br><span class="line"><span class="built_in">echo</span> Hostx64(默认)</span><br><span class="line"><span class="built_in">set</span> dumpbin_dir=<span class="string">&quot;%vs_path%%kit%\x64\lib.exe&quot;</span></span><br><span class="line">::<span class="built_in">echo</span> %dumpbin_dir%</span><br><span class="line"><span class="keyword">for</span> /r <span class="string">&quot;%cd%&quot;</span> %%i <span class="keyword">in</span> (*.def) <span class="keyword">do</span> (%dumpbin_dir% /def:<span class="string">&quot;%%~nxi&quot;</span> /machine:x64 /out:<span class="string">&quot;%%~nxi&quot;</span>.lib )</span><br><span class="line">::pause</span><br></pre></td></tr></table></figure>



<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p><a href="https://blog.csdn.net/gyh198/article/details/7673161#:~:text=%E6%96%B9%E6%B3%95%E5%BD%93%E7%84%B6%E5%BE%88%E7%AE%80%E5%8D%95%EF%BC%8C%20%E5%85%88%E7%94%A8VC%E7%9A%84%E5%B7%A5%E5%85%B7Depends.exe%E6%9F%A5%E7%9C%8B%E5%AF%BC%E5%87%BA%E5%87%BD%E6%95%B0%E7%9A%84%E5%87%BD%E6%95%B0%E5%90%8D%E5%95%8A,%E7%94%A8IDAPro%E6%88%96%E8%80%85%E5%85%B6%E4%BB%96%E5%8F%8D%E6%B1%87%E7%BC%96%E5%B7%A5%E5%85%B7%E5%88%86%E6%9E%90%E5%87%BD%E6%95%B0%E5%8E%9F%E5%9E%8B%20%E5%86%8D%E7%94%A8API%E5%87%BD%E6%95%B0%EF%BC%9ALoadLibrary%EF%BC%8CGetProcAddress%20%E5%AE%8C%E6%88%90%EF%BC%81">生成头文件</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dumpbin.exe /headers xxx.dll</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/kingjxust/article/details/86632199">windows lib 静态库转 dll 动态库</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;D:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64\undname.exe&quot;</span><br><span class="line">&quot;D:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64\lib.exe&quot;</span><br></pre></td></tr></table></figure>

<h3 id="静态库导出函数"><a href="#静态库导出函数" class="headerlink" title="静态库导出函数"></a>静态库导出函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;D:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64\dumpbin.exe&quot; </span><br><span class="line">/linkermember:1 ippsmt.lib&gt;2x.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;D:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64\dumpbin.exe&quot; </span><br><span class="line">/archivemembers ippsmt.lib&gt;5x.txt</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Lib</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串操作</title>
    <url>/2023/10/05/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h1><p>[TOC]</p>
<ul>
<li>目前仅有 C&#x2F;C++&#x2F;Qt</li>
<li>本文限制在C&#x2F;C++11标准及以下</li>
<li>字符串操作：查找、截取、拼接、数值转换</li>
</ul>
<span id="more"></span>

<h2 id="C中的字符串操作"><a href="#C中的字符串操作" class="headerlink" title="C中的字符串操作"></a>C中的字符串操作</h2><ul>
<li>C中的字符串通常是 char* 类型的字符串数组类型</li>
<li>一般使用  sprintf 做字符串拼接、转换</li>
<li>输出使用 printf 控制</li>
<li><a href="https://zh.cppreference.com/w/c/string/byte">空终止字节字符串 - cppreference.com</a></li>
</ul>
<h3 id="查找、截取"><a href="#查找、截取" class="headerlink" title="查找、截取"></a>查找、截取</h3><ul>
<li><a href="https://zh.cppreference.com/w/c/string/byte/strchr">strchr</a> 查找字符的首次出现</li>
<li><a href="https://zh.cppreference.com/w/c/string/byte/strrchr">strrchr </a>查找字符的最后一次出现</li>
<li><a href="https://zh.cppreference.com/w/c/string/byte/strstr">strstr</a> 查找子串字符的首次出现</li>
<li><a href="https://zh.cppreference.com/w/c/string/byte/strtok">strtok, strtok_s</a> 查找字节字符串中的下一个记号</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ipv4ToUint32_c</span><span class="params">(<span class="keyword">char</span> *ip_str, <span class="keyword">uint32_t</span> &amp;ip_int)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//rsize_t str_max = sizeof ip_str;</span></span><br><span class="line">	<span class="comment">//char *next_token;</span></span><br><span class="line">	<span class="comment">//char *token = strtok_s(ip_str, &quot;.&quot;, &amp;next_token);</span></span><br><span class="line">	<span class="comment">//while (token)</span></span><br><span class="line">	<span class="comment">//&#123;</span></span><br><span class="line">	<span class="comment">//	ip_uint &lt;&lt;= 8;</span></span><br><span class="line">	<span class="comment">//	ip_uint += strtoul(token, NULL, 10);</span></span><br><span class="line">	<span class="comment">//	token = strtok_s(NULL, &quot;.&quot;, &amp;next_token);</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> *token = strtok(ip_str, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (token)</span><br><span class="line">	&#123;</span><br><span class="line">		ip_uint &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">		ip_uint += strtoul(token, <span class="literal">NULL</span>, <span class="number">10</span>);</span><br><span class="line">		token = strtok(<span class="literal">NULL</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><h3 id="拼接、格式化"><a href="#拼接、格式化" class="headerlink" title="拼接、格式化"></a>拼接、格式化</h3><ul>
<li><a href="https://zh.cppreference.com/w/c/string/byte/strcat">strcat, strcat_s</a> 、<a href="https://zh.cppreference.com/w/c/string/byte/strncat">strncat, strncat_s </a>字符串拼接</li>
<li>sprintf、sprintf_s、snprintf</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uint32ToIpv4_c</span><span class="params">(<span class="keyword">uint32_t</span> ip_i, <span class="keyword">char</span> *c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">snprintf</span>(c, <span class="number">16</span>, <span class="string">&quot;%d.%d.%d.%d&quot;</span>, (<span class="keyword">uint8_t</span>)(ip_i &gt;&gt; <span class="number">24</span>), (<span class="keyword">uint8_t</span>)(ip_i &gt;&gt; <span class="number">16</span>), (<span class="keyword">uint8_t</span>)(ip_i &gt;&gt; <span class="number">8</span>), (<span class="keyword">uint8_t</span>)ip_i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h3><ul>
<li><a href="https://zh.cppreference.com/w/c/string/byte/atof">atof</a>、<a href="https://zh.cppreference.com/w/c/string/byte/atoi">atoi, atol, atoll</a></li>
</ul>
<h4 id="字符串转数值"><a href="#字符串转数值" class="headerlink" title="字符串转数值"></a>字符串转数值</h4><ul>
<li><p>不同进制的字符串转换为数值</p>
</li>
<li><p><a href="https://zh.cppreference.com/w/c/string/byte/strtol">strtol, strtoll</a> 、<a href="https://zh.cppreference.com/w/c/string/byte/strtoul">strtoul, strtoull</a>、<a href="https://zh.cppreference.com/w/c/string/byte/strtof">strtof, strtod, strtold</a>、<a href="https://zh.cppreference.com/w/c/string/byte/strtoimax">strtoimax, strtoumax</a></p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 带错误处理的剖析</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *p = <span class="string">&quot;10 200000000000000000000000000000 30 -40 junk&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Parsing &#x27;%s&#x27;:\n&quot;</span>, p);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 库函数调用能设置 errno 为任何非零值，无关乎是否有错误，</span></span><br><span class="line">        <span class="comment">// 故为检查 strtol 设置的错误，需要清除它</span></span><br><span class="line">        errno = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> *end;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">long</span> i = strtol(p, &amp;end, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (p == end)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">bool</span> range_error = errno == ERANGE;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Extracted &#x27;%.*s&#x27;, strtol returned %ld.&quot;</span>, (<span class="keyword">int</span>)(end-p), p, i);</span><br><span class="line">        p = end;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (range_error)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; Range error occurred.&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Unextracted leftover: &#x27;%s&#x27;\n\n&quot;</span>, p);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 不带错误处理的剖析</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\&quot;1010\&quot; in binary  --&gt; %ld\n&quot;</span>, strtol(<span class="string">&quot;1010&quot;</span>, <span class="literal">NULL</span>, <span class="number">2</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\&quot;12\&quot;   in octal   --&gt; %ld\n&quot;</span>, strtol(<span class="string">&quot;12&quot;</span>,   <span class="literal">NULL</span>, <span class="number">8</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\&quot;A\&quot;    in hex     --&gt; %ld\n&quot;</span>, strtol(<span class="string">&quot;A&quot;</span>,    <span class="literal">NULL</span>, <span class="number">16</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\&quot;junk\&quot; in base-36 --&gt; %ld\n&quot;</span>, strtol(<span class="string">&quot;junk&quot;</span>, <span class="literal">NULL</span>, <span class="number">36</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\&quot;012\&quot;  in auto-detected base --&gt; %ld\n&quot;</span>, strtol(<span class="string">&quot;012&quot;</span>,  <span class="literal">NULL</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\&quot;0xA\&quot;  in auto-detected base --&gt; %ld\n&quot;</span>, strtol(<span class="string">&quot;0xA&quot;</span>,  <span class="literal">NULL</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\&quot;junk\&quot; in auto-detected base --&gt; %ld\n&quot;</span>, strtol(<span class="string">&quot;junk&quot;</span>, <span class="literal">NULL</span>, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span>* endptr;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%ld\n&quot;</span>, strtoimax(<span class="string">&quot; -123junk&quot;</span>,&amp;endptr,<span class="number">10</span>)); <span class="comment">/* 底 10          */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%ld\n&quot;</span>, strtoimax(<span class="string">&quot;11111111&quot;</span>,&amp;endptr,<span class="number">2</span>));   <span class="comment">/* 底 2           */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%ld\n&quot;</span>, strtoimax(<span class="string">&quot;XyZ&quot;</span>,&amp;endptr,<span class="number">36</span>));       <span class="comment">/* 底 36          */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%ld\n&quot;</span>, strtoimax(<span class="string">&quot;010&quot;</span>,&amp;endptr,<span class="number">0</span>));        <span class="comment">/* 八进制自动检测   */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%ld\n&quot;</span>, strtoimax(<span class="string">&quot;10&quot;</span>,&amp;endptr,<span class="number">0</span>));         <span class="comment">/* 十进制自动检测   */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%ld\n&quot;</span>, strtoimax(<span class="string">&quot;0x10&quot;</span>,&amp;endptr,<span class="number">0</span>));       <span class="comment">/* 十六进制自动检测 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 值域错误                 */</span></span><br><span class="line"><span class="comment">/* LONG_MAX+1 --&gt; LONG_MAX */</span></span><br><span class="line">errno = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%ld\n&quot;</span>, strtoimax(<span class="string">&quot;9223372036854775808&quot;</span>,&amp;endptr,<span class="number">10</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, strerror(errno));</span><br></pre></td></tr></table></figure>

<h4 id="数值转字符串"><a href="#数值转字符串" class="headerlink" title="数值转字符串"></a>数值转字符串</h4><ul>
<li>snprintf</li>
<li>在windows平台： <a href="https://learn.microsoft.com/zh-cn/cpp/c-runtime-library/reference/itoa-s-itow-s?view=msvc-170">_itoa_s、_itow_s </a></li>
</ul>
<h2 id="C-中的字符操作"><a href="#C-中的字符操作" class="headerlink" title="C++中的字符操作"></a>C++中的字符操作</h2><ul>
<li><a href="https://zh.cppreference.com/w/cpp/string/basic_string">std::basic_string</a></li>
<li>C++的字符串格式化处理一直不咋样</li>
</ul>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ul>
<li><p>find、rfind、 find_first_of、 find_first_not_of、find_last_of、find_last_not_of</p>
</li>
<li><p>寻找字符的首次出现：<a href="https://zh.cppreference.com/w/cpp/string/basic_string/find">find</a>  <a href="https://zh.cppreference.com/w/cpp/string/basic_string/find_first_of">find_first_of</a></p>
</li>
<li><p>寻找子串的最后一次出现：<a href="https://zh.cppreference.com/w/cpp/string/basic_string/rfind">rfind</a>  <a href="https://zh.cppreference.com/w/cpp/string/basic_string/find_last_of">find_last_of</a></p>
</li>
</ul>
<h3 id="替换-1"><a href="#替换-1" class="headerlink" title="替换"></a>替换</h3><ul>
<li><a href="https://zh.cppreference.com/w/cpp/string/basic_string/replace">string::replace</a></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> std::string str = <span class="string">&quot;C++ primer 4ths&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> std::string replace = <span class="string">&quot;is a books&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从位置 11 开始删除 4 个字符并添加 &quot;5th&quot;</span></span><br><span class="line">std::string replace_str1 = str;</span><br><span class="line">replace_str1.<span class="built_in">replace</span>(<span class="number">11</span>, <span class="number">4</span>, <span class="string">&quot;5th&quot;</span>);</span><br><span class="line">std::cout &lt;&lt; replace_str1 &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同上</span></span><br><span class="line">std::string replace_str2 = str;</span><br><span class="line">replace_str2.<span class="built_in">replace</span>(replace_str2.<span class="built_in">end</span>() - <span class="number">4</span>,replace_str2.<span class="built_in">end</span>(),<span class="string">&quot;6th&quot;</span>);</span><br><span class="line">std::cout &lt;&lt; replace_str2 &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从位置 11 开始删除 4 个字符并添加 &quot;is a book&quot;</span></span><br><span class="line">std::string replace_str3 = str;</span><br><span class="line">replace_str3.<span class="built_in">replace</span>(<span class="number">11</span>, <span class="number">4</span>, replace, <span class="number">0</span>, replace.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">std::cout &lt;&lt; replace_str3 &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="截取"><a href="#截取" class="headerlink" title="截取"></a>截取</h3><ul>
<li><code>std::string</code>成员函数 <a href="https://zh.cppreference.com/w/cpp/string/basic_string/substr">substr(pos, len)</a></li>
<li>返回一个从<code>pos</code>开始，<code>len</code>长的子串</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::string a = <span class="string">&quot;0123456789abcdefghij&quot;</span>;    </span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// pos 在边界外，抛出</span></span><br><span class="line">    std::string sub5 = a.<span class="built_in">substr</span>(a.<span class="built_in">size</span>()+<span class="number">3</span>, <span class="number">50</span>);</span><br><span class="line">    std::cout &lt;&lt; sub5 &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in"><span class="keyword">catch</span></span>(<span class="keyword">const</span> std::out_of_range&amp; e)</span><br><span class="line">&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;pos 超出了字符串的大小\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ipv4ToUint32</span><span class="params">(std::string ip_s, <span class="keyword">uint32_t</span> &amp;ip_uint)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> pos_dot = ip_s.<span class="built_in">find</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">		ip_uint &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">		ip_uint += (<span class="keyword">uint8_t</span>)std::<span class="built_in">stoi</span>(ip_s.<span class="built_in">substr</span>(<span class="number">0</span>, pos_dot));</span><br><span class="line">		ip_s = ip_s.<span class="built_in">substr</span>(pos_dot + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="拼接、格式化-1"><a href="#拼接、格式化-1" class="headerlink" title="拼接、格式化"></a>拼接、格式化</h3><ul>
<li><p>直接使用操作符 +</p>
</li>
<li><p>std::strstream</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="comment">// stringstream 用起来不太方便 </span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">double</span> pi = <span class="number">3.14159263</span>;</span><br><span class="line">std::stringstream ss;</span><br><span class="line">ss &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; std::<span class="built_in">setfill</span>(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; std::right &lt;&lt; std::hex &lt;&lt; a &lt;&lt; <span class="string">&quot; pi:&quot;</span> &lt;&lt; pi;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uint32ToIpv4</span><span class="params">(<span class="keyword">uint32_t</span> ip_uint, std::string &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	s = std::<span class="built_in">to_string</span>((<span class="keyword">uint8_t</span>)(ip_uint &gt;&gt; <span class="number">24</span>)) + <span class="string">&quot;.&quot;</span> +</span><br><span class="line">		std::<span class="built_in">to_string</span>((<span class="keyword">uint8_t</span>)(ip_uint &gt;&gt; <span class="number">16</span>)) + <span class="string">&quot;.&quot;</span> +</span><br><span class="line">		std::<span class="built_in">to_string</span>((<span class="keyword">uint8_t</span>)(ip_uint &gt;&gt; <span class="number">8</span>))  + <span class="string">&quot;.&quot;</span> +</span><br><span class="line">		std::<span class="built_in">to_string</span>((<span class="keyword">uint8_t</span>)(ip_uint));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/mxnote/articles/17126084.html">C++ - std::string字符串格式化方法总结 - MasonLee - 博客园 (cnblogs.com)</a></p>
<h3 id="数值转换-1"><a href="#数值转换-1" class="headerlink" title="数值转换"></a>数值转换</h3><h4 id="字符串转数值-1"><a href="#字符串转数值-1" class="headerlink" title="字符串转数值"></a>字符串转数值</h4><ul>
<li><a href="https://zh.cppreference.com/w/cpp/string/basic_string/stol">std::stoi, std::stol, std::stoll</a>、<a href="https://zh.cppreference.com/w/cpp/string/basic_string/stoul">std::stoul, std::stoull</a>、<a href="https://zh.cppreference.com/w/cpp/string/basic_string/stof">std::stof, std::stod, std::stold</a></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">auto</span> data =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;45&quot;</span>,</span><br><span class="line">    <span class="string">&quot;+45&quot;</span>,</span><br><span class="line">    <span class="string">&quot; -45&quot;</span>,</span><br><span class="line">    <span class="string">&quot;3.14159&quot;</span>,</span><br><span class="line">    <span class="string">&quot;31337 with words&quot;</span>,</span><br><span class="line">    <span class="string">&quot;words and 2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;12345678901&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> std::string s : data)</span><br><span class="line">&#123;</span><br><span class="line">    std::<span class="keyword">size_t</span> pos&#123;&#125;;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;std::stoi(&quot;</span> &lt;&lt; std::<span class="built_in">quoted</span>(s) &lt;&lt; <span class="string">&quot;)：&quot;</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> i&#123;std::<span class="built_in">stoi</span>(s, &amp;pos)&#125;;</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot;；pos：&quot;</span> &lt;&lt; pos &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in"><span class="keyword">catch</span></span> (std::invalid_argument <span class="keyword">const</span>&amp; ex)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;std::invalid_argument::what()：&quot;</span> &lt;&lt; ex.<span class="built_in">what</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in"><span class="keyword">catch</span></span> (std::out_of_range <span class="keyword">const</span>&amp; ex)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;std::out_of_range::what()：&quot;</span> &lt;&lt; ex.<span class="built_in">what</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> ll&#123;std::<span class="built_in">stoll</span>(s, &amp;pos)&#125;;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;std::stoll(&quot;</span> &lt;&lt; std::<span class="built_in">quoted</span>(s) &lt;&lt; <span class="string">&quot;)：&quot;</span> &lt;&lt; ll</span><br><span class="line">                  &lt;&lt; <span class="string">&quot;；pos：&quot;</span> &lt;&lt; pos &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;\n以不同的底进行调用：\n&quot;</span>; <span class="comment">// C++17 structured  bindings</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; [s, base] : &#123;std::pair&lt;<span class="keyword">const</span> <span class="keyword">char</span>*, <span class="keyword">int</span>&gt;</span><br><span class="line">    &#123;<span class="string">&quot;11&quot;</span>,  <span class="number">2</span>&#125;, &#123;<span class="string">&quot;22&quot;</span>,  <span class="number">3</span>&#125;, &#123;<span class="string">&quot;33&quot;</span>,  <span class="number">4</span>&#125;, &#123;<span class="string">&quot;77&quot;</span>,  <span class="number">8</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;99&quot;</span>, <span class="number">10</span>&#125;, &#123;<span class="string">&quot;FF&quot;</span>, <span class="number">16</span>&#125;, &#123;<span class="string">&quot;jJ&quot;</span>, <span class="number">20</span>&#125;, &#123;<span class="string">&quot;Zz&quot;</span>, <span class="number">36</span>&#125;&#125;)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> i&#123;std::<span class="built_in">stoi</span>(s, <span class="literal">nullptr</span>, base)&#125;;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;std::stoi(&quot;</span> &lt;&lt; std::<span class="built_in">quoted</span>(s)</span><br><span class="line">              &lt;&lt; <span class="string">&quot;, nullptr, &quot;</span> &lt;&lt; base &lt;&lt; <span class="string">&quot;)：&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="数值转字符串-1"><a href="#数值转字符串-1" class="headerlink" title="数值转字符串"></a>数值转字符串</h4><ul>
<li><a href="https://zh.cppreference.com/w/cpp/string/basic_string/to_string">to_string</a>、to_wstring</li>
</ul>
<h2 id="Qt中字符串操作"><a href="#Qt中字符串操作" class="headerlink" title="Qt中字符串操作"></a>Qt中字符串操作</h2><ul>
<li>Qt中的字符串对象主要是QString、QByteArray</li>
</ul>
<h3 id="查找-1"><a href="#查找-1" class="headerlink" title="查找"></a>查找</h3><ul>
<li>使用QString成员函数</li>
<li>indexOf、startsWith、endsWith、contains、lastIndexOf</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QString str = <span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line"><span class="comment">// 返回子串在字符串中的位置</span></span><br><span class="line"><span class="keyword">int</span> pos = str.<span class="built_in">indexOf</span>(<span class="string">&quot;w&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="替换-2"><a href="#替换-2" class="headerlink" title="替换"></a>替换</h3><ul>
<li>replace()</li>
</ul>
<h3 id="截取-1"><a href="#截取-1" class="headerlink" title="截取"></a>截取</h3><ul>
<li>mid(startpos, len)</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QString str = <span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line"><span class="comment">// 默认len=-1就是到字符串末尾</span></span><br><span class="line">QString str_temp = str.<span class="built_in">mid</span>(str.<span class="built_in">indexOf</span>(<span class="string">&quot;w&quot;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="拼接、格式化-2"><a href="#拼接、格式化-2" class="headerlink" title="拼接、格式化"></a>拼接、格式化</h3><ul>
<li>直接使用操作符 +</li>
<li>QString的arg函数也能满足各种格式化</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式化控制 2位16进制不足用0填充</span></span><br><span class="line">QString cmd = <span class="built_in">QString</span>(<span class="string">&quot;%1&quot;</span>).<span class="built_in">arg</span>(<span class="number">25</span>,<span class="number">2</span>,<span class="number">16</span>,<span class="built_in">QLatin1Char</span>(<span class="string">&#x27;0&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h4 id="编码转换"><a href="#编码转换" class="headerlink" title="编码转换"></a>编码转换</h4><ul>
<li>toLocal8Bit、toUtf8</li>
</ul>
<h3 id="数值转换-2"><a href="#数值转换-2" class="headerlink" title="数值转换"></a>数值转换</h3><h4 id="字符串转数值-2"><a href="#字符串转数值-2" class="headerlink" title="字符串转数值"></a>字符串转数值</h4><ul>
<li>toInt、 toFloat、toDouble、toStd</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QString str =<span class="string">&quot;100&quot;</span></span><br><span class="line"><span class="comment">// 默认base = 10 , 从10进制字符串到int</span></span><br><span class="line"><span class="keyword">int</span> x = str.<span class="built_in">toInt</span>();</span><br><span class="line"><span class="comment">// 从16进制字符串到int</span></span><br><span class="line"><span class="keyword">bool</span> ok;</span><br><span class="line"><span class="keyword">int</span> x_hex = str.<span class="built_in">toInt</span>(&amp;ok,<span class="number">16</span>);</span><br></pre></td></tr></table></figure>

<h4 id="数值转字符串-2"><a href="#数值转字符串-2" class="headerlink" title="数值转字符串"></a>数值转字符串</h4><ul>
<li>QString::number(value, base)</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> value = <span class="number">72</span>;</span><br><span class="line"><span class="comment">// 默认base = 10， 从int到10进制字符串</span></span><br><span class="line">QString data_str = QString::<span class="built_in">number</span>(value);</span><br><span class="line"><span class="comment">// 从int到16进制字符串</span></span><br><span class="line">QString data_strhex = QString::<span class="built_in">number</span>(value, <span class="number">16</span>);</span><br><span class="line"><span class="comment">// double输出有效位控制 2位小数位</span></span><br><span class="line">QString data_str_fmt = QString::<span class="built_in">number</span>(value, <span class="string">&#x27;f&#x27;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>



<h2 id="字符串间的类型转换"><a href="#字符串间的类型转换" class="headerlink" title="字符串间的类型转换"></a>字符串间的类型转换</h2><p>[字符串之间的转换（char<em>、const char</em>、char<a href="https://blog.csdn.net/bigger_belief/article/details/132872091">]、string、QString、QByteArray、int、double）_Ivy_belief的博客-CSDN博客</a></p>
]]></content>
      <tags>
        <tag>基操</tag>
      </tags>
  </entry>
  <entry>
    <title>软件添加版本信息</title>
    <url>/2023/10/29/%E8%BD%AF%E4%BB%B6%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<h1 id="软件添加版本信息"><a href="#软件添加版本信息" class="headerlink" title="软件添加版本信息"></a>软件添加版本信息</h1><p>[TOC]</p>
<p>说明：</p>
<ul>
<li>这里说的版本信息是右键软件可以在信息信息中看到的相信</li>
<li>这些都只是在Windows中的效果</li>
<li>window中基本上都是通过添加资源文件.rc实现的</li>
</ul>
<span id="more"></span>

<h2 id="VS添加版本信息"><a href="#VS添加版本信息" class="headerlink" title="VS添加版本信息"></a>VS添加版本信息</h2><ul>
<li>测试环境：Vs2015</li>
</ul>
<h3 id="添加资源文件"><a href="#添加资源文件" class="headerlink" title="添加资源文件"></a>添加资源文件</h3><ul>
<li>右键项目 -&gt; 添加 -&gt; 资源 -&gt; 选择Version -&gt; 新建</li>
</ul>
<p><img src="/2023/10/29/%E8%BD%AF%E4%BB%B6%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF/image-20231023174012331.png" alt="image-20231023174012331"></p>
<p><img src="/2023/10/29/%E8%BD%AF%E4%BB%B6%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF/image-20231023174051066.png" alt="image-20231023174051066"></p>
<h3 id="添加版本定义头"><a href="#添加版本定义头" class="headerlink" title="添加版本定义头"></a>添加版本定义头</h3><ul>
<li>version.h</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _VAR2STR(s)			#s</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VAR2STR(s)			_VAR2STR(s)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VER_MAJOR			1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VER_MINOR			0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VER_REVISION		0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VER_BUILD			1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VERSION				VER_MAJOR.VER_MINOR.VER_REVISION.VER_BUILD</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VERSION_RC			VER_MAJOR,VER_MINOR,VER_REVISION,VER_BUILD</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STR_VERSION			VAR2STR(VERSION)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STR_VERSION_RC		STR_VERSION</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COMPILE_TIME		__DATE__ <span class="meta-string">&quot; &quot;</span> __TIME__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FILE_VERSION		STR_VERSION_RC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FILE_DESCRIPTION	<span class="meta-string">&quot;VS 自动修改软件版本号测试&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COMPANY				<span class="meta-string">&quot;搞不懂软件工作室&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRODUCTNAME			<span class="meta-string">&quot;自动版本号测试软件&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SOFTWARENAME		<span class="meta-string">&quot;SoftwareVerioon.exe&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COPYRIGHT			<span class="meta-string">&quot;Copyright (C) 2022-2023&quot;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>修改资源文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;version.h&quot;</span><br><span class="line"></span><br><span class="line">/////////////////////////////////////////////////////////////////////////////</span><br><span class="line">//</span><br><span class="line">// Version</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">VS_VERSION_INFO VERSIONINFO</span><br><span class="line"> FILEVERSION VERSION_RC</span><br><span class="line"> PRODUCTVERSION VERSION_RC</span><br><span class="line"> FILEFLAGSMASK 0x3fL</span><br><span class="line">#ifdef _DEBUG</span><br><span class="line"> FILEFLAGS 0x1L</span><br><span class="line">#else</span><br><span class="line"> FILEFLAGS 0x0L</span><br><span class="line">#endif</span><br><span class="line"> FILEOS 0x40004L</span><br><span class="line"> FILETYPE 0x1L</span><br><span class="line"> FILESUBTYPE 0x0L</span><br><span class="line">BEGIN</span><br><span class="line">    BLOCK &quot;StringFileInfo&quot;</span><br><span class="line">    BEGIN</span><br><span class="line">        BLOCK &quot;080404b0&quot;</span><br><span class="line">        BEGIN</span><br><span class="line">            VALUE &quot;CompanyName&quot;, COMPANY</span><br><span class="line">            VALUE &quot;FileDescription&quot;, FILE_DESCRIPTION</span><br><span class="line">            VALUE &quot;FileVersion&quot;, FILE_VERSION</span><br><span class="line">            VALUE &quot;InternalName&quot;, SOFTWARENAME</span><br><span class="line">            VALUE &quot;LegalCopyright&quot;, COPYRIGHT</span><br><span class="line">            VALUE &quot;OriginalFilename&quot;, SOFTWARENAME</span><br><span class="line">            VALUE &quot;ProductName&quot;, PRODUCTNAME</span><br><span class="line">            VALUE &quot;ProductVersion&quot;, STR_VERSION_RC</span><br><span class="line">        END</span><br><span class="line">    END</span><br><span class="line">    BLOCK &quot;VarFileInfo&quot;</span><br><span class="line">    BEGIN</span><br><span class="line">        VALUE &quot;Translation&quot;, 0x804, 1200</span><br><span class="line">    END</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">#endif    // 中文(简体，中国) resources</span><br><span class="line">/////////////////////////////////////////////////////////////////////////////</span><br></pre></td></tr></table></figure>

<h3 id="自动更新版本"><a href="#自动更新版本" class="headerlink" title="自动更新版本"></a>自动更新版本</h3><h4 id="添加批处理脚本"><a href="#添加批处理脚本" class="headerlink" title="添加批处理脚本"></a>添加批处理脚本</h4><ul>
<li>使用批处理脚本完成版本号增加的工作</li>
</ul>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="设置生成事件"><a href="#设置生成事件" class="headerlink" title="设置生成事件"></a>设置生成事件</h4><ul>
<li>右键项目 -&gt; 配置属性 -&gt; 生成事件 -&gt; 后期生成事件 -&gt; 命令行 -&gt; 添加命令</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Qt添加版本信息"><a href="#Qt添加版本信息" class="headerlink" title="Qt添加版本信息"></a>Qt添加版本信息</h2><ul>
<li>测试环境：Qt5.12.10、Qt5.15.2</li>
</ul>
<h3 id="添加资源文件-1"><a href="#添加资源文件-1" class="headerlink" title="添加资源文件"></a>添加资源文件</h3><ul>
<li><p>只需要在.pro中添加VERSION qmake便会自动生成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VERSION = 1.0.0</span><br></pre></td></tr></table></figure>
</li>
<li><p>但是如果修改资源文件每次重新构建时会重新生成一个资源文件覆盖掉以前的</p>
</li>
<li><p>给出的建议是先让qmake自动生成然后，将修改好的拷贝到源文件，并在pro中添加资源文件</p>
</li>
<li><p>这样做的目的是让qmake生成一个模板，当然如果已经有可直接添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RC_FILE += $PWD/xxx.rc</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果使用RC_ICON添加应用图标可能会失效，推荐在RC文件中添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 之前使用 RC_ICONS 添加 图标的方式可能不行</span><br><span class="line">RC_ICONS = xxxx.ico</span><br><span class="line"># 在资源文件中添加</span><br><span class="line">IDI_ICON1 ICON DISCARDABLE &quot;xxxx.ico&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="文件信息修改"><a href="#文件信息修改" class="headerlink" title="文件信息修改"></a>文件信息修改</h3><ul>
<li>方法是通用的可以直接用vs上面的文件 rc，version.h的定义</li>
<li>只是需要用上面的方法添加资源文件</li>
</ul>
<h3 id="自动更新版本-1"><a href="#自动更新版本-1" class="headerlink" title="自动更新版本"></a>自动更新版本</h3><h2 id="CMake添加版本信息"><a href="#CMake添加版本信息" class="headerlink" title="CMake添加版本信息"></a>CMake添加版本信息</h2><h3 id="添加资源文件-2"><a href="#添加资源文件-2" class="headerlink" title="添加资源文件"></a>添加资源文件</h3><ul>
<li><p>CMake在Windows平台依然是通过添加资源文件的方式实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set(RC_FILE $&#123;PROJECT_SOURCE_DIR&#125;/xxx.rc)    # 添加资源文件</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译时将资源文件变量也加入其中</p>
</li>
</ul>
<h3 id="自动更新版本-2"><a href="#自动更新版本-2" class="headerlink" title="自动更新版本"></a>自动更新版本</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/oLuoJinFanHua12/article/details/100655719">VS DLL文件和EXE文件添加文件版本信息-CSDN博客</a></p>
<p><a href="https://www.cnblogs.com/bugchecker/p/auto-add-version-num-on-each-build-under-visual-studio.html">Visual studio每次build自动增加版本号 - onemuji - 博客园 (cnblogs.com)</a></p>
<p><a href="https://blog.csdn.net/sxsy323/article/details/49488543">个比较实用的VS C++版本号自增的实现方式_vscod 属性增加版本信息-CSDN博客</a></p>
<p><a href="https://learn.microsoft.com/zh-cn/cpp/windows/working-with-resource-files?view=msvc-170">使用资源文件</a></p>
]]></content>
  </entry>
  <entry>
    <title>C++学习笔记</title>
    <url>/2023/10/05/Cpp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="C-学习笔记"><a href="#C-学习笔记" class="headerlink" title="C++ 学习笔记"></a>C++ 学习笔记</h1><p>[TOC]</p>
<ul>
<li>C++ 学习笔记整理 主要针对C++11</li>
</ul>
<p><a href="https://mp.weixin.qq.com/s/lQoH4UF36_zKrw-Jbp2ylw">C++知识体系总结：语言核心与代码工程 (qq.com)</a></p>
<span id="more"></span>

<h3 id="std-function-lambda-bind"><a href="#std-function-lambda-bind" class="headerlink" title="std::function lambda bind"></a>std::function lambda bind</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">Foo</span>(<span class="keyword">int</span> num) : <span class="built_in">num_</span>(num) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print_add</span><span class="params">(<span class="keyword">int</span> i)</span> <span class="keyword">const</span> </span>&#123; std::cout &lt;&lt; __FUNCTION__ &lt;&lt; num_ + i &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; &#125;</span><br><span class="line">	<span class="keyword">int</span> num_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_num</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	std::cout &lt;&lt; __FUNCTION__ &lt;&lt; i &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PrintNum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> i)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		std::cout &lt;&lt; __FUNCTION__ &lt;&lt; i &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">functionAndBind</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	function: 类似于C中的函数指针</span></span><br><span class="line"><span class="comment">	bind: 将可调用对象和参数绑定在一起 使用std::function保存 并延迟到需要调用的时候</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 存储自由函数</span></span><br><span class="line">	std::function&lt;<span class="built_in"><span class="keyword">void</span></span>(<span class="keyword">int</span>)&gt; f_display = print_num;</span><br><span class="line">	<span class="built_in">f_display</span>(<span class="number">-9</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 存储 lambda</span></span><br><span class="line">	std::function&lt;<span class="built_in"><span class="keyword">void</span></span>()&gt; f_display2 = []() &#123; <span class="built_in">print_num</span>(<span class="number">2</span>); &#125;;</span><br><span class="line">	<span class="built_in">f_display2</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 存储std::bind的调用</span></span><br><span class="line">	<span class="keyword">auto</span> f_display3 = std::<span class="built_in">bind</span>(print_num, <span class="number">3</span>);</span><br><span class="line">	<span class="built_in">f_display3</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 存储成员函数的调用</span></span><br><span class="line">	std::function&lt;<span class="built_in"><span class="keyword">void</span></span>(<span class="keyword">const</span> Foo&amp;, <span class="keyword">int</span>)&gt; f_add_display = &amp;Foo::print_add;</span><br><span class="line">	<span class="function"><span class="keyword">const</span> Foo <span class="title">foo</span><span class="params">(<span class="number">46464</span>)</span></span>;</span><br><span class="line">	<span class="built_in">f_add_display</span>(foo, <span class="number">2</span>);</span><br><span class="line">	<span class="built_in">f_add_display</span>(<span class="number">8565</span>, <span class="number">3</span>); <span class="comment">// 类似与拷贝构造 </span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 存储到数据成员访问器的调用</span></span><br><span class="line">	std::function&lt;<span class="built_in"><span class="keyword">int</span></span>(Foo <span class="keyword">const</span>&amp;)&gt; f_num = &amp;Foo::num_;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;num_: &quot;</span> &lt;&lt; <span class="built_in">f_num</span>(foo) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 存储成员函数及对象的调用</span></span><br><span class="line">	std::function&lt;<span class="built_in"><span class="keyword">void</span></span>(<span class="keyword">int</span>)&gt; f_add_display2 = std::<span class="built_in">bind</span>(&amp;Foo::print_add, foo, std::placeholders::_1);</span><br><span class="line">	<span class="built_in">f_add_display2</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 存储成员函数及对象指针的调用</span></span><br><span class="line">	std::function&lt;<span class="built_in"><span class="keyword">void</span></span>()&gt; f_add_display3 = std::<span class="built_in">bind</span>(&amp;Foo::print_add, &amp;foo, <span class="number">30</span>);</span><br><span class="line">	<span class="built_in">f_add_display3</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 存储到函数对象的调用</span></span><br><span class="line">	std::function&lt;<span class="built_in"><span class="keyword">void</span></span>(<span class="keyword">int</span>)&gt; f_display_obj = <span class="built_in">PrintNum</span>();</span><br><span class="line">	<span class="built_in">f_display_obj</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**************/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://zhuanlan.zhihu.com/p/137884434">c++11新特性之std::function和lambda表达式 - 知乎 (zhihu.com)</a></p>
<h3 id="std-pair-、std-tuple"><a href="#std-pair-、std-tuple" class="headerlink" title="std::pair 、std::tuple"></a>std::pair 、std::tuple</h3><ul>
<li>tuple可用于多个相异元素返回 pair是tuple的特例</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多元素返回值</span></span><br><span class="line"><span class="function">std::pair&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; <span class="title">getSize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> width = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">double</span> height = <span class="number">20.5</span>;</span><br><span class="line">	<span class="keyword">return</span> std::<span class="built_in">make_pair</span>(width, height);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">double</span>&gt; <span class="title">getDepthSize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> width = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> height = <span class="number">20.5</span>;</span><br><span class="line">	<span class="keyword">double</span> depth = <span class="number">10.5</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> std::<span class="built_in">make_tuple</span>(width, height, depth);</span><br><span class="line">	<span class="keyword">return</span> std::tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">double</span>&gt;&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3.3</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moreReturnValueTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	std::cout &lt;&lt; __FUNCTION__ &lt;&lt; std::endl;</span><br><span class="line">	<span class="keyword">auto</span> size = <span class="built_in">getSize</span>();</span><br><span class="line">	std::cout &lt;&lt; size.first &lt;&lt; size.second &lt;&lt; std::endl;</span><br><span class="line">	std::cout &lt;&lt; std::get&lt;<span class="number">0</span>&gt;(size) &lt;&lt; std::get&lt;<span class="number">1</span>&gt;(size) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> depth = <span class="built_in">getDepthSize</span>();</span><br><span class="line">	<span class="comment">// std::get 下标访问元素</span></span><br><span class="line">	std::cout &lt;&lt; std::get&lt;<span class="number">0</span>&gt;(depth) &lt;&lt; std::get&lt;<span class="number">1</span>&gt;(depth) &lt;&lt; std::get&lt;<span class="number">2</span>&gt;(depth) &lt;&lt; std::endl;</span><br><span class="line">	<span class="comment">// std::get 类型访问元素 具有相同类型不适用</span></span><br><span class="line">	<span class="comment">//std::cout &lt;&lt; std::get&lt;int&gt;(depth) &lt;&lt; std::get&lt;double&gt;(depth) &lt;&lt; std::get&lt;int&gt;(depth) &lt;&lt; std::endl;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="std-ref-、std-cref、std-move"><a href="#std-ref-、std-cref、std-move" class="headerlink" title="std::ref 、std::cref、std::move"></a>std::ref 、std::cref、std::move</h3><ul>
<li>函数模板 <code>ref</code> 与 <code>cref</code> 是生成 <a href="https://zh.cppreference.com/w/cpp/utility/functional/reference_wrapper">std::reference_wrapper</a> 类型对象的帮助函数，它们用<a href="https://zh.cppreference.com/w/cpp/language/template_argument_deduction">模板实参推导</a>确定结果的模板实参。</li>
<li>在函数式编程中（std::bind） bind 是对<code>std::bind</code>使用的是参数的拷贝而不是引用，因此必须显示利用<code>std::ref</code>来进行引用绑定</li>
<li><a href="https://zh.cppreference.com/w/cpp/utility/functional/ref">std::ref, std::cref - cppreference.com</a></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 左值引用 右值引用</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lvalue</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	a = <span class="number">14</span>;</span><br><span class="line">	b = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::vector&lt;<span class="keyword">int</span>&gt; <span class="title">rvalue_tet</span><span class="params">(std::vector&lt;<span class="keyword">int</span>&gt; value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	value.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">	<span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// std::move 将左值转换为右值 减少程序的深拷贝 但如果是字符串 原来的变量将变为空</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lvalueAndRvalueTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a, b;</span><br><span class="line">	<span class="built_in">lvalue</span>(std::<span class="built_in">ref</span>(<span class="number">2</span>), std::<span class="built_in">ref</span>(b));</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;b:&quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	std::vector&lt;<span class="keyword">int</span>&gt; value_list;</span><br><span class="line">	value_list.<span class="built_in">push_back</span>(a);</span><br><span class="line">	value_list.<span class="built_in">push_back</span>(b);</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;value_list:&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">int</span> &amp; i : value_list)</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> list_temp = <span class="built_in">rvalue_tet</span>(std::<span class="built_in">move</span>(value_list));</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;value_list:&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">int</span> &amp; i : value_list)</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;list_temp:&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">int</span> &amp; i : list_temp)</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	list_temp = <span class="built_in">rvalue_tet</span>(std::<span class="built_in">move</span>(list_temp));</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;list_temp:&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">int</span> &amp; i : list_temp)</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="decltype-auto"><a href="#decltype-auto" class="headerlink" title="decltype auto"></a>decltype auto</h3><ul>
<li><p>auto的使用必须马上初始化，否则无法推导出类型</p>
</li>
<li><p>auto在一行定义多个变量时，各个变量的推导不能产生二义性，否则编译失败</p>
</li>
<li><p>auto不能用作函数参数</p>
</li>
<li><p>在类中auto不能用作非静态成员变量</p>
</li>
<li><p>auto不能定义数组，可以定义指针</p>
</li>
<li><p>auto无法推导出模板参数</p>
</li>
<li><p>decltype  表达式类型推导</p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/137662774">C++11的类型推导详解 - 知乎 (zhihu.com)</a></p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回值后置类型语法  返回值类型依赖于参数类型</span></span><br><span class="line"><span class="comment">// auto 变量类型推断（在编译器阶段推导，且必须马上初始化否则无法推导， 且不能作为函数参数）</span></span><br><span class="line"><span class="comment">// decltype 表达式类型推断</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> T2&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">add</span><span class="params">(T t, T2 t2)</span> -&gt; <span class="title">decltype</span><span class="params">(t + t2)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> t + t2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="std-result-of"><a href="#std-result-of" class="headerlink" title="std::result_of"></a>std::result_of</h3><ul>
<li>推导调用类型</li>
</ul>
<p><a href="https://zh.cppreference.com/w/cpp/types/result_of">std::result_of, std::invoke_result - cppreference.com</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Func&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">wrapper</span><span class="params">(Func fc)</span> -&gt; <span class="keyword">typename</span> std::result_of&lt;<span class="title">Func</span><span class="params">()</span>&gt;::type </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> fc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h3><p><a href="https://www.zhihu.com/tardis/zm/ans/1517987598?source_id=1005">c++是否应避免使用普通指针，而使用智能指针（包括shared，unique，weak）？ (zhihu.com)</a></p>
<ul>
<li><p><strong>std::unique_ptr</strong></p>
</li>
<li><p><strong>std::shared_ptr</strong></p>
</li>
<li><p><strong>std::weak_ptr</strong></p>
</li>
</ul>
<h3 id="std-make-shared"><a href="#std-make-shared" class="headerlink" title="std::make_shared"></a>std::make_shared</h3><blockquote>
<p>\1) 以 <code>args</code> 为 <code>T</code> 的构造函数参数列表，构造 <code>T</code> 类型对象并将它包装于 <a href="https://zh.cppreference.com/w/cpp/memory/shared_ptr">std::shared_ptr</a> 。对象如同用表达式 ::new (pv) T(<a href="https://zh.cppreference.com/w/cpp/utility/forward">std::forward</a><Args>(args)…) 构造，其中 <code>pv</code> 是内部指向适合保有 <code>T</code> 类型对象的存储的 <code>void*</code> 指针。存储典型地大于 <code>sizeof(T)</code> ，以对共享指针控制块和 <code>T</code> 对象使用一次分配。此函数所调用的 <code>std::shared_ptr</code> 构造函数以指向新构造的 <code>T</code> 类型对象指针启用 <code>shared_from_this</code> 。此重载只有在 T 不是数组类型时才会参与重载决议。</Args></p>
<p>2,3) 同 (1) ，但构造的对象是可能多维的数组，其 <code>std::remove_all_extents_t&lt;T&gt;</code> 类型的非数组元素如同以布置 new 表达式 ::new(pv) <a href="https://zh.cppreference.com/w/cpp/types/remove_all_extents">std::remove_all_extents_t</a><T>() 值初始化。重载 (2) 创建第一维上大小为 <code>N</code> 的数组。数组元素以其地址递增顺序初始化，而当其生存期结束时，以原本构造顺序的逆序销毁。</T></p>
<p>4,5) 同 (2,3) ，但每个元素从默认值 <code>u</code> 初始化。若 <code>U</code> 不是数组类型，则这如同以如 (1) 中的布置 new 表达式进行；否则，这如同以如同 (1) 中的布置 new 表达式，从来自 <code>u</code> 的对应元素初始化（可能多维的）数组的每个非数组元素。重载 (4) 创建第一维上大小为 <code>N</code> 的数组。数组元素以其地址递增顺序初始化，而当其生存期结束时，以原本构造顺序的逆序销毁。</p>
<p>\6) 若 <code>T</code> 不是数组类型则同 (1) ，而若 (3) 是 <code>U[N]</code> 则同 if <code>T</code> ，除了<a href="https://zh.cppreference.com/w/cpp/language/default_initialization">默认初始化</a>创建的对象。</p>
<p>\7) 同 (2) ，除了<a href="https://zh.cppreference.com/w/cpp/language/default_initialization">默认初始化</a>单独的数组元素。</p>
<p>每种情况下，均将用 p-&gt;~X() 销毁对象（或若 <code>T</code> 为数组类型则为单独的元素） (C++20 起)，其中 <code>p</code> 是指向对象的指针，而 <code>X</code> 是该对象的类型。</p>
</blockquote>
<h2 id="C-多线程"><a href="#C-多线程" class="headerlink" title="C++ 多线程"></a>C++ 多线程</h2><p><a href="https://www.cnblogs.com/haippy/p/3284540.html">C++11 并发指南系列 - Haippy - 博客园 (cnblogs.com)</a></p>
<h3 id="std-condition-variable"><a href="#std-condition-variable" class="headerlink" title="std::condition_variable"></a>std::condition_variable</h3><ul>
<li>条件变量 用于线程同步</li>
<li><a href="https://zh.cppreference.com/w/cpp/thread/condition_variable">std::condition_variable - cppreference.com</a></li>
</ul>
<blockquote>
<p><code>condition_variable</code> 类是同步原语，能用于阻塞一个线程，或同时阻塞多个线程，直至另一线程修改共享变量（<em>条件</em>）并通知 <code>condition_variable</code> 。</p>
<p>有意修改变量的线程必须</p>
<ol>
<li>获得 <code>std::mutex</code> （常通过 <a href="https://zh.cppreference.com/w/cpp/thread/lock_guard">std::lock_guard</a> ）</li>
<li>在保有锁时进行修改</li>
<li>在 <code>std::condition_variable</code> 上执行 <a href="https://zh.cppreference.com/w/cpp/thread/condition_variable/notify_one">notify_one</a> 或 <a href="https://zh.cppreference.com/w/cpp/thread/condition_variable/notify_all">notify_all</a> （不需要为通知保有锁）</li>
</ol>
<p>即使共享变量是原子的，也必须在互斥下修改它，以正确地发布修改到等待的线程。</p>
<p>任何有意在 <code>std::condition_variable</code> 上等待的线程必须</p>
<ol>
<li>在与用于保护共享变量者相同的互斥上获得 <a href="http://zh.cppreference.com/w/cpp/thread/unique_lock">std::unique_lock</a>&lt;<a href="http://zh.cppreference.com/w/cpp/thread/mutex">std::mutex</a>&gt;</li>
<li>执行下列之一：</li>
</ol>
<p><code>std::condition_variable</code> 只可与 <a href="http://zh.cppreference.com/w/cpp/thread/unique_lock">std::unique_lock</a>&lt;<a href="http://zh.cppreference.com/w/cpp/thread/mutex">std::mutex</a>&gt; 一同使用；此限制在一些平台上允许最大效率。 <a href="https://zh.cppreference.com/w/cpp/thread/condition_variable_any">std::condition_variable_any</a> 提供可与任何<a href="https://zh.cppreference.com/w/cpp/named_req/BasicLockable"><em>基本可锁定</em> <em>(BasicLockable)</em> </a>对象，例如 <a href="https://zh.cppreference.com/w/cpp/thread/shared_lock">std::shared_lock</a> 一同使用的条件变量。</p>
<p>condition_variable 容许 <a href="https://zh.cppreference.com/w/cpp/thread/condition_variable/wait">wait</a> 、 <a href="https://zh.cppreference.com/w/cpp/thread/condition_variable/wait_for">wait_for</a> 、 <a href="https://zh.cppreference.com/w/cpp/thread/condition_variable/wait_until">wait_until</a> 、 <a href="https://zh.cppreference.com/w/cpp/thread/condition_variable/notify_one">notify_one</a> 及 <a href="https://zh.cppreference.com/w/cpp/thread/condition_variable/notify_all">notify_all</a> 成员函数的同时调用。</p>
<p>类 <code>std::condition_variable</code> 是<a href="https://zh.cppreference.com/w/cpp/named_req/StandardLayoutType"><em>标准布局类型</em> <em>(StandardLayoutType)</em> </a>。它非<a href="https://zh.cppreference.com/w/cpp/named_req/CopyConstructible"><em>可复制构造</em> <em>(CopyConstructible)</em> </a>、<a href="https://zh.cppreference.com/w/cpp/named_req/MoveConstructible"><em>可移动构造</em> <em>(MoveConstructible)</em> </a>、<a href="https://zh.cppreference.com/w/cpp/named_req/CopyAssignable"><em>可复制赋值</em> <em>(CopyAssignable)</em> </a>或<a href="https://zh.cppreference.com/w/cpp/named_req/MoveAssignable"><em>可移动赋值</em> <em>(MoveAssignable)</em> </a>。</p>
</blockquote>
<h3 id="std-future"><a href="#std-future" class="headerlink" title="std::future"></a>std::future</h3><blockquote>
<ol>
<li>异步操作的结果存储：<code>std::future</code>对象可以存储异步操作的结果。当异步操作完成时，其结果会自动存储到<code>std::future</code>对象中。</li>
<li>异步操作的同步处理：<code>std::future</code>对象提供了一种等待异步操作完成的机制。通过调用<code>std::future</code>的成员函数<code>wait()</code>或<code>wait_for()</code>，我们可以等待异步操作的完成。</li>
<li>异步操作的结果访问：当异步操作完成时，我们可以使用<code>std::future</code>的成员函数<code>get()</code>来获取异步操作的结果。</li>
</ol>
<p>类模板 <code>std::future</code> 提供访问异步操作结果的机制：</p>
<ul>
<li><p>（通过 <a href="https://zh.cppreference.com/w/cpp/thread/async">std::async</a> 、 <a href="https://zh.cppreference.com/w/cpp/thread/packaged_task">std::packaged_task</a> 或 <a href="https://zh.cppreference.com/w/cpp/thread/promise">std::promise</a> 创建的）异步操作能提供一个 <code>std::future</code> 对象给该异步操作的创建者。</p>
</li>
<li><p>然后，异步操作的创建者能用各种方法查询、等待或从 <code>std::future</code> 提取值。若异步操作仍未提供值，则这些方法可能阻塞。</p>
</li>
<li><p>异步操作准备好发送结果给创建者时，它能通过修改链接到创建者的 <code>std::future</code> 的<em>共享状态</em>（例如 <a href="https://zh.cppreference.com/w/cpp/thread/promise/set_value">std::promise::set_value</a> ）进行。</p>
</li>
</ul>
<p>注意， <code>std::future</code> 所引用的共享状态不与另一异步返回对象共享（与 <a href="https://zh.cppreference.com/w/cpp/thread/shared_future">std::shared_future</a> 相反）。</p>
</blockquote>
<h3 id="std-reference-wrapper"><a href="#std-reference-wrapper" class="headerlink" title="std::reference_wrapper"></a>std::reference_wrapper</h3><blockquote>
<p><code>std::reference_wrapper</code> 是包装引用于可复制、可赋值对象的类模板。它常用作将引用存储入无法正常保有引用的标准容器（类似 <a href="https://zh.cppreference.com/w/cpp/container/vector">std::vector</a> ）的机制。</p>
<p>特别是， <code>std::reference_wrapper</code> 是围绕到类型 <code>T</code> 的对象引用或函数引用的<a href="https://zh.cppreference.com/w/cpp/named_req/CopyConstructible"><em>可复制构造</em> <em>(CopyConstructible)</em> </a>且<a href="https://zh.cppreference.com/w/cpp/named_req/CopyAssignable"><em>可复制赋值</em> <em>(CopyAssignable)</em> </a>的包装器。 <code>std::reference_wrapper</code> 的实例是对象（它们可被复制或存储于容器），但它们能隐式转换成 T&amp; ，故能以之为以引用接收底层类型的函数的参数。</p>
<p>若存储的引用<a href="https://zh.cppreference.com/w/cpp/named_req/Callable"><em>可调用</em> <em>(Callable)</em> </a>，则可以相同参数调用 <code>std::reference_wrapper</code> 。</p>
<p>辅助函数 <a href="https://zh.cppreference.com/w/cpp/utility/functional/ref">std::ref</a> 与 <a href="https://zh.cppreference.com/w/cpp/utility/functional/ref">std::cref</a> 常用于生成 <code>std::reference_wrapper</code> 对象。</p>
<p><code>std::reference_wrapper</code> 亦用于按引用传递对象给 <a href="https://zh.cppreference.com/w/cpp/utility/functional/bind">std::bind</a> 或 <a href="https://zh.cppreference.com/w/cpp/thread/thread">std::thread</a> 的构造函数。</p>
<p><a href="https://zh.cppreference.com/w/cpp/utility/functional/reference_wrapper">https://zh.cppreference.com/w/cpp/utility/functional/reference_wrapper</a></p>
</blockquote>
<h3 id="std-packaged-task"><a href="#std-packaged-task" class="headerlink" title="std::packaged_task"></a>std::packaged_task</h3><blockquote>
<p>类模板 <code>std::packaged_task</code> 包装任何<a href="https://zh.cppreference.com/w/cpp/named_req/Callable"><em>可调用</em> <em>(Callable)</em> </a>目标（函数、 lambda 表达式、 bind 表达式或其他函数对象），使得能异步调用它。其返回值或所抛异常被存储于能通过 <a href="https://zh.cppreference.com/w/cpp/thread/future">std::future</a> 对象访问的共享状态中。</p>
<p>正如 <a href="https://zh.cppreference.com/w/cpp/utility/functional/function">std::function</a> ， <code>std::packaged_task</code> 是多态、具分配器的容器：可在堆上或以提供的分配器分配存储的可调用对象。</p>
</blockquote>
<h3 id="std-async"><a href="#std-async" class="headerlink" title="std::async"></a>std::async</h3><blockquote>
<p> <a href="https://zh.cppreference.com/w/cpp/thread/async">https://zh.cppreference.com/w/cpp/thread/async</a></p>
<p> 函数模板 <code>std::async</code> 异步地运行函数 f（有可能在可能是线程池一部分的分离线程中），并返回最终将保有该函数调用结果的 <a href="https://zh.cppreference.com/w/cpp/thread/future">std::future</a>。</p>
<p> \1) 表现如同以 <a href="https://zh.cppreference.com/w/cpp/thread/launch">std::launch::async</a> | <a href="https://zh.cppreference.com/w/cpp/thread/launch">std::launch::deferred</a> 作为 policy 调用 (2) 。</p>
<p> \2) 按照特定的启动策略 policy（见<a href="https://zh.cppreference.com/w/cpp/thread/async#.E5.90.AF.E5.8A.A8.E7.AD.96.E7.95.A5">下文</a>），以参数 args 调用函数 f。</p>
<p> 任何情况下，对 <code>std::async</code> 的调用<em>同步于</em>（定义见 <a href="https://zh.cppreference.com/w/cpp/atomic/memory_order">std::memory_order</a>）对 f 的调用，且 f 的完成<em>先序于</em>令共享状态就绪。</p>
<table>
<thead>
<tr>
<th>如果 <a href="https://zh.cppreference.com/w/cpp/utility/functional"><code>*INVOKE*</code></a>(<a href="https://zh.cppreference.com/w/cpp/standard_library/decay-copy"><code>*decay-copy*</code></a>(<a href="https://zh.cppreference.com/w/cpp/utility/forward">std::forward</a><F>(f)),     <a href="https://zh.cppreference.com/w/cpp/standard_library/decay-copy"><code>*decay-copy*</code></a>(<a href="https://zh.cppreference.com/w/cpp/utility/forward">std::forward</a><Args>(args))…) 不是合法表达式，那么程序非良构。</Args></F></th>
<th>(C++20 前)</th>
</tr>
</thead>
<tbody><tr>
<td>在满足以下任一条件时，程序非良构：<a href="https://zh.cppreference.com/w/cpp/types/is_constructible">std::is_constructible_v</a>&lt;<a href="https://zh.cppreference.com/w/cpp/types/decay">std::decay_t</a><F>, F&gt; 是 false对于 <code>Args</code> 中的某个类型 <code>Arg_i</code>，<a href="https://zh.cppreference.com/w/cpp/types/is_constructible">std::is_constructible_v</a>&lt;<a href="https://zh.cppreference.com/w/cpp/types/decay">std::decay_t</a><Arg_i>, Arg_i&gt; 是 falsestd::is_invocable_v&lt;<a href="https://zh.cppreference.com/w/cpp/types/decay">std::decay_t</a><F>, <a href="https://zh.cppreference.com/w/cpp/types/decay">std::decay_t</a><Args>…&gt; 是 false</Args></F></Arg_i></F></td>
<td>(C++20 起)</td>
</tr>
</tbody></table>
</blockquote>
<h2 id="C-其他函数"><a href="#C-其他函数" class="headerlink" title="C++其他函数"></a>C++其他函数</h2><h3 id="decltype"><a href="#decltype" class="headerlink" title="decltype"></a>decltype</h3><blockquote>
<p><a href="https://zh.cppreference.com/w/cpp/language/decltype">https://zh.cppreference.com/w/cpp/language/decltype</a></p>
<p>\1) 如果实参是没有括号的<a href="https://zh.cppreference.com/w/cpp/language/identifiers">标识表达式</a>或没有括号的<a href="https://zh.cppreference.com/w/cpp/language/operator_member_access">类成员访问</a>表达式，那么 <code>decltype</code> 产生以该表达式命名的实体的类型。如果没有这种实体或该实参指名了一组重载函数，那么程序非良构。</p>
<table>
<thead>
<tr>
<th>如果实参是指名某个<a href="https://zh.cppreference.com/w/cpp/language/structured_binding">结构化绑定</a>的没有括号的<a href="https://zh.cppreference.com/w/cpp/language/identifiers">标识表达式</a>，那么 <code>decltype</code> 产生其<em>被引用类型</em>（在关于结构化绑定声明的说明中有所描述）。</th>
<th>(C++17 起)</th>
</tr>
</thead>
<tbody><tr>
<td>如果实参是指名某个<a href="https://zh.cppreference.com/w/cpp/language/template_parameters#.E9.9D.9E.E7.B1.BB.E5.9E.8B.E6.A8.A1.E6.9D.BF.E5.BD.A2.E5.8F.82">非类型模板形参</a>的没有括号的<a href="https://zh.cppreference.com/w/cpp/language/identifiers">标识表达式</a>，那么 <code>decltype</code> 生成该模板形参的类型（当该模板形参以占位符类型声明时，类型会先进行任何所需的类型推导）。</td>
<td>(C++20 起)</td>
</tr>
</tbody></table>
<p>\2) 如果实参是其他类型为 <code>T</code> 的任何表达式，且</p>
<p>a) 如果 <em>表达式</em> 的<a href="https://zh.cppreference.com/w/cpp/language/value_category">值类别</a>是<em>亡值</em>，将会 <code>decltype</code> 产生 <code>T&amp;&amp;</code>；</p>
<p>b) 如果 <em>表达式</em> 的值类别是<em>左值</em>，将会 <code>decltype</code> 产生 <code>T&amp;</code>；</p>
<p>c) 如果 <em>表达式</em> 的值类别是<em>纯右值</em>，将会 <code>decltype</code> 产生 <code>T</code>。</p>
<table>
<thead>
<tr>
<th>如果 <em>表达式</em> 是返回类类型纯右值的函数调用，或是右操作数为这种函数调用的<a href="https://zh.cppreference.com/w/cpp/language/operator_other">逗号表达式</a>，那么不会对该纯右值引入临时量。</th>
<th>(C++17 前)</th>
</tr>
</thead>
<tbody><tr>
<td>如果 <em>表达式</em> 是除了（可带括号的）<a href="https://zh.cppreference.com/w/cpp/language/consteval">立即调用</a>以外的 (C++20 起)纯右值，那么不会从该纯右值<a href="https://zh.cppreference.com/w/cpp/language/implicit_conversion#.E4.B8.B4.E6.97.B6.E9.87.8F.E5.AE.9E.E8.B4.A8.E5.8C.96">实质化</a>临时对象：即这种纯右值没有结果对象。</td>
<td>(C++17 起)</td>
</tr>
</tbody></table>
<p>该类型不需要是<a href="https://zh.cppreference.com/w/cpp/language/type#.E4.B8.8D.E5.AE.8C.E6.95.B4.E7.B1.BB.E5.9E.8B">完整类型</a>或拥有可用的<a href="https://zh.cppreference.com/w/cpp/language/destructor">析构函数</a>，而且类型可以是<a href="https://zh.cppreference.com/w/cpp/language/abstract_class">抽象的</a>。此规则不适用于其子表达式：decltype(f(g())) 中，g() 必须有完整类型，但 f() 不必。</p>
<p>注意如果对象的名字带有括号，那么它会被当做通常的左值表达式，从而 decltype(x) 和 decltype((x)) 通常是不同的类型。</p>
<p>在难以或不可能以标准写法进行声明的类型时，<code>decltype</code> 很有用，例如 lambda 相关类型或依赖于模板形参的类型。</p>
</blockquote>
<h3 id="std-move"><a href="#std-move" class="headerlink" title="std::move"></a>std::move</h3><blockquote>
<p><a href="https://zh.cppreference.com/w/cpp/utility/move">https://zh.cppreference.com/w/cpp/utility/move</a></p>
<p><code>std::move</code> 用于<em>指示</em>对象 <code>t</code> 可以“被移动”，即允许从 <code>t</code> 到另一对象的有效率的资源传递。</p>
<p>特别是， <code>std::move</code> 生成标识其参数 <code>t</code> 的<a href="https://zh.cppreference.com/w/cpp/language/value_category">亡值表达式</a>。它准确地等价于到右值引用类型的 static_cast 。</p>
</blockquote>
<h3 id="std-bind"><a href="#std-bind" class="headerlink" title="std::bind"></a>std::bind</h3><blockquote>
<p><a href="https://zh.cppreference.com/w/cpp/utility/functional/bind">https://zh.cppreference.com/w/cpp/utility/functional/bind</a></p>
<p>函数模板 <code>std::bind</code> 生成 f 的转发调用包装器。调用此包装器等价于以一些<a href="https://zh.cppreference.com/w/cpp/utility/functional/bind#.E5.8F.97.E7.BB.91.E5.AE.9A.E5.8F.82.E6.95.B0">绑定</a>到 args 的参数调用 f。</p>
<p>如果 <a href="https://zh.cppreference.com/w/cpp/types/is_constructible">std::is_constructible</a>&lt;<a href="https://zh.cppreference.com/w/cpp/types/decay">std::decay</a><F>::type, F&gt;::value 是 false，或 <a href="https://zh.cppreference.com/w/cpp/types/is_constructible">std::is_constructible</a>&lt;<a href="https://zh.cppreference.com/w/cpp/types/decay">std::decay</a><Arg_i>::type, Arg_i&gt;::value 对于 <code>Args</code> 中的某个类型 <code>Arg_i</code> 是 false，那么程序非良构。</Arg_i></F></p>
<p>如果 <a href="https://zh.cppreference.com/w/cpp/types/decay">std::decay</a><Ti>::type 或 <code>Args</code> 中的某个类型不<a href="https://zh.cppreference.com/w/cpp/named_req/MoveConstructible"><em>可移动构造</em> <em>(MoveConstructible)</em> </a>或<a href="https://zh.cppreference.com/w/cpp/named_req/Destructible"><em>可析构</em> <em>(Destructible)</em> </a>，那么行为未定义。</Ti></p>
</blockquote>
<h3 id="std-placeholders-1-std-placeholders-N"><a href="#std-placeholders-1-std-placeholders-N" class="headerlink" title="std::placeholders::_1, std::placeholders::_N"></a>std::placeholders::_1, std::placeholders::_N</h3><blockquote>
<p><a href="https://zh.cppreference.com/w/cpp/utility/functional/placeholders">https://zh.cppreference.com/w/cpp/utility/functional/placeholders</a></p>
<p><strong>std::placeholders</strong> 命名空间含有占位对象 <code>[_1, . . . _N]</code> ，其中 <code>N</code> 是实现定义的最大数字。</p>
<p>于 <a href="https://zh.cppreference.com/w/cpp/utility/functional/bind">std::bind</a> 表达式用作参数时，占位符对象被存储于生成的函数对象，而以未绑定参数调用函数对象时，每个占位符 <code>_N</code> 被对应的第 N 个未绑定参数替换。</p>
<table>
<thead>
<tr>
<th>每个占位符如同以 extern <em>&#x2F;*unspecified*&#x2F;</em> _1; 声明。</th>
<th>(C++17 前)</th>
</tr>
</thead>
<tbody><tr>
<td>鼓励实现如同以 inline constexpr <em>&#x2F;*unspecified*&#x2F;</em> _1; 声明占位符，尽管标准仍然允许以 extern <em>&#x2F;*unspecified*&#x2F;</em> _1; 声明它们。</td>
<td>(C++17 起)</td>
</tr>
</tbody></table>
<p>占位符对象的类型<a href="https://zh.cppreference.com/w/cpp/named_req/DefaultConstructible"><em>可默认构造</em> <em>(DefaultConstructible)</em> </a>且<a href="https://zh.cppreference.com/w/cpp/named_req/CopyConstructible"><em>可复制构造</em> <em>(CopyConstructible)</em> </a>，其默认复制&#x2F;移动构造函数不抛异常，且对于任何占位符 <code>_N</code> ，类型 <a href="https://zh.cppreference.com/w/cpp/utility/functional/is_placeholder">std::is_placeholder</a>&lt;decltype(_N)&gt; 有定义且从 <a href="https://zh.cppreference.com/w/cpp/types/integral_constant">std::integral_constant</a>&lt;int, N&gt; 导出。</p>
</blockquote>
<h3 id="std-function"><a href="#std-function" class="headerlink" title="std::function"></a>std::function</h3><blockquote>
<p><a href="https://zh.cppreference.com/w/cpp/utility/functional/function">https://zh.cppreference.com/w/cpp/utility/functional/function</a></p>
<p>类模板 <code>std::function</code> 是通用多态函数包装器。 <code>std::function</code> 的实例能存储、复制及调用任何<a href="https://zh.cppreference.com/w/cpp/named_req/CopyConstructible"><em>可复制构造</em> <em>(CopyConstructible)</em> </a>的<a href="https://zh.cppreference.com/w/cpp/named_req/Callable"><em>可调用</em> <em>(Callable)</em> </a><em>目标</em>——函数（通过其指针）、 <a href="https://zh.cppreference.com/w/cpp/language/lambda">lambda 表达式</a>、 <a href="https://zh.cppreference.com/w/cpp/utility/functional/bind">bind 表达式</a>或其他函数对象，还有指向成员函数指针和指向数据成员指针。</p>
<p>存储的可调用对象被称为 <code>std::function</code> 的<em>目标</em>。若 <code>std::function</code> 不含目标，则称它为<em>空</em>。调用<em>空</em> <code>std::function</code> 的<em>目标</em>导致抛出 <a href="https://zh.cppreference.com/w/cpp/utility/functional/bad_function_call">std::bad_function_call</a> 异常。</p>
<p><code>std::function</code> 满足<a href="https://zh.cppreference.com/w/cpp/named_req/CopyConstructible"><em>可复制构造</em> <em>(CopyConstructible)</em> </a>和<a href="https://zh.cppreference.com/w/cpp/named_req/CopyAssignable"><em>可复制赋值</em> <em>(CopyAssignable)</em> </a>。</p>
</blockquote>
<h3 id="std-forward"><a href="#std-forward" class="headerlink" title="std::forward"></a>std::forward</h3><ul>
<li>参数包完美转发</li>
</ul>
<blockquote>
<p><a href="https://zh.cppreference.com/w/cpp/utility/forward">std::forward - cppreference.com</a></p>
<p>\1) 转发左值为左值或右值，依赖于 T</p>
<p>当 <code>t</code> 是<a href="https://zh.cppreference.com/w/cpp/language/reference#.E8.BD.AC.E5.8F.91.E5.BC.95.E7.94.A8">转发引用</a>（作为到无 cv 限定函数模板形参的右值引用的函数实参），此重载将参数以在传递给调用方函数时的<a href="https://zh.cppreference.com/w/cpp/language/value_category">值类别</a>转发给另一个函数。</p>
<p>例如，若用于如下的包装器，则模板表现为下方所描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">template&lt;class T&gt;</span><br><span class="line">void wrapper(T&amp;&amp; arg) </span><br><span class="line">&#123;</span><br><span class="line">// arg 始终是左值</span><br><span class="line">foo(std::forward&lt;T&gt;(arg)); // 转发为左值或右值，依赖于 T</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>若对 <code>wrapper()</code> 的调用传递右值 <code>std::string</code> ，则推导 <code>T</code> 为 <code>std::string</code> （非 <code>std::string&amp;</code> 或 <code>std::string&amp;&amp;</code>） ，且 <code>std::forward</code> 确保将右值引用传递给 <code>foo</code> 。</li>
<li>若对 <code>wrapper()</code> 的调用传递 const 左值 <code>std::string</code> ，则推导 <code>T</code> 为 <code>const std::string&amp;</code> ，且 <code>std::forward</code> 确保将 const 左值引用传递给 <code>foo</code> 。</li>
<li>若对 <code>wrapper()</code> 的调用传递非 const 左值 <code>std::string</code> ，则推导 <code>T</code> 为 <code>std::string&amp;</code> ，且 <code>std::forward</code> 确保将非 const 左值引用传递给 <code>foo</code> 。</li>
</ul>
<p>\2) 转发右值为右值并禁止右值的转发为左值</p>
<p>此重载令转发表达式（如函数调用）的结果可行，结果可以是右值或左值，同转发引用参数的原始值类别。</p>
<p>例如，若包装器不仅转发其参数，还在参数上调用成员函数，并转发其结果：</p>
</blockquote>
]]></content>
      <tags>
        <tag>Note</tag>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
